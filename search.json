[{"path":"https://bluefoxr.github.io/COINr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 William Becker Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://bluefoxr.github.io/COINr/articles/adjustments.html","id":"regeneration","dir":"Articles","previous_headings":"","what":"Regeneration","title":"Adjustments and Comparisons","text":"first three points list addressed . must begin explaining “Log” coin. COINr, functions distinguished “building functions”. functions start capital letter (one exception), following defining features: building function run, creates new data set .$Data. building function run, records function arguments .$Log. Building functions following: Let’s explain concept “Log” now example. build example coin manually, look inside coin’s Log list: Looking log, can see list entry “new_coin”, contains exactly arguments passed new_coin(): iData, iMeta, level names, two arguments default values function. also another logical variable called can_regen internal use . demonstrates call building function, arguments stored coin. show another example, apply Normalise() function: Now additionally “Normalise” entry, function arguments specified, plus defaults. Now, reason building functions write log, allows coins regenerated, means automatically re-running building functions used create coin data sets. done function called Regen(): Regen() called, runs buildings order found log. important point iteratively re-run building functions, might end order expect. can check log doubts (anyway probably encounter error order incorrect). Also, building function can run regeneration. regenerate coins - aren’t results exactly ? Yes, unless modify something first. brings us copying modifying points. Let us take example: first, ’ll build full example coin, ’ll make copy existing coin: point, coins identical. want test alternative methodology, example different normalisation method? can done editing Log coin, regenerating. , change normalisation method percentile ranks, regenerate. make change necessary target right argument. Let’s first see already Log Normalise(): moment, normalisation min-max onto interval 0 100. change new function n_prank(): ’s . summary, copied coin, edited log different normalisation methodology, regenerated results. Now remains compare results, dealt next section. , let’s consider kind things can change coin. Anything Log can changed, course change something valid. long carefully follow function help pages, shouldn’t difficult using functions directly. can also change anything else coin, including input data, targeting log new_coin(). Changing anything outside Log generally effect coin recreated new_coin() regeneration overwritten. exception use argument Regen(): case regeneration begin function name pass . partial regeneration can also useful speed computation time.","code":"library(COINr)  # create new coin by calling new_coin() coin <- new_coin(ASEM_iData, ASEM_iMeta,                  level_names = c(\"Indicator\", \"Pillar\", \"Sub-index\", \"Index\")) #> iData checked and OK. #> iMeta checked and OK. #> Written data set to .$Data$Raw  # look in log str(coin$Log, max.level = 2) #> List of 2 #>  $ new_coin :List of 5 #>   ..$ iData      :'data.frame':  51 obs. of  60 variables: #>   ..$ iMeta      :'data.frame':  68 obs. of  10 variables: #>   ..$ exclude    : NULL #>   ..$ level_names: chr [1:4] \"Indicator\" \"Pillar\" \"Sub-index\" \"Index\" #>   ..$ quietly    : logi FALSE #>  $ can_regen: logi TRUE # normalise coin <- Normalise(coin, dset = \"Raw\") #> Written data set to .$Data$Normalised  # view log str(coin$Log, max.level = 2) #> List of 3 #>  $ new_coin :List of 5 #>   ..$ iData      :'data.frame':  51 obs. of  60 variables: #>   ..$ iMeta      :'data.frame':  68 obs. of  10 variables: #>   ..$ exclude    : NULL #>   ..$ level_names: chr [1:4] \"Indicator\" \"Pillar\" \"Sub-index\" \"Index\" #>   ..$ quietly    : logi FALSE #>  $ can_regen: logi TRUE #>  $ Normalise:List of 7 #>   ..$ dset        : chr \"Raw\" #>   ..$ global_specs: NULL #>   ..$ indiv_specs : NULL #>   ..$ directions  : NULL #>   ..$ out2        : chr \"coin\" #>   ..$ write_to    : NULL #>   ..$ write2log   : logi TRUE # regenerate the coin coin <- Regen(coin, quietly = FALSE) #> iData checked and OK. #> iMeta checked and OK. #> Written data set to .$Data$Raw #> Written data set to .$Data$Normalised # build full example coin coin <- build_example_coin(quietly = TRUE)  # copy coin coin2 <- coin str(coin2$Log$Normalise) #> List of 7 #>  $ dset        : chr \"Treated\" #>  $ global_specs:List of 2 #>   ..$ f_n     : chr \"n_minmax\" #>   ..$ f_n_para:List of 1 #>   .. ..$ : num [1:2] 0 100 #>  $ indiv_specs : NULL #>  $ directions  : NULL #>  $ out2        : chr \"coin\" #>  $ write_to    : NULL #>  $ write2log   : logi TRUE # change to prank function (percentile ranks) # we don't need to specify any additional parameters (f_n_para) here coin2$Log$Normalise$global_specs <- list(f_n = \"n_prank\")  # regenerate coin2 <- Regen(coin2)"},{"path":"https://bluefoxr.github.io/COINr/articles/adjustments.html","id":"addingremoving-indicators","dir":"Articles","previous_headings":"","what":"Adding/removing indicators","title":"Adjustments and Comparisons","text":"One adjustment may interest add remove indicators. needs done care removing indicator requires removed iData iMeta building coin new_coin(). possible remove indicators coin assembled, without completely regenerating coin. One way add remove indicators edit iData iMeta data frames hand rebuild coin. Another way regenerate coin, use exclude argument new_coin(). short cut function, change_ind() can also used quickly add remove indicators framework, regenerate coin, one command. drop argument used specify indicators remove. add argument adds indicators, although indicators specified add must available original iData iMeta passed new_coin(). means add can used previously excluded indicators. general, want test effect different indicators, include candidate indicators iData iMeta use exclude new_coin() /change_ind() select subsets. advantage way different subsets can tested part sensitivity analysis, example. fact change_ind() simply edits exclude argument new_coin(), quick way . Moreover safer, performs checks indicator codes add remove. also possible effectively remove indicators setting weights zero. similar approach necessarily identical: weights come play aggregation step, usually last operation. perform unit screening, imputation, presence zero-weighted indicators still influence results, depending settings. effects removing indicators aggregates can also tested using remove_elements() function, removes indicators aggregates specified level calculates impact.","code":"# copy base coin coin_remove <- coin  # remove two indicators and regenerate the coin coin_remove <- change_ind(coin, drop = c(\"LPI\", \"Forest\"), regen = TRUE) #> coin has been regenerated using new specs.  coin_remove #> -------------- #> A coin with... #> -------------- #> Input: #>   Units: 51 (AUS, AUT, BEL, ...) #>   Indicators: 47 (Goods, Services, FDI, ...) #>   Denominators: 4 (Area, Energy, GDP, ...) #>   Groups: 4 (GDP_group, GDPpc_group, Pop_group, ...) #>  #> Structure: #>   Level 1 Indicator: 47 indicators (FDI, ForPort, Goods, ...)  #>   Level 2 Pillar: 8 groups (ConEcFin, Instit, P2P, ...)  #>   Level 3 Sub-index: 2 groups (Conn, Sust)  #>   Level 4 Index: 1 groups (Index)  #>  #> Data sets: #>   Raw (51 units) #>   Denominated (51 units) #>   Imputed (51 units) #>   Screened (51 units) #>   Treated (51 units) #>   Normalised (51 units) #>   Aggregated (51 units)"},{"path":"https://bluefoxr.github.io/COINr/articles/adjustments.html","id":"comparison","dir":"Articles","previous_headings":"","what":"Comparison","title":"Adjustments and Comparisons","text":"Comparing coins helped two dedicated functions, compare_coins() compare_coins_multi(). former comparing two coins , whereas latter allows compare two coins. Let’s start comparing two coins : default example coin, coin percentile rank normalisation method: shows overall index, maximum rank change 10 places Portugal. can compare ranks scores, indicator aggregate index. also works number units changes. moment, coin imputation step fills NAs. alternatively filter units less 90% data availability remove imputation step. can see 46 units screening step. Now let’s compare original coin: removed units marked NA second coin. Finally, demonstrate comparing multiple coins, can call compare_coins_multi() function: simply shows ranks three coins side side. can also choose compare scores, display rank changes absolute rank changes. Obviously requirement coins must common units, must iCode dset available within.","code":"# compare index, sort by absolute rank difference compare_coins(coin, coin2, dset = \"Aggregated\", iCode = \"Index\",               sort_by = \"Abs.diff\", decreasing = TRUE) #>    uCode coin.1 coin.2 Diff Abs.diff #> 43   PRT     27     17   10       10 #> 29   LAO     48     39    9        9 #> 33   MLT     10     19   -9        9 #> 14   EST     22     16    6        6 #> 21   IDN     43     49   -6        6 #> 13   ESP     19     24   -5        5 #> 19   HRV     18     23   -5        5 #> 30   LTU     16     11    5        5 #> 35   MNG     44     48   -4        4 #> 17   GBR     15     12    3        3 #> 25   JPN     34     31    3        3 #> 32   LVA     23     20    3        3 #> 40   PAK     50     47    3        3 #> 3    BEL      5      7   -2        2 #> 4    BGD     46     44    2        2 #> 8    CHN     49     51   -2        2 #> 20   HUN     20     22   -2        2 #> 23   IRL     12     14   -2        2 #> 26   KAZ     47     45    2        2 #> 28   KOR     31     33   -2        2 #> 31   LUX      8     10   -2        2 #> 37   NLD      2      4   -2        2 #> 41   PHL     38     40   -2        2 #> 42   POL     26     28   -2        2 #> 47   SVK     24     26   -2        2 #> 48   SVN     11      9    2        2 #> 2    AUT      7      6    1        1 #> 5    BGR     30     29    1        1 #> 6    BRN     40     41   -1        1 #> 9    CYP     29     30   -1        1 #> 10   CZE     17     18   -1        1 #> 11   DEU      9      8    1        1 #> 12   DNK      3      2    1        1 #> 22   IND     45     46   -1        1 #> 24   ITA     28     27    1        1 #> 27   KHM     37     36    1        1 #> 34   MMR     41     42   -1        1 #> 36   MYS     39     38    1        1 #> 38   NOR      4      3    1        1 #> 39   NZL     33     34   -1        1 #> 45   RUS     51     50    1        1 #> 46   SGP     14     15   -1        1 #> 49   SWE      6      5    1        1 #> 50   THA     42     43   -1        1 #> 51   VNM     36     37   -1        1 #> 1    AUS     35     35    0        0 #> 7    CHE      1      1    0        0 #> 15   FIN     13     13    0        0 #> 16   FRA     21     21    0        0 #> 18   GRC     32     32    0        0 #> 44   ROU     25     25    0        0 # copy original coin coin90 <- coin  # remove imputation entry completely (function will not be run) coin90$Log$Impute <- NULL  # set data availability threshold to 90% coin90$Log$Screen$dat_thresh <- 0.9  # we also need to tell Screen() to use the denominated dset now coin90$Log$Screen$dset <- \"Denominated\"  # regenerate coin90 <- Regen(coin90)  # summarise coin coin90 #> -------------- #> A coin with... #> -------------- #> Input: #>   Units: 51 (AUS, AUT, BEL, ...) #>   Indicators: 49 (Goods, Services, FDI, ...) #>   Denominators: 4 (Area, Energy, GDP, ...) #>   Groups: 4 (GDP_group, GDPpc_group, Pop_group, ...) #>  #> Structure: #>   Level 1 Indicator: 49 indicators (FDI, ForPort, Goods, ...)  #>   Level 2 Pillar: 8 groups (ConEcFin, Instit, P2P, ...)  #>   Level 3 Sub-index: 2 groups (Conn, Sust)  #>   Level 4 Index: 1 groups (Index)  #>  #> Data sets: #>   Raw (51 units) #>   Denominated (51 units) #>   Screened (46 units) #>   Treated (46 units) #>   Normalised (46 units) #>   Aggregated (46 units) # compare index, sort by absolute rank difference compare_coins(coin, coin90, dset = \"Aggregated\", iCode = \"Index\",               sort_by = \"Abs.diff\", decreasing = TRUE) #>    uCode coin.1 coin.2 Diff Abs.diff #> 40   PAK     50     44    6        6 #> 13   ESP     19     24   -5        5 #> 22   IND     45     40    5        5 #> 45   RUS     51     46    5        5 #> 50   THA     42     37    5        5 #> 8    CHN     49     45    4        4 #> 26   KAZ     47     43    4        4 #> 16   FRA     21     18    3        3 #> 33   MLT     10     13   -3        3 #> 46   SGP     14     11    3        3 #> 21   IDN     43     41    2        2 #> 32   LVA     23     21    2        2 #> 35   MNG     44     42    2        2 #> 47   SVK     24     22    2        2 #> 5    BGR     30     31   -1        1 #> 12   DNK      3      2    1        1 #> 14   EST     22     23   -1        1 #> 15   FIN     13     14   -1        1 #> 18   GRC     32     33   -1        1 #> 19   HRV     18     19   -1        1 #> 28   KOR     31     30    1        1 #> 36   MYS     39     38    1        1 #> 37   NLD      2      3   -1        1 #> 39   NZL     33     32    1        1 #> 41   PHL     38     39   -1        1 #> 42   POL     26     27   -1        1 #> 43   PRT     27     26    1        1 #> 48   SVN     11     10    1        1 #> 1    AUS     35     35    0        0 #> 2    AUT      7      7    0        0 #> 3    BEL      5      5    0        0 #> 7    CHE      1      1    0        0 #> 9    CYP     29     29    0        0 #> 10   CZE     17     17    0        0 #> 11   DEU      9      9    0        0 #> 17   GBR     15     15    0        0 #> 20   HUN     20     20    0        0 #> 23   IRL     12     12    0        0 #> 24   ITA     28     28    0        0 #> 25   JPN     34     34    0        0 #> 30   LTU     16     16    0        0 #> 31   LUX      8      8    0        0 #> 38   NOR      4      4    0        0 #> 44   ROU     25     25    0        0 #> 49   SWE      6      6    0        0 #> 51   VNM     36     36    0        0 #> 4    BGD     46     NA   NA       NA #> 6    BRN     40     NA   NA       NA #> 27   KHM     37     NA   NA       NA #> 29   LAO     48     NA   NA       NA #> 34   MMR     41     NA   NA       NA compare_coins_multi(list(Nominal = coin, Prank = coin2, NoLPIFor = coin_remove,                          Screen90 = coin90), dset = \"Aggregated\", iCode = \"Index\") #>    uCode Nominal Prank NoLPIFor Screen90 #> 7    CHE       1     1        1        1 #> 37   NLD       2     4        4        3 #> 12   DNK       3     2        2        2 #> 38   NOR       4     3        3        4 #> 3    BEL       5     7        6        5 #> 49   SWE       6     5        5        6 #> 2    AUT       7     6        7        7 #> 31   LUX       8    10        8        8 #> 11   DEU       9     8       11        9 #> 33   MLT      10    19        9       13 #> 48   SVN      11     9       10       10 #> 23   IRL      12    14       12       12 #> 15   FIN      13    13       13       14 #> 46   SGP      14    15       14       11 #> 17   GBR      15    12       16       15 #> 30   LTU      16    11       15       16 #> 10   CZE      17    18       19       17 #> 19   HRV      18    23       21       19 #> 13   ESP      19    24       20       24 #> 20   HUN      20    22       22       20 #> 16   FRA      21    21       25       18 #> 14   EST      22    16       23       23 #> 32   LVA      23    20       17       21 #> 47   SVK      24    26       24       22 #> 44   ROU      25    25       26       25 #> 42   POL      26    28       27       27 #> 43   PRT      27    17       18       26 #> 24   ITA      28    27       28       28 #> 9    CYP      29    30       29       29 #> 5    BGR      30    29       30       31 #> 28   KOR      31    33       31       30 #> 18   GRC      32    32       32       33 #> 39   NZL      33    34       33       32 #> 25   JPN      34    31       34       34 #> 1    AUS      35    35       37       35 #> 51   VNM      36    37       36       36 #> 27   KHM      37    36       35       NA #> 41   PHL      38    40       40       39 #> 36   MYS      39    38       38       38 #> 6    BRN      40    41       45       NA #> 34   MMR      41    42       39       NA #> 50   THA      42    43       42       37 #> 21   IDN      43    49       41       41 #> 35   MNG      44    48       47       42 #> 22   IND      45    46       46       40 #> 4    BGD      46    44       44       NA #> 26   KAZ      47    45       49       43 #> 29   LAO      48    39       43       NA #> 8    CHN      49    51       50       45 #> 40   PAK      50    47       48       44 #> 45   RUS      51    50       51       46"},{"path":"https://bluefoxr.github.io/COINr/articles/aggregate.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Aggregation","text":"Aggregation operation combining multiple indicators one value. Many composite indicators hierarchical structure, practice often involves multiple aggregations, example aggregating groups indicators aggregate values, aggregating values higher-level aggregates, , final index value. Aggregating almost always done normalised data, unless indicators already similar scales. Otherwise relative influence indicators uneven. course don’t aggregate indicators , might content scoreboard, perhaps aggregating several aggregate values rather single index. However, consider aggregation substitute underlying indicator data, complement . Overall, aggregating indicators form information compression - trying combine many indicator values one, inevitably information lost (recent paper may interest). long kept mind, indicator data presented made available along side aggregate values, aggregate (index) values can complement indicators used useful tool summarising underlying data, identifying overall trends patterns.","code":""},{"path":"https://bluefoxr.github.io/COINr/articles/aggregate.html","id":"weighting","dir":"Articles","previous_headings":"Introduction","what":"Weighting","title":"Aggregation","text":"Many aggregation methods involve kind weighting, .e. coefficients define relative weight indicators/aggregates aggregation. order aggregate, weights need first specified, effectively adjust weights necessary aggregate. chicken egg conundrum best solved aggregating initially trial set weights, perhaps equal weights, seeing effects weighting, making weight adjustments necessary.","code":""},{"path":[]},{"path":"https://bluefoxr.github.io/COINr/articles/aggregate.html","id":"means","dir":"Articles","previous_headings":"Introduction > Approaches","what":"Means","title":"Aggregation","text":"straightforward widely-used approach aggregation weighted arithmetic mean. Denoting indicators \\(x_i \\\\{x_1, x_2, ... , x_d \\}\\), weighted arithmetic mean calculated : \\[ y = \\frac{1}{\\sum_{=1}^d w_i} \\sum_{=1}^d x_iw_i \\] \\(w_i\\) weights corresponding \\(x_i\\). , weights chosen sum 1, simplify weighted sum indicators. case, weighted mean scaled sum weights, weights operate relative . Clearly, index two levels, multiple aggregations. example, may three groups indicators give three separate aggregate scores. aggregate scores fed back weighted arithmetic mean calculate overall index. arithmetic mean “perfect compensability”, means high score one indicator perfectly compensate low score another. simple example two indicators scaled 0 10 equal weighting, unit scores (0, 10) given score unit scores (5, 5) – score 5. alternative weighted geometric mean, uses product indicators rather sum. \\[ y = \\left( \\prod_{=1}^d x_i^{w_i} \\right)^{1 / \\sum_{=1}^d w_i} \\] simply product indicator power weight, raised power inverse sum weights. geometric mean less compensatory arithmetic mean – low values one indicator partially substitute high values others. reason, geometric mean may sometimes preferred indicators represent “essentials”. example might quality life: longer life expectancy perhaps compensate severe restrictions personal freedoms. third type mean, fact third -called Pythagorean means weighted harmonic mean. uses mean reciprocals indicators: \\[ y = \\frac{\\sum_{=1}^d w_i}{\\sum_{=1}^d w_i/x_i} \\] harmonic mean least compensatory three means, even less geometric mean. often used taking mean rates ratios.","code":""},{"path":"https://bluefoxr.github.io/COINr/articles/aggregate.html","id":"other-methods","dir":"Articles","previous_headings":"Introduction > Approaches","what":"Other methods","title":"Aggregation","text":"weighted median also simple alternative candidate. defined ordering indicator values, picking value half assigned weight , half . ordered indicators \\(x_1, x_2, ..., x_d\\) corresponding weights \\(w_1, w_2, ..., w_d\\) weighted median indicator value \\(x_m\\) satisfies: \\[ \\sum_{=1}^{m-1} w_i \\leq \\frac{1}{2}, \\: \\: \\text{} \\sum_{=m+1}^{d} w_i \\leq \\frac{1}{2} \\] median known robust outliers, may interest distribution scores across indicators skewed. Another somewhat different approach aggregation use Copeland method. approach based pairwise comparisons units proceeds follows. First, outranking matrix constructed, square matrix \\(N\\) columns \\(N\\) rows, \\(N\\) number units. element \\(p\\)th row \\(q\\)th column matrix calculated summing indicator weights unit \\(p\\) higher value indicators unit \\(q\\). Similarly, cell \\(q\\)th row \\(p\\)th column (cell opposite side diagonal), calculated sum weights unit \\(q\\) higher value unit \\(p\\). indicator weights sum one indicators, two scores also sum 1 definition. outranking matrix effectively summarises extent unit scores better worse units, unit pairs. Copeland score unit calculated taking sum row values outranking matrix. can seen average measure extent unit performs units. Clearly, can applied level aggregation used hierarchically like aggregation methods presented . cases, one unit may score higher indicators. called dominance pair, corresponds pair scores equal one (equivalent pair scores equal zero). percentage dominance pairs indication robustness. dominance, way methodological choices (weighting, normalisation, etc.) can affect relative standing pair ranking. One always ranked higher . greater number dominance (robust) pairs classification, less sensitive country ranks methodological assumptions. COINr allows calculate percentage dominance pairs inbuilt function.","code":""},{"path":"https://bluefoxr.github.io/COINr/articles/aggregate.html","id":"coins","dir":"Articles","previous_headings":"","what":"Coins","title":"Aggregation","text":"now turn data sets coin can aggregated using methods described previously. function interest Aggregate(), generic methods coins, purses data frames. demonstrate COINr’s Aggregate() function coin, begin loading package, building example coin, normalised data set. Consider needed aggregate normalised data higher levels. need: data set aggregate structure index: indicators belong groups, etc. Weights assign indicators Specifications aggregation: aggregation function (e.g. weighted mean) parameters passed function elements already present coin, except last. first point, simply need tell Aggregate() data set use (using dset argument). structure index defined building coin new_coin() (iMeta argument). Weights also attached iMeta. Finally, specifications can specified arguments Aggregate(). Let’s begin simple case though: using function defaults. default, aggregation function performs following steps: Uses weights attached iMeta Aggregates hierarchically (default method weighted arithmetic mean), following index structure specified iMeta using data specified dset Creates new data set .$Data$Aggregated, consists data dset, plus extra columns scores aggregation group, aggregation level. Let’s examine new data set. columns level added successively, working level 1 upwards, highest aggregation level (index, ) last column data frame. see level 2 aggregated scores created aggregating group indicators (first eight columns), followed two sub-indexes (level 3) created aggregating scores level 2, finally Index (level 4), created aggregating “Conn” “Sust” sub-indexes. format data frame hugely convenient inspecting results. see user-friendly version, use get_results() function.","code":"library(COINr)  # build example up to normalised data set coin <- build_example_coin(up_to = \"Normalise\") #> iData checked and OK. #> iMeta checked and OK. #> Written data set to .$Data$Raw #> Written data set to .$Data$Denominated #> Written data set to .$Data$Imputed #> Written data set to .$Data$Screened #> Written data set to .$Data$Treated #> Written data set to .$Data$Normalised # aggregate normalised data set coin <- Aggregate(coin, dset = \"Normalised\") #> Written data set to .$Data$Aggregated dset_aggregated <- get_dset(coin, dset = \"Aggregated\")  nc <- ncol(dset_aggregated) # view aggregated scores (last 11 columns here) dset_aggregated[(nc - 10) : nc] |>   head(5) |>   signif(3) #>   ConEcFin Environ Instit   P2P Physical Political Social SusEcFin Conn Sust #> 1     12.6    31.9   52.4 39.50     34.8      52.5   71.9     55.7 38.4 53.2 #> 2     26.2    69.5   77.5 54.10     41.1      78.2   72.8     62.9 55.4 68.4 #> 3     48.2    53.0   75.6 43.30     72.0      80.8   86.2     50.1 64.0 63.1 #> 4     13.3    81.7   26.5  5.85     22.9      32.4   27.5     64.6 20.2 57.9 #> 5     24.6    55.7   75.9 27.10     28.4      67.5   53.3     61.7 44.7 56.9 #>   Index #> 1  45.8 #> 2  61.9 #> 3  63.5 #> 4  39.0 #> 5  50.8"},{"path":"https://bluefoxr.github.io/COINr/articles/aggregate.html","id":"coinr-aggregation-functions","dir":"Articles","previous_headings":"Coins","what":"COINr aggregation functions","title":"Aggregation","text":"Let’s now explore options Aggregate() function. Like coin-building functions COINr, Aggregate() comes number inbuilt options, can also accept function passed , long satisfies requirements. COINr’s inbuilt aggregation functions begin a_, : a_amean(): weighted arithmetic mean a_gmean(): weighted geometric mean a_hmean(): weighted harmonic mean a_copeland(): Copeland method (note: requires by_df = TRUE) default, arithmetic mean called can easily change geometric mean, example. However run problem: geometric mean fail values aggregate less equal zero. use geometric mean re-normalisation step avoid . Luckily straightforward COINr: Now, since indicators scaled 1 100 (instead 0 100 previously), can aggregated geometric mean.","code":"coin <- Normalise(coin, dset = \"Treated\",                    global_specs = list(f_n = \"n_minmax\",                                         f_n_para = list(l_u = c(1,100)))) #> Written data set to .$Data$Normalised #> (overwritten existing data set) coin <- Aggregate(coin, dset = \"Normalised\",                    f_ag = \"a_gmean\") #> Written data set to .$Data$Aggregated #> (overwritten existing data set)"},{"path":"https://bluefoxr.github.io/COINr/articles/aggregate.html","id":"external-functions","dir":"Articles","previous_headings":"Coins","what":"External functions","title":"Aggregation","text":"four aggregation functions mentioned format (try e.g. ?a_gmean), built COINr package. want use another type aggregation function? process exactly . section use functions packages: matrixStats package Compind package. imported COINr, code work installed. vignette built computer, check whether packages installed: either returned FALSE, following code chunks see blanks. See online version vignette see results, install packages rebuild vignettes. Now example, can use weightedMedian() function matrixStats package. number arguments, ones use x w (meanings COINr functions), na.rm need set TRUE. weights w need specified f_ag_para automatically passed f_ag unless specified otherwise. general requirements f_ag functions passed Aggregate() : input function numeric vector x, possibly missing values function returns single (scalar) aggregated value function accepts vector weights, vector (length x) passed function argument w. function doesn’t accept vector weights, can set w = \"none\" arguments Aggregate(), try pass w. arguments f_ag, apart x w, included named list f_ag_para. Sometimes may mean create wrapper function satisfy requirements. example, ‘Compind’ package number sophisticated aggregation approaches. “benefit doubt” uses data envelopment analysis aggregate indicators, however function Compind::ci_bod() outputs list. can make wrapper function use inside COINr: benefit doubt approach automatically assigns individual weights unit, need specify w = \"none\" stop Aggregate() attempting pass weights function. Importantly, also need specify by_df = TRUE tells Aggregate() pass data frame f_ag rather vector.","code":"ms_installed <- requireNamespace(\"matrixStats\", quietly = TRUE) ms_installed #> [1] TRUE  ci_installed <- requireNamespace(\"Compind\", quietly = TRUE) ci_installed #> [1] TRUE # RESTORE above eval=ms_installed # load matrixStats package library(matrixStats)  # aggregate using weightedMedian() coin <- Aggregate(coin, dset = \"Normalised\",                    f_ag = \"weightedMedian\",                    f_ag_para = list(na.rm = TRUE)) # RESTORE ABOVE eval= ci_installed # load Compind suppressPackageStartupMessages(library(Compind))  # wrapper to get output of interest from ci_bod # also suppress messages about missing values ci_bod2 <- function(x){   suppressMessages(Compind::ci_bod(x)$ci_bod_est) }  # aggregate coin <- Aggregate(coin, dset = \"Normalised\",                    f_ag = \"ci_bod2\", by_df = TRUE, w = \"none\")"},{"path":"https://bluefoxr.github.io/COINr/articles/aggregate.html","id":"data-availability-limits","dir":"Articles","previous_headings":"Coins","what":"Data availability limits","title":"Aggregation","text":"Many aggregation functions return aggregated value long least one values passed non-NA. example, R’s mean() function: Depending set na.rm, either get answer NA, many aggregation functions (e.g. ones built COINr). Sometimes might want bit control. example, five indicators group, might reasonable give aggregated score , say, least three five indicators non-NA values. Aggregate() function option specify data availability limit aggregating. simply set dat_thresh value 0 1, aggregation group, unit data availability lower dat_thresh get NA value instead aggregated score. easily illustrated data frame (see next section details aggregating data frames): require least 2/3 indicators non-NA give aggregated value. see second row aggregated give NA 1/3 data availability.","code":"# data with all NAs except 1 value x <- c(NA, NA, NA, 1, NA)  mean(x) #> [1] NA  mean(x, na.rm = TRUE) #> [1] 1 df1 <- data.frame(   i1 = c(1, 2, 3),   i2 = c(3, NA, NA),   i3 = c(1, NA, 1) ) df1 #>   i1 i2 i3 #> 1  1  3  1 #> 2  2 NA NA #> 3  3 NA  1 # aggregate with arithmetic mean, equal weight and data avail limit of 2/3 Aggregate(df1, f_ag = \"a_amean\",            f_ag_para = list(w = c(1,1,1)),            dat_thresh = 2/3) #> [1] 1.666667       NA 2.000000"},{"path":"https://bluefoxr.github.io/COINr/articles/aggregate.html","id":"by-level","dir":"Articles","previous_headings":"Coins","what":"By level","title":"Aggregation","text":"can also use different aggregation function aggregation level specifying f_ag vector function names rather single function. example, four levels index, means three aggregation operations performed: Level 1 Level 2, Level 2 Level 3, Level 3 Level 4. means f_ag vector must n-1 entries, n number aggregation levels. functions run order aggregation. way, parameters need passed functions specified f_ag, f_ag_para can specified list length n-1, element list parameters.","code":"coin <- Aggregate(coin, dset = \"Normalised\", f_ag = c(\"a_amean\", \"a_gmean\", \"a_amean\")) #> Written data set to .$Data$Aggregated #> (overwritten existing data set)"},{"path":"https://bluefoxr.github.io/COINr/articles/aggregate.html","id":"data-frames","dir":"Articles","previous_headings":"","what":"Data frames","title":"Aggregation","text":"Aggregate() function also works way data frames. probably useful aggregation functions take vectors inputs, rather data frames, since otherwise easier go directly underlying function. case, couple examples. First, using built COINr function compute weighted harmonic mean data frame.","code":"# get some indicator data - take a few columns from built in data set X <- ASEM_iData[12:15]  # normalise to avoid zeros - min max between 1 and 100 X <- Normalise(X,                 global_specs = list(f_n = \"n_minmax\",                                      f_n_para = list(l_u = c(1,100))))  # aggregate using harmonic mean, with some weights y <- Aggregate(X, f_ag = \"a_hmean\", f_ag_para = list(w = c(1, 1, 2, 1)))  cbind(X, y) |>   head(5) |>   signif(3) #>    LPI Flights Ship Bord     y #> 1 94.1   14.20  1.0 29.4  2.36 #> 2 94.6   15.60 97.2 40.0 41.50 #> 3 35.0    4.89 38.0 15.6 14.30 #> 4 51.2    4.90 59.2 34.3 17.40 #> 5 43.7    4.66 55.7  1.0  3.93"},{"path":"https://bluefoxr.github.io/COINr/articles/aggregate.html","id":"purses","dir":"Articles","previous_headings":"","what":"Purses","title":"Aggregation","text":"purse method Aggregate() straightforward simply applies aggregation specifications coins within. exactly parameters coin method.","code":"# build example purse up to normalised data set purse <- build_example_purse(up_to = \"Normalise\", quietly = TRUE)  # aggregate using defaults purse <- Aggregate(purse, dset = \"Normalised\") #> Written data set to .$Data$Aggregated #> Written data set to .$Data$Aggregated #> Written data set to .$Data$Aggregated #> Written data set to .$Data$Aggregated #> Written data set to .$Data$Aggregated"},{"path":"https://bluefoxr.github.io/COINr/articles/aggregate.html","id":"what-next","dir":"Articles","previous_headings":"","what":"What next?","title":"Aggregation","text":"aggregating indicators, likely want begin viewing exploring results. See vignette Exploring results details.","code":""},{"path":"https://bluefoxr.github.io/COINr/articles/analysis.html","id":"indicator-statistics","dir":"Articles","previous_headings":"","what":"Indicator statistics","title":"Analysis","text":"Indicator statistics can obtained using get_stats() function. resulting data frame 18 columns, hard display concisely . Therefore look columns groups five. row one indicators targeted data set. columns statistics, obvious things like minimum, maximum, mean median. first three columns find standard deviation, skewness kurtosis. remaining two columns “N.Avail”, number non-NA data points, “N.NonZero”, number non-zero points. latter can interest indicators may high proportion zeroes, can problematic. “N.Unique”, number unique data points (.e. excluding duplicate values). following three columns similar previous columns, e.g. “Frc.Avail” fraction data availability, opposed number available points (N.Avail). final column, “Flag.Avail”, logical flag: data availability (“Frc.Avail”) limit specified t_avail argument get_stats(), flagged “LOW”. first two final columns analogous “Flag.Avail” thresholds controlled arguments get_stats(). final column basic test outliers commonly used composite indicators, example COIN Tool. process used check_SkewKurt() flag “” absolute skewness greater set threshold (default 2) kurtosis greater threshold (default 3.5). short, indicators flagged considered outlier treatment.","code":"# load COINr library(COINr)  # build example coin coin <-  build_example_coin(up_to = \"new_coin\", quietly = TRUE)  # get table of indicator statistics for raw data set stat_table <- get_stats(coin, dset = \"Raw\", out2 = \"df\") head(stat_table[1:5], 5) #>     iCode  Min    Max  Mean Median #> 1     LPI 2.07   4.23  3.41   3.42 #> 2 Flights 0.99 211.00 38.60  25.60 #> 3    Ship 0.00  21.20 12.00  12.70 #> 4    Bord 0.00 122.00 23.60  18.00 #> 5    Elec 0.00 110.00 16.20   6.91 head(stat_table[6:10], 5) #>      Std   Skew   Kurt N.Avail N.NonZero #> 1  0.538 -0.304 -0.657      51        51 #> 2 46.700  2.100  4.510      51        51 #> 3  6.840 -0.576 -0.681      51        42 #> 4 24.800  2.150  5.790      51        45 #> 5 22.700  2.230  5.790      51        47 head(stat_table[11:15], 5) #>   N.Unique N.Same Frc.Avail Frc.NonZero Frc.Unique #> 1       51      1         1       1.000      1.000 #> 2       51      1         1       1.000      1.000 #> 3       43      9         1       0.824      0.843 #> 4       30      6         1       0.882      0.588 #> 5       46      4         1       0.922      0.902 head(stat_table[16:ncol(stat_table)], 5) #>   Frc.Same Flag.Avail Flag.NonZero Flag.Unique Flag.SkewKurt #> 1   0.0196         ok           ok          ok            ok #> 2   0.0196         ok           ok          ok           OUT #> 3   0.1760         ok           ok          ok            ok #> 4   0.1180         ok           ok          ok           OUT #> 5   0.0784         ok           ok          ok           OUT"},{"path":"https://bluefoxr.github.io/COINr/articles/analysis.html","id":"unit-data-availability","dir":"Articles","previous_headings":"","what":"Unit data availability","title":"Analysis","text":"kind analysis can performed units, rather indicators. , main thing interest data availability, can obtained throug get_data_avail() function. see output list two data frames. first summary unit: unit number missing points, zero points, missing--zero points, well percentage data availability percentage non-zero. “ByGroup” data frame gives data availability within aggregation groups: just view first columns save space. values fraction indicator availability within aggregation group.","code":"l_dat <- get_data_avail(coin, dset = \"Raw\", out2 = \"list\")  str(l_dat, max.level = 1) #> List of 2 #>  $ Summary:'data.frame': 51 obs. of  6 variables: #>  $ ByGroup:'data.frame': 51 obs. of  12 variables: head(l_dat$Summary, 5) #>    uCode N_missing N_zero N_miss_or_zero Dat_Avail  Non_Zero #> 31   AUS         0      3              3  1.000000 0.9387755 #> 1    AUT         0      2              2  1.000000 0.9591837 #> 2    BEL         0      2              2  1.000000 0.9591837 #> 32   BGD         6      1              7  0.877551 0.9767442 #> 3    BGR         0      0              0  1.000000 1.0000000 head(l_dat$ByGroup[1:5], 5) #>    uCode ConEcFin    Instit  P2P Physical #> 31   AUS        1 1.0000000 1.00    1.000 #> 1    AUT        1 1.0000000 1.00    1.000 #> 2    BEL        1 1.0000000 1.00    1.000 #> 32   BGD        1 0.8333333 0.75    0.875 #> 3    BGR        1 1.0000000 1.00    1.000"},{"path":"https://bluefoxr.github.io/COINr/articles/analysis.html","id":"correlations","dir":"Articles","previous_headings":"","what":"Correlations","title":"Analysis","text":"Correlations can obtained viewed directly using plot_corr() function explained Visualisation vignette. , explore functions obtaining correlation matrices, flags p-values. general-purpose function obtaining correlations indicators get_corr() function (called plot_corr()). allows almost set indicators/aggregates correlated almost set. won’t go full functionality covered Visualisation vignette. However demonstrate couple examples begin building full example coin aggregated data set. Now can take examples. First, get correlations indicators within Environmental group: see default output get_corr() long-format correlation table. want wide format, set make_long = FALSE. gives classical-looking correlation matrix, although long format can sometimes easier work futher processing. One option worth mentioning pval: default, get_corr() return correlations p-value lower 0.05 NA, indicating correlations insignificant significance level. can adjust threshold changing pval, disable completely setting pval = 0. subject p-values, COINr includes get_pvals() function can used get p-values correlations supplied matrix data frame. used directly coin helper function may still useful. Two functions interest regarding correlations. first get_corr_flags(). useful function finding correlations indicators exceed fall given threshold, within aggregation groups: identified correlations 0.75, “Normalised” data set, indicators group level 2. Actually 0.75 quite low searching “high correlations”, used example example data set doesn’t high correlations. switching thresh_type = \"low\" can similarly look low/negative correlations: example fairly significant negative correlations! within “Institutional” group, Technical Barriers Trade indicator. final function mention get_denom_corr(). related operation denominating indicators (see Denomination vignette), identifies indicators correlated (using absolute value correlation) given threshold supplied denominators. can help identify cases whether denominate indicator - .e. indicator strongly related denominator means dependent , may reason denominate. Using threshold 0.7, examining raw data set, see several indicators strongly related denominators, classical example export value goods (Goods) well correlated GDP. Many pairs flagged indeed used denominators ASEM example, also conceptual reasons.","code":"coin <- build_example_coin(quietly = TRUE) # get correlations cmat <- get_corr(coin, dset = \"Raw\", iCodes = list(\"Environ\"), Levels = 1) # examine first few rows head(cmat) #>       Var1   Var2 Correlation #> 1      CO2    CO2   1.0000000 #> 2   Forest    CO2          NA #> 3   MatCon    CO2   0.7222051 #> 4 PrimEner    CO2   0.3268484 #> 5    Renew    CO2  -0.5986338 #> 6      CO2 Forest          NA # get correlations cmat <- get_corr(coin, dset = \"Raw\", iCodes = list(\"Environ\"), Levels = 1, make_long = FALSE) # examine first few rows round_df(head(cmat), 2) #>     CO2 Forest MatCon PrimEner Renew #> 1  1.00     NA   0.72     0.33 -0.60 #> 2    NA   1.00     NA       NA  0.35 #> 3  0.72     NA   1.00     0.38 -0.42 #> 4  0.33     NA   0.38     1.00    NA #> 5 -0.60   0.35  -0.42       NA  1.00 get_corr_flags(coin, dset = \"Normalised\", cor_thresh = 0.75,                thresh_type = \"high\", grouplev = 2) #>      Group Ind1      Ind2  Corr #> 250 Social  CPI FreePress 0.761 #> 283 Social  CPI      NGOs 0.768 get_corr_flags(coin, dset = \"Normalised\", cor_thresh = -0.5,                thresh_type = \"low\", grouplev = 2) #>       Group      Ind1   Ind2   Corr #> 162  Instit CostImpEx   TBTs -0.697 #> 1778 Instit      RTAs   TBTs -0.752 #> 2019 Instit      TBTs TIRcon -0.623 get_denom_corr(coin, dset = \"Raw\", cor_thresh = 0.7) #>          Ind  Denom Corr #> 70  CultGood Energy 0.71 #> 119 CultGood    GDP 0.85 #> 52       FDI Energy 0.74 #> 101      FDI    GDP 0.85 #> 99     Goods    GDP 0.80 #> 102   PRemit    GDP 0.71 #> 116 Research    GDP 0.78 #> 100 Services    GDP 0.77 #> 66     StMob Energy 0.73 #> 115    StMob    GDP 0.84"},{"path":"https://bluefoxr.github.io/COINr/articles/analysis.html","id":"multivariate-tools","dir":"Articles","previous_headings":"","what":"Multivariate tools","title":"Analysis","text":"first simple tool calculate Cronbach’s alpha. can done group indicators, either full set, else targeting specific groups. simply calculates Cronbach’s alpha (measure statistical consistency) “P2P” group (People People connectivity, case). Another multivariate analysis tool principal component analysis (PCA). Although, like correlation, built base R, get_PCA() function makes easier obtain PCA groups indicators, following structure index. function can return results either list, appended coin out2 = \"coin\". output list explore output. First note warnings due missing data, can suppressed using nowarnings = TRUE. output list looks like : .e. data frame “PCA weights” PCA results. ignore weights moment look closer PCA results: default, get_PCA() run separate PCA aggregation group within specified level. case, run three: one “Environ”, “Social” “SusEcFin” groups. contains wts, set PCA weights group, PCAres, direct output stats::prcomp(), iCodes, corresponding vector indicator codes group. can basic PCA analysis using base R’s tools using “PCAres” objects, e.g.: See stats::prcomp() elsewhere resources PCA R. Now turning weighting, get_PCA() also outputs set “PCA weights”. output attached list shown , out2 = \"coin\", written weights list inside coin weights_to also specified. See Weights vignette details . Note PCA weights come number caveats: please read documentation get_PCA() discussion .","code":"get_cronbach(coin, dset = \"Raw\", iCodes = \"P2P\", Level = 1) #> [1] 0.05126659 l_pca <- get_PCA(coin, dset = \"Raw\", iCodes = \"Sust\", out2 = \"list\") #> Warning in PCAwts(parents[ii]): 1 missing values found. Removing 1 rows with missing values in order to perform #> PCA. You can also try imputing data first to avoid this. #> Warning in PCAwts(parents[ii]): 22 missing values found. Removing 14 rows with missing values in order to perform #> PCA. You can also try imputing data first to avoid this. #> Warning in PCAwts(parents[ii]): 8 missing values found. Removing 7 rows with missing values in order to perform #> PCA. You can also try imputing data first to avoid this. str(l_pca, max.level = 1) #> List of 2 #>  $ Weights   :'data.frame':  60 obs. of  3 variables: #>  $ PCAresults:List of 3 str(l_pca$PCAresults, max.level = 2) #> List of 3 #>  $ Environ :List of 3 #>   ..$ wts   : num [1:5] -0.581 0.214 -0.543 -0.313 0.473 #>   ..$ PCAres:List of 5 #>   .. ..- attr(*, \"class\")= chr \"prcomp\" #>   ..$ iCodes: chr [1:5] \"CO2\" \"Forest\" \"MatCon\" \"PrimEner\" ... #>  $ Social  :List of 3 #>   ..$ wts   : num [1:9] -0.417 -0.324 0.401 -0.191 0.302 ... #>   ..$ PCAres:List of 5 #>   .. ..- attr(*, \"class\")= chr \"prcomp\" #>   ..$ iCodes: chr [1:9] \"CPI\" \"FemLab\" \"FreePress\" \"NGOs\" ... #>  $ SusEcFin:List of 3 #>   ..$ wts   : num [1:5] 0.472 0.451 -0.492 -0.227 -0.53 #>   ..$ PCAres:List of 5 #>   .. ..- attr(*, \"class\")= chr \"prcomp\" #>   ..$ iCodes: chr [1:5] \"GDPGrow\" \"NEET\" \"PrivDebt\" \"PubDebt\" ... # summarise PCA results for \"Social\" group summary(l_pca$PCAresults$Social$PCAres) #> Importance of components: #>                           PC1    PC2    PC3     PC4     PC5     PC6     PC7 #> Standard deviation     2.2042 1.1256 0.9788 0.78834 0.77153 0.56836 0.42463 #> Proportion of Variance 0.5398 0.1408 0.1065 0.06905 0.06614 0.03589 0.02003 #> Cumulative Proportion  0.5398 0.6806 0.7871 0.85611 0.92225 0.95814 0.97817 #>                            PC8     PC9 #> Standard deviation     0.36068 0.25760 #> Proportion of Variance 0.01445 0.00737 #> Cumulative Proportion  0.99263 1.00000"},{"path":"https://bluefoxr.github.io/COINr/articles/coins.html","id":"what-is-a-coin","dir":"Articles","previous_headings":"","what":"What is a coin?","title":"Building coins","text":"COINr functions designed work particular S3 object class called “coin”. introduce , consider constitutes composite indicator: indicator data Indicator metadata, including weights directions structure maps indicators groups aggregation, typically multiple levels Data treatment Normalisation method parameters Aggregation method parameters Processed data sets stage construction Resulting aggregated scores ranks Meanwhile, process building composite indicator, series analysis data generated, including information data availability, statistics individual indicators, correlations information data treatment. composite indicator built scratch, easy generate environment dozens variables parameters. case alternative version composite indicator built, multiple sets variables may need generated. mind, makes sense structure ingredients composite indicator, input data, methodology results, single object, called “coin” COINr. construct coin, details contents, explained detail following sections. Although coins main object class used COINr, number COINr functions also methods data frames vectors. explained vignettes.","code":""},{"path":"https://bluefoxr.github.io/COINr/articles/coins.html","id":"building-coins","dir":"Articles","previous_headings":"","what":"Building coins","title":"Building coins","text":"build coin need use new_coin() function. main two input arguments function two data frames: iData (indicator data), iMeta (indicator metadata). builds coin class object containing raw data, can developed expanded COINr functions e.g. normalising, treating data, imputing, aggregating . proceeding, define couple things. “things” benchmarked/compared indicators composite indicator generally referred units (quite often, units correspond countries). Units compared using indicators, measured variables relevant overall concept composite indicator.","code":""},{"path":"https://bluefoxr.github.io/COINr/articles/coins.html","id":"indicator-data","dir":"Articles","previous_headings":"Building coins","what":"Indicator data","title":"Building coins","text":"first data frame, iData specifies value indicator, unit. can also contain attributes metadata units, example groups, names, denominating variables (variables used adjust size effects indicators). see example iData looks like, can look built ASEM data set. data set composite indicator covering 51 countries 49 indicators, used examples throughout COINr: rows columns shown illustrate. ASEM data covers covering 51 Asian European countries, national level, uses 49 indicators. Notice row observation (, country), column variable (mostly indicators, also things). Columns can named whatever want, although names reserved: uName [optional] gives name unit. , units countries, names country. uCode [required] unique code assigned unit (country). main “reference” inside COINr units. units countries, ISO Alpha-3 codes ideally used, recognised COINr generating maps. Time [optional] gives reference time data. used panel data passed new_coin(). See Purses panel data. means minimum, need supply data frame uCode column, indicator columns. Aside reserved names , columns can assigned different uses using corresponding iMeta data frame - clarified next section. important rules tips keep mind : Columns don’t particular order; identified names rather positions. Indicator columns required numeric, .e. character vectors. restriction number indicators units. Indicator codes unit codes must unique names. everything R, codes case-sensitive. Don’t start column names number! iData data frame checked passed new_coin(). can also perform check advance calling check_iData(): issues iData data frame produce informative error messages can help correct problem.","code":"head(ASEM_iData[1:20], 5) #>      uName uCode GDP_group GDPpc_group Pop_group EurAsia_group Time   Area #> 1  Austria   AUT         L          XL         M        Europe 2018  83871 #> 2  Belgium   BEL         L           L         L        Europe 2018  30528 #> 3 Bulgaria   BGR         S           S         M        Europe 2018 110879 #> 4  Croatia   HRV         S           M         S        Europe 2018  56594 #> 5   Cyprus   CYP         S           L         S        Europe 2018   9251 #>   Energy       GDP Population      LPI  Flights      Ship Bord       Elec #> 1  27.00 390.79999   8735.453 4.097985 29.01725  0.000000   35 35.3697298 #> 2  41.83 467.95527  11429.336 4.108538 31.88546 20.567121   48 26.5330467 #> 3   9.96  53.23964   7084.571 2.807685  9.23588  7.919366   18 11.2775842 #> 4   7.01  51.23100   4189.353 3.160829  9.24529 12.440452   41 19.5283620 #> 5   1.43  20.04623   1179.551 2.999061  8.75467 11.689495    0  0.4393643 #>      Gas ConSpeed Cov4G     Goods #> 1  0.273     14.1 98.00 278.42640 #> 2 36.100     16.3 99.89 597.87230 #> 3  0.312     15.5 56.73  42.82515 #> 4  0.422      8.6 98.00  28.36795 #> 5  0.029      6.9 60.00   8.76681 check_iData(ASEM_iData) #> iData checked and OK."},{"path":"https://bluefoxr.github.io/COINr/articles/coins.html","id":"indicator-metadata","dir":"Articles","previous_headings":"Building coins","what":"Indicator metadata","title":"Building coins","text":"iMeta data frame specifies everything column iData, including whether indicator, group, something else; name, units, appears structure index. iMeta also requires entries aggregates created aggregating indicators. Let’s look built-example. Required columns iMeta : Level: level aggregation, 1 indicator level, 2 level resulting aggregating indicators, 3 result aggregating level 2, . Set NA entries included index (groups, denominators, etc). iCode: Indicator code, alphanumeric. Must start number. entries generally correspond column names iData. Parent: Group (iCode) indicator/aggregate belongs level immediately . entry also found iCode. Set NA highest (Index) level (parent), entries included index (groups, denominators, etc). Direction: Numeric, either -1 1 Weight: Numeric weight, re-scaled sum 1 within aggregation group. Set NA entries included index (groups, denominators, etc). Type: type, corresponding iCode. Can either Indicator, Aggregate, Group, Denominator, . Optional columns recognised certain functions : iName: Name indicator: longer name used plotting functions. Denominator: specifies denominator variable used denominate indicator, Denominate() called. See Denomination vignette. Unit: unit indicator, e.g. USD, thousands, score, etc. Used plots available. Target: target indicator. Used normalisation type distance--target. iMeta can also include columns needed specific uses, long don’t use names listed . iMeta data frame essentially gives details columns found iData, well details additional data columns eventually created aggregating indicators. means entries iMeta must include columns iData, except three “special” column names: uCode, uName, Time. words, column names iData appear iMeta$iCode, except three special cases mentioned. Type column specifies type entry: Indicator used indicators level 1. Aggregate aggregates created aggregating indicators aggregates. Otherwise set Group variable used building index instead defining groups units. Set Denominator variable used scaling (denominating) indicators. Finally, set variable ignored passed . entries cause error. Apart indicator entries shown , can see aggregate entries: aggregates created aggregating indicators. values created call Aggregate() function (see relevant vignette). also groups: Notice iCode entries correspond column names iData. also denominators: Denominators used divide “scale” indicators. ideally included iData ensures match units possibly time points. Parent column requires extra words. used define structure index. Simply put, specifies aggregation group indicator aggregate belongs , level immediately . indicators level 1, refer iCodes level 2, aggregates level 2, refer iCodes level 3. Every entry Parent must refer entry can found iCode column, else NA highest aggregation level groups, denominators iData columns included index. iMeta data frame complex iData may easy make errors. Use check_iMeta() function (anyway called new_coin()) check validity iMeta. Informative error messages included possible help correct errors. new_coin() run, additional cross-checks run iData iMeta.","code":"head(ASEM_iMeta, 5) #>   Level   iCode                                    iName Direction Weight #> 1     1     LPI              Logistics Performance Index         1      1 #> 2     1 Flights International flights passenger capacity         1      1 #> 3     1    Ship        Liner Shipping Connectivity Index         1      1 #> 4     1    Bord                         Border crossings         1      1 #> 5     1    Elec                     Trade in electricity         1      1 #>                  Unit     Target Denominator   Parent      Type #> 1           Score 1-5   4.118031        <NA> Physical Indicator #> 2      Thousand seats 200.332655  Population Physical Indicator #> 3               Score  20.113377        <NA> Physical Indicator #> 4 Number of crossings 115.900000        Area Physical Indicator #> 5                 TWh 104.670585      Energy Physical Indicator ASEM_iMeta[ASEM_iMeta$Type == \"Aggregate\", ] #>    Level     iCode                        iName Direction Weight  Unit Target #> 50     2  Physical                     Physical         1      1 Score     NA #> 51     2  ConEcFin Economic and Financial (Con)         1      1 Score     NA #> 52     2 Political                    Political         1      1 Score     NA #> 53     2    Instit                Institutional         1      1 Score     NA #> 54     2       P2P             People to People         1      1 Score     NA #> 55     2   Environ                Environmental         1      1 Score     NA #> 56     2    Social                       Social         1      1 Score     NA #> 57     2  SusEcFin Economic and Financial (Sus)         1      1 Score     NA #> 58     3      Conn                 Connectivity         1      1 Score     NA #> 59     3      Sust               Sustainability         1      1 Score     NA #> 60     4     Index     Sustainable Connectivity         1      1 Score     NA #>    Denominator Parent      Type #> 50        <NA>   Conn Aggregate #> 51        <NA>   Conn Aggregate #> 52        <NA>   Conn Aggregate #> 53        <NA>   Conn Aggregate #> 54        <NA>   Conn Aggregate #> 55        <NA>   Sust Aggregate #> 56        <NA>   Sust Aggregate #> 57        <NA>   Sust Aggregate #> 58        <NA>  Index Aggregate #> 59        <NA>  Index Aggregate #> 60        <NA>   <NA> Aggregate ASEM_iMeta[ASEM_iMeta$Type == \"Group\", ] #>    Level         iCode                iName Direction Weight Unit Target #> 61    NA     GDP_group            GDP group        NA     NA <NA>     NA #> 62    NA   GDPpc_group GDP per capita group        NA     NA <NA>     NA #> 63    NA     Pop_group     Population group        NA     NA <NA>     NA #> 64    NA EurAsia_group       Europe or Asia        NA     NA <NA>     NA #>    Denominator Parent  Type #> 61        <NA>   <NA> Group #> 62        <NA>   <NA> Group #> 63        <NA>   <NA> Group #> 64        <NA>   <NA> Group ASEM_iMeta[ASEM_iMeta$Type == \"Denominator\", ] #>    Level      iCode              iName Direction Weight               Unit #> 65    NA       Area          Land area        NA     NA Thousand square km #> 66    NA     Energy Energy consumption        NA     NA               Unit #> 67    NA        GDP                GDP        NA     NA             USD Bn #> 68    NA Population         Population        NA     NA          Thousands #>    Target Denominator Parent        Type #> 65     NA        <NA>   <NA> Denominator #> 66     NA        <NA>   <NA> Denominator #> 67     NA        <NA>   <NA> Denominator #> 68     NA        <NA>   <NA> Denominator check_iMeta(ASEM_iMeta) #> iMeta checked and OK."},{"path":"https://bluefoxr.github.io/COINr/articles/coins.html","id":"building-with-new_coin","dir":"Articles","previous_headings":"Building coins","what":"Building with new_coin()","title":"Building coins","text":"iData iMeta data frames prepared, can build coin using new_coin() function. arguments options see minute, default looks like : new_coin() function checks cross-checks input data frames, outputs coin-class object. also tells us written data set .$Data$Raw - sub-list contains various data sets created time run coin-building function. can see summary coin calling coin print method - done simply calling name coin command line, equivalently print(coin): tells us details coin - number units, indicators, denominators groups; structure index (notice level_names argument used describe level), data sets present coin. Currently consists “Raw” data set, data set created default run new_coin(), simply consists indicator data plus uCode column. Indeed, can retrieve data set within coin time using get_dset() function: default, calling get_dset() returns unit code plus indicator/aggregate columns. can also attach columns groups names using also_get argument. can used attach iData “metadata” columns originally passed calling new_coin(), groups, etc. Apart level_names argument, new_coin() also gives possibility pass forward subset indicators iMeta. done using exclude argument, useful testing alternative sets indicators - see vignette adjustments comparisons. , new_coin() removed indicator columns iData corresponding entries iMeta. However, full original iData iMeta tables still stored coin. new_coin() function includes thorough series checks input arguments may cause initial errors format corrected. objective can successfully assemble coin, work smoothly COINr functions.","code":"# build a new coin using example data coin <- new_coin(iData = ASEM_iData,                  iMeta = ASEM_iMeta,                  level_names = c(\"Indicator\", \"Pillar\", \"Sub-index\", \"Index\")) #> iData checked and OK. #> iMeta checked and OK. #> Written data set to .$Data$Raw coin #> -------------- #> A coin with... #> -------------- #> Input: #>   Units: 51 (AUS, AUT, BEL, ...) #>   Indicators: 49 (Goods, Services, FDI, ...) #>   Denominators: 4 (Area, Energy, GDP, ...) #>   Groups: 4 (GDP_group, GDPpc_group, Pop_group, ...) #>  #> Structure: #>   Level 1 Indicator: 49 indicators (FDI, ForPort, Goods, ...)  #>   Level 2 Pillar: 8 groups (ConEcFin, Instit, P2P, ...)  #>   Level 3 Sub-index: 2 groups (Conn, Sust)  #>   Level 4 Index: 1 groups (Index)  #>  #> Data sets: #>   Raw (51 units) # first few cols and rows of Raw data set data_raw <- get_dset(coin, \"Raw\") head(data_raw[1:5], 5) #>    uCode      LPI  Flights      Ship Bord #> 31   AUS 3.793385 36.05498 14.004198    0 #> 1    AUT 4.097985 29.01725  0.000000   35 #> 2    BEL 4.108538 31.88546 20.567121   48 #> 32   BGD 2.663902  4.27955  9.698165   16 #> 3    BGR 2.807685  9.23588  7.919366   18 get_dset(coin, \"Raw\", also_get = c(\"uName\", \"Pop_group\"))[1:5] |>   head(5) #>   uCode      uName Pop_group      LPI  Flights #> 1   AUS  Australia         L 3.793385 36.05498 #> 2   AUT    Austria         M 4.097985 29.01725 #> 3   BEL    Belgium         L 4.108538 31.88546 #> 4   BGD Bangladesh        XL 2.663902  4.27955 #> 5   BGR   Bulgaria         M 2.807685  9.23588 # exclude two indicators coin <- new_coin(iData = ASEM_iData,                  iMeta = ASEM_iMeta,                  level_names = c(\"Indicator\", \"Pillar\", \"Sub-index\", \"Index\"),                  exclude = c(\"LPI\", \"Flights\")) #> iData checked and OK. #> iMeta checked and OK. #> Written data set to .$Data$Raw  coin #> -------------- #> A coin with... #> -------------- #> Input: #>   Units: 51 (AUS, AUT, BEL, ...) #>   Indicators: 47 (Goods, Services, FDI, ...) #>   Denominators: 4 (Area, Energy, GDP, ...) #>   Groups: 4 (GDP_group, GDPpc_group, Pop_group, ...) #>  #> Structure: #>   Level 1 Indicator: 47 indicators (FDI, ForPort, Goods, ...)  #>   Level 2 Pillar: 8 groups (ConEcFin, Instit, P2P, ...)  #>   Level 3 Sub-index: 2 groups (Conn, Sust)  #>   Level 4 Index: 1 groups (Index)  #>  #> Data sets: #>   Raw (51 units)"},{"path":"https://bluefoxr.github.io/COINr/articles/coins.html","id":"example-coin","dir":"Articles","previous_headings":"","what":"Example coin","title":"Building coins","text":"COINr includes built example coin constructed using function build_example_coin(). can useful learning package works, testing used COINr documentation extensively many functions require coin input. build example coin (ASEM data set built COINr) inspect contents: shows example fully populated coin various data sets, resulting running COINr functions, aggregation step.","code":"ASEM <- build_example_coin(quietly = TRUE)  ASEM #> -------------- #> A coin with... #> -------------- #> Input: #>   Units: 51 (AUS, AUT, BEL, ...) #>   Indicators: 49 (Goods, Services, FDI, ...) #>   Denominators: 4 (Area, Energy, GDP, ...) #>   Groups: 4 (GDP_group, GDPpc_group, Pop_group, ...) #>  #> Structure: #>   Level 1 Indicator: 49 indicators (FDI, ForPort, Goods, ...)  #>   Level 2 Pillar: 8 groups (ConEcFin, Instit, P2P, ...)  #>   Level 3 Sub-index: 2 groups (Conn, Sust)  #>   Level 4 Index: 1 groups (Index)  #>  #> Data sets: #>   Raw (51 units) #>   Denominated (51 units) #>   Imputed (51 units) #>   Screened (51 units) #>   Treated (51 units) #>   Normalised (51 units) #>   Aggregated (51 units)"},{"path":"https://bluefoxr.github.io/COINr/articles/coins.html","id":"purses-and-panel-data","dir":"Articles","previous_headings":"","what":"Purses and panel data","title":"Building coins","text":"coin offers wide methodological flexibility, things kept fixed throughout. One set indicators change coin created. thing coin represents single point time. panel data, .e. multiple observations unit-indicator pair, indexed time, new_coin() allows create multiple coins one go. Coins collected single object called “purse”, many COINr functions work purses directly. simply explore create purse. procedure almost creating coin: need iData iMeta data frames, call new_coin(). difference iData must now Time column, must numeric column records time point observation . see example, can look built-(artificial) panel data set ASEM_iData_p. data set five years data, spanning 2018-2022 (data artificially generated - point replace real example). means row now corresponds set indicator values unit, given time point. build purse data, input new_coin() Notice iMeta argument assembled single coin - purse supposed consist coins indicators structure, .e. aim calculate composite indicator several points time, generally apply methodology coins purse. however possible different units coins purse - might occur data availability differences different time points. split_to argument set \"\" create coin time point found data. Alternatively, can include subset time points specifying vector. quick way check contents purse call print method: tells us many coins , number indicators units, gives structural information one coins. purse S3 class object like coin. fact, simply data frame Time column coin column, entries coin column coin objects (-called “list column”). convenient work , try view R Studio, example, can little messy. coins, purse class also function COINr produces example purse: purse class can used directly COINr functions - allows impute/normalise/treat/aggregate coins single command, example.","code":"# sample of 2018 observations ASEM_iData_p[ASEM_iData_p$Time == 2018, 1:15] |>   head(5) #>      uName uCode GDP_group GDPpc_group Pop_group EurAsia_group Time   Area #> 1  Austria   AUT         L          XL         M        Europe 2018  83871 #> 2  Belgium   BEL         L           L         L        Europe 2018  30528 #> 3 Bulgaria   BGR         S           S         M        Europe 2018 110879 #> 4  Croatia   HRV         S           M         S        Europe 2018  56594 #> 5   Cyprus   CYP         S           L         S        Europe 2018   9251 #>   Energy       GDP Population      LPI  Flights      Ship Bord #> 1  27.00 390.79999   8735.453 4.097985 29.01725  0.000000   35 #> 2  41.83 467.95527  11429.336 4.108538 31.88546 20.567121   48 #> 3   9.96  53.23964   7084.571 2.807685  9.23588  7.919366   18 #> 4   7.01  51.23100   4189.353 3.160829  9.24529 12.440452   41 #> 5   1.43  20.04623   1179.551 2.999061  8.75467 11.689495    0  # sample of 2019 observations ASEM_iData_p[ASEM_iData_p$Time == 2019, 1:15] |>   head(5) #>       uName uCode GDP_group GDPpc_group Pop_group EurAsia_group Time   Area #> 52  Austria   AUT         L          XL         M        Europe 2019  83871 #> 53  Belgium   BEL         L           L         L        Europe 2019  30528 #> 54 Bulgaria   BGR         S           S         M        Europe 2019 110879 #> 55  Croatia   HRV         S           M         S        Europe 2019  56594 #> 56   Cyprus   CYP         S           L         S        Europe 2019   9251 #>    Energy       GDP Population      LPI  Flights       Ship      Bord #> 52  27.00 390.79999   8735.453 4.153182 37.53763  0.6054851 39.752508 #> 53  41.83 467.95527  11429.336 4.149371 41.53901 21.2045607 52.123937 #> 54   9.96  53.23964   7084.571 2.868647 15.82871  7.9467542 23.203648 #> 55   7.01  51.23100   4189.353 3.230168 16.06586 13.0958316 46.566308 #> 56   1.43  20.04623   1179.551 3.098577 10.92502 12.3571194  3.993825 # build purse from panel data purse <- new_coin(iData = ASEM_iData_p,                   iMeta = ASEM_iMeta,                   split_to = \"all\",                   quietly = TRUE) purse #> ----------------------------- #> A purse with... 5 coins  #> ----------------------------- #>  #>  Time n_Units n_Inds n_dsets #>  2018      51     49       1 #>  2019      51     49       1 #>  2020      51     49       1 #>  2021      51     49       1 #>  2022      51     49       1 #>  #> ----------------------------------- #> Sample from first coin (2018): #> ----------------------------------- #>  #> Input: #>   Units: 51 (AUS, AUT, BEL, ...) #>   Indicators: 49 (Goods, Services, FDI, ...) #>   Denominators: 4 (Area, Energy, GDP, ...) #>   Groups: 4 (GDP_group, GDPpc_group, Pop_group, ...) #>  #> Structure: #>   Level 1 : 49 indicators (FDI, ForPort, Goods, ...)  #>   Level 2 : 8 groups (ConEcFin, Instit, P2P, ...)  #>   Level 3 : 2 groups (Conn, Sust)  #>   Level 4 : 1 groups (Index)  #>  #> Data sets: #>   Raw (51 units) ASEM_purse <- build_example_purse(quietly = TRUE)  ASEM_purse #> ----------------------------- #> A purse with... 5 coins  #> ----------------------------- #>  #>  Time n_Units n_Inds n_dsets #>  2018      51     49       5 #>  2019      51     49       5 #>  2020      51     49       5 #>  2021      51     49       5 #>  2022      51     49       5 #>  #> ----------------------------------- #> Sample from first coin (2018): #> ----------------------------------- #>  #> Input: #>   Units: 51 (AUS, AUT, BEL, ...) #>   Indicators: 49 (Goods, Services, FDI, ...) #>   Denominators: 4 (Area, Energy, GDP, ...) #>   Groups: 4 (GDP_group, GDPpc_group, Pop_group, ...) #>  #> Structure: #>   Level 1 Indicator: 49 indicators (FDI, ForPort, Goods, ...)  #>   Level 2 Pillar: 8 groups (ConEcFin, Instit, P2P, ...)  #>   Level 3 Sub-index: 2 groups (Conn, Sust)  #>   Level 4 Index: 1 groups (Index)  #>  #> Data sets: #>   Raw (51 units) #>   Screened (46 units) #>   Treated (46 units) #>   Normalised (46 units) #>   Aggregated (46 units)"},{"path":"https://bluefoxr.github.io/COINr/articles/coins.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Building coins","text":"COINr mostly designed work coins purses. However, many key functions also methods data frames vectors. means COINr can either used “ecosystem” functions built around coins purses, else can just used toolbox work data frames objects.","code":""},{"path":"https://bluefoxr.github.io/COINr/articles/data_selection.html","id":"data-sets","dir":"Articles","previous_headings":"","what":"Data sets","title":"Data selection","text":"Every time “building” operation applied coin, Treat(), Screen(), Normalise() , new data set created. Data sets live .$Data sub-list coin. can retrieve data set time using get_data() function: default, data set coin consists indicator columns plus “uCode” column, unique identifier row. can also ask attach unit metadata columns, unit names, groups, anything else input building coin, using also_get argument:","code":"library(COINr)  # build full example coin coin <- build_example_coin(quietly = TRUE)  # retrieve normalised data set dset_norm <- get_dset(coin, dset = \"Normalised\")  # view first few rows and cols head(dset_norm[1:5], 5) #>   uCode      LPI    Flights     Ship      Bord #> 1   AUS 79.96112 12.3223217 66.14497   0.00000 #> 2   AUT 94.07137 27.8763185  0.00000  42.01269 #> 3   BEL 94.56023 23.3967426 97.14314 100.00000 #> 4   BGD 27.63906  0.1243185 45.80661  10.85013 #> 5   BGR 34.29965 10.8828790 37.40495  16.34359 # retrieve normalised data set dset_norm2 <- get_dset(coin, dset = \"Normalised\", also_get = c(\"uName\", \"GDP_group\"))  # view first few rows and cols head(dset_norm2[1:5], 5) #>   uCode      uName GDP_group      LPI    Flights #> 1   AUS  Australia        XL 79.96112 12.3223217 #> 2   AUT    Austria         L 94.07137 27.8763185 #> 3   BEL    Belgium         L 94.56023 23.3967426 #> 4   BGD Bangladesh         M 27.63906  0.1243185 #> 5   BGR   Bulgaria         S 34.29965 10.8828790"},{"path":"https://bluefoxr.github.io/COINr/articles/data_selection.html","id":"data-subsets","dir":"Articles","previous_headings":"","what":"Data subsets","title":"Data selection","text":"get_dset() quick way retrieve entire data set metadata, get_data() function generalisation: can also used obtain whole data set, also subsets data, based e.g. indicator selection grouping (columns), well unit selection grouping (rows).","code":""},{"path":"https://bluefoxr.github.io/COINr/articles/data_selection.html","id":"indicatorscolumns","dir":"Articles","previous_headings":"Data subsets","what":"Indicators/columns","title":"Data selection","text":"simple example extract one named indicators target data set: default, get_data() returns requested indicators, plus uCode identifier column. can also set also_get = \"none\" return indicator columns. iCode argument can also accept groups indicators, based structure index. example, indicators aggregated “pillars” (level 2) within groups. can name aggregation group extract underlying indicators: requested indicators level 1 (indicator level), belong group called “Political” (one pillars). Specifying level becomes relevant look aggregated data set, also includes pillar, sub-index index scores. , example, can ask pillar scores (level 2) belong sustainability sub-index (level 3): isn’t clear, look structure example index using e.g. plot_framework(coin). wanted select indicators within “Sust” sub-index set Level = 1. wanted select sub-index scores set Level = 3, . idea selecting indicators aggregates based structure index useful many places COINr, example examining correlations within aggregation groups using plot_corr().","code":"x <- get_data(coin, dset = \"Raw\", iCodes = c(\"Flights\", \"LPI\"))  # see first few rows head(x, 5) #>    uCode  Flights      LPI #> 31   AUS 36.05498 3.793385 #> 1    AUT 29.01725 4.097985 #> 2    BEL 31.88546 4.108538 #> 32   BGD  4.27955 2.663902 #> 3    BGR  9.23588 2.807685 x <- get_data(coin, dset = \"Raw\", iCodes = \"Political\", Level = 1) head(x, 5) #>    uCode Embs IGOs   UNVote #> 31   AUS   82  196 38.46245 #> 1    AUT   88  227 42.63920 #> 2    BEL   84  248 43.00308 #> 32   BGD   52  145 38.60601 #> 3    BGR   67  209 42.95986 x <- get_data(coin, dset = \"Aggregated\", iCodes = \"Sust\", Level = 2)  head(x, 5) #>   uCode  Environ   Social SusEcFin #> 1   AUS 31.92211 71.88108 55.69987 #> 2   AUT 69.47511 72.76415 62.88150 #> 3   BEL 53.00859 86.16783 50.09020 #> 4   BGD 81.66988 27.51138 64.58884 #> 5   BGR 55.69922 53.30489 61.68677"},{"path":"https://bluefoxr.github.io/COINr/articles/data_selection.html","id":"unitsrows","dir":"Articles","previous_headings":"Data subsets","what":"Units/rows","title":"Data selection","text":"Units (rows) data set can also selected (also combination selecting indicators). Starting simple example, let’s select specified units specific indicator: Rows can also sub-setted using groups, .e. unit groupings defined using variables input iMeta$Type = \"Group\" building coin. Recall example coin several groups (reminder can see details coin using print method): first way subset unit group name grouping variable, group within variable select. example, say want know values “Goods” indicator countries “XL” GDP group: Since subsetted group, also returns group column used. Another way sub-setting combine uCodes use_group. two arguments specified, result return full group(s) specified uCodes belong. can used put unit context peers within group. example, might want see values “Flights” indicator specific unit, well units within population group: , specify use_group simply string rather list. Since MLT “S” population group, returns units within group. Overall, idea get_data() flexibly return subsets indicator data, based structure index unit groups.","code":"get_data(coin, dset = \"Raw\", iCodes = \"Goods\", uCodes = c(\"AUT\", \"VNM\")) #>    uCode    Goods #> 1    AUT 278.4264 #> 51   VNM 269.0766 coin #> -------------- #> A coin with... #> -------------- #> Input: #>   Units: 51 (AUS, AUT, BEL, ...) #>   Indicators: 49 (Goods, Services, FDI, ...) #>   Denominators: 4 (Area, Energy, GDP, ...) #>   Groups: 4 (GDP_group, GDPpc_group, Pop_group, ...) #>  #> Structure: #>   Level 1 Indicator: 49 indicators (FDI, ForPort, Goods, ...)  #>   Level 2 Pillar: 8 groups (ConEcFin, Instit, P2P, ...)  #>   Level 3 Sub-index: 2 groups (Conn, Sust)  #>   Level 4 Index: 1 groups (Index)  #>  #> Data sets: #>   Raw (51 units) #>   Denominated (51 units) #>   Imputed (51 units) #>   Screened (51 units) #>   Treated (51 units) #>   Normalised (51 units) #>   Aggregated (51 units) get_data(coin, dset = \"Raw\", iCodes = \"Goods\", use_group = list(GDP_group = \"XL\")) #>    uCode GDP_group     Goods #> 1    AUS        XL  288.4893 #> 8    CHN        XL 1713.6190 #> 11   DEU        XL 1919.1940 #> 13   ESP        XL  447.1229 #> 16   FRA        XL  849.3303 #> 17   GBR        XL  778.9052 #> 21   IDN        XL  222.4186 #> 22   IND        XL  288.9806 #> 24   ITA        XL  658.1981 #> 25   JPN        XL  732.2078 #> 28   KOR        XL  568.9920 #> 45   RUS        XL  343.8504 get_data(coin, dset = \"Raw\", iCodes = \"Flights\", uCodes = \"MLT\", use_group = \"Pop_group\") #>    uCode Pop_group  Flights #> 6    BRN         S  2.01900 #> 9    CYP         S  8.75467 #> 14   EST         S  3.12946 #> 19   HRV         S  9.24529 #> 23   IRL         S 34.17721 #> 30   LTU         S  5.37919 #> 31   LUX         S  4.84458 #> 32   LVA         S  6.77976 #> 33   MLT         S  6.75251 #> 35   MNG         S  0.98951 #> 38   NOR         S 25.64994 #> 39   NZL         S 13.37242 #> 48   SVN         S  1.51736"},{"path":"https://bluefoxr.github.io/COINr/articles/data_selection.html","id":"manual-selection","dir":"Articles","previous_headings":"","what":"Manual selection","title":"Data selection","text":"final point, ’s worth pointing coin simply list R objects data frames, lists, vectors . particular format allows things easily accessed COINr functions. , ordinary R object. means even without helper functions mentioned, can get data simply exploring coin . data sets live .$Data sub-list coin: can access directly: metadata lives .$Meta sub-list. example, unit metadata, includes groups, names etc: point COINr tools don’t get want go, knowing way around coin allows access data exactly want.","code":"names(coin$Data) #> [1] \"Raw\"         \"Denominated\" \"Imputed\"     \"Screened\"    \"Treated\"     #> [6] \"Normalised\"  \"Aggregated\" data_raw <- coin$Data$Raw  head(data_raw[1:5], 5) #>    uCode      LPI  Flights      Ship Bord #> 31   AUS 3.793385 36.05498 14.004198    0 #> 1    AUT 4.097985 29.01725  0.000000   35 #> 2    BEL 4.108538 31.88546 20.567121   48 #> 32   BGD 2.663902  4.27955  9.698165   16 #> 3    BGR 2.807685  9.23588  7.919366   18 str(coin$Meta$Unit) #> 'data.frame':    51 obs. of  11 variables: #>  $ uCode        : chr  \"AUS\" \"AUT\" \"BEL\" \"BGD\" ... #>  $ uName        : chr  \"Australia\" \"Austria\" \"Belgium\" \"Bangladesh\" ... #>  $ GDP_group    : chr  \"XL\" \"L\" \"L\" \"M\" ... #>  $ GDPpc_group  : chr  \"XL\" \"XL\" \"L\" \"S\" ... #>  $ Pop_group    : chr  \"L\" \"M\" \"L\" \"XL\" ... #>  $ EurAsia_group: chr  \"Asia\" \"Europe\" \"Europe\" \"Asia\" ... #>  $ Time         : num  2018 2018 2018 2018 2018 ... #>  $ Area         : num  7741220 83871 30528 148460 110879 ... #>  $ Energy       : num  81.3 27 41.83 27.92 9.96 ... #>  $ GDP          : num  1304.5 390.8 468 220.8 53.2 ... #>  $ Population   : num  24451 8735 11429 164670 7085 ..."},{"path":"https://bluefoxr.github.io/COINr/articles/denomination.html","id":"data-frames","dir":"Articles","previous_headings":"","what":"Data frames","title":"Denomination","text":"’ll begin demonstrating denomination data frame. ’ll use -built data set get small sample indicators: raw indicator data three indicators, plus “uCode” column identifies unit. also get data denominating indicators. COINr -built set denominator data called WorldDenoms: Now, main things specify denomination indicators denominate, . words, need map indicators denominators. example, export goods denominated GDP, passenger flight capacity population (GDP also possibly reasonable), “LPI” (logistics performance index) intensive variable need denominated. specification passed Denominate() using denomby argument. takes data frame includes “iCode” (name column denonimated), “Denominator” (column name denominator data frame use), “ScaleFactor” multiplying factor apply needed. create data frame : second important consideration rows indicators denominators need matched, unit denominated value corresponding unit, another unit. Notice WorldDenoms data frame covers less countries world, whereas sample indicators cover 51 countries. matching performed inside Denominate() function, using identifier column must present data frames. , common column “uCode”, already found data frames. also default column name expected Denominate(), don’t even need specify . column names, use x_iD denoms_ID arguments pass names function. Ok now ready denominate: function matched unit iData corresponding denominator value WorldDenoms divided former latter. expected, “Goods” “Flights” changed, “LPI” included denomby data frame. Otherwise, feature mention f_denom argument, allows functions used division operator. See function documentation.","code":"library(COINr)  # Get a sample of indicator data (note must be indicators plus a \"UnitCode\" column) iData <- ASEM_iData[c(\"uCode\", \"Goods\", \"Flights\", \"LPI\")] head(iData) #>   uCode     Goods  Flights      LPI #> 1   AUT 278.42640 29.01725 4.097985 #> 2   BEL 597.87230 31.88546 4.108538 #> 3   BGR  42.82515  9.23588 2.807685 #> 4   HRV  28.36795  9.24529 3.160829 #> 5   CYP   8.76681  8.75467 2.999061 #> 6   CZE 274.13650 15.30953 3.674309 head(WorldDenoms) #> # A tibble: 6 × 7 #>   uName          uCode           GDP Population    Area  GDPpc Income_Group      #>   <chr>          <chr>         <dbl>      <dbl>   <dbl>  <dbl> <chr>             #> 1 Afghanistan    AFG    19291104008.   38041754  652860   507. Low income        #> 2 Albania        ALB    15279183290.    2854191   27400  5353. Upper middle inc… #> 3 Algeria        DZA   171091289782.   43053054 2381740  3974. Lower middle inc… #> 4 American Samoa ASM      636000000       55312     200 11467. Upper middle inc… #> 5 Andorra        AND     3154057987.      77142     470 40886. High income       #> 6 Angola         AGO    88815697793.   31825295 1246700  2791. Lower middle inc… # specify how to denominate denomby <- data.frame(iCode = c(\"Goods\", \"Flights\"),                       Denominator = c(\"GDP\", \"Population\"),                       ScaleFactor = c(1, 1000)) # Denominate one by the other iData_den <- Denominate(iData, WorldDenoms, denomby)  head(iData_den) #>   uCode        Goods     Flights      LPI #> 1   AUT 6.255713e-10 0.003268788 4.097985 #> 2   BEL 1.121507e-09 0.002776498 4.108538 #> 3   BGR 6.246483e-10 0.001323996 2.807685 #> 4   HRV 4.669422e-10 0.002272966 3.160829 #> 5   CYP 3.513901e-10 0.007304232 2.999061 #> 6   CZE 1.093569e-09 0.001434859 3.674309"},{"path":"https://bluefoxr.github.io/COINr/articles/denomination.html","id":"coins","dir":"Articles","previous_headings":"","what":"Coins","title":"Denomination","text":"Now let’s look denomination inside coin. main difference information needed denominate indicators may already present inside coin. creating coin using new_coin(), option specify denominating variables part iData (variables iMeta$Type = \"Denominator\"), specify iMeta mapping indicators denominators, using iMeta$Type column. see looks like: entries “Denominator” correspond column names present iData: example, information needed denominate already present coin - denominator data, mapping. case, denominate, simply call: denomination data /mapping isn’t present coin, wish try alternative specification, can also pass Denominate() using denoms denomby arguments previous section. concludes main features Denominate() coin. moving , consider denomination needs extra care radically changes indicator. nonlinear transformation data point divided different value. demonstrate, consider “Flights” indicator just denominated - let’s plot raw indicator denominated version:  shows raw denominated indicators show little resemblance one another.","code":"# first few rows of the example iMeta, selected cols head(ASEM_iMeta[c(\"iCode\", \"Denominator\")]) #>     iCode Denominator #> 1     LPI        <NA> #> 2 Flights  Population #> 3    Ship        <NA> #> 4    Bord        Area #> 5    Elec      Energy #> 6     Gas      Energy # see names of example iData names(ASEM_iData) #>  [1] \"uName\"         \"uCode\"         \"GDP_group\"     \"GDPpc_group\"   #>  [5] \"Pop_group\"     \"EurAsia_group\" \"Time\"          \"Area\"          #>  [9] \"Energy\"        \"GDP\"           \"Population\"    \"LPI\"           #> [13] \"Flights\"       \"Ship\"          \"Bord\"          \"Elec\"          #> [17] \"Gas\"           \"ConSpeed\"      \"Cov4G\"         \"Goods\"         #> [21] \"Services\"      \"FDI\"           \"PRemit\"        \"ForPort\"       #> [25] \"Embs\"          \"IGOs\"          \"UNVote\"        \"CostImpEx\"     #> [29] \"Tariff\"        \"TBTs\"          \"TIRcon\"        \"RTAs\"          #> [33] \"Visa\"          \"StMob\"         \"Research\"      \"Pat\"           #> [37] \"CultServ\"      \"CultGood\"      \"Tourist\"       \"MigStock\"      #> [41] \"Lang\"          \"Renew\"         \"PrimEner\"      \"CO2\"           #> [45] \"MatCon\"        \"Forest\"        \"Poverty\"       \"Palma\"         #> [49] \"TertGrad\"      \"FreePress\"     \"TolMin\"        \"NGOs\"          #> [53] \"CPI\"           \"FemLab\"        \"WomParl\"       \"PubDebt\"       #> [57] \"PrivDebt\"      \"GDPGrow\"       \"RDExp\"         \"NEET\" # build example coin coin <- build_example_coin(up_to = \"new_coin\", quietly = TRUE)  # denominate (here, we only need to say which dset to use) coin <- Denominate(coin, dset = \"Raw\") #> Written data set to .$Data$Denominated plot_scatter(coin, dsets = c(\"Raw\", \"Denominated\"), iCodes = \"Flights\")"},{"path":"https://bluefoxr.github.io/COINr/articles/denomination.html","id":"purses","dir":"Articles","previous_headings":"","what":"Purses","title":"Denomination","text":"final method Denominate() purses. purse method exactly coin method, except applied purse. important consideration denominator variables can vary time, just like indicators. means e.g. “Total value exports” 2019 divided GDP 2019, another year. words, denominators panel data just like indicators. denominators ideally input part iData calling new_coin(). , denominators another column data frame like indicators, must entry unit/time pair. also ensures unit-matching denominator indicator correct (accurately, leave !). example purse, denominator data already included, mapping. means denomination exactly operation denominating coin: fact try pass denominator data Denominate() purse via denoms, catch: moment, denoms support panel data, required use value time point. ideal may sorted future releases. now, better denominate purses passing specifications via iData iMeta building purse new_coin().","code":"# build example purse purse <- build_example_purse(up_to = \"new_coin\", quietly = TRUE)  # denominate using data/specs already included in coin purse <- Denominate(purse, dset = \"Raw\") #> Written data set to .$Data$Denominated #> Written data set to .$Data$Denominated #> Written data set to .$Data$Denominated #> Written data set to .$Data$Denominated #> Written data set to .$Data$Denominated"},{"path":"https://bluefoxr.github.io/COINr/articles/imputation.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Imputation","text":"Imputation process estimating missing data points. get started imputation, reasonable first step see much missing data data set. begin building example coin, point assembling coin, : check missing data, get_data_avail() function can used. can output either coin list – output list readily display results. output list data availability unit: lowest data availability unit : can also check data availability indicator. done calling get_stats(): indicator, minimum data availability : missing data, several options available: Leave aggregate anyway (also option data availability thresholds aggregation - see Aggregation) Consider removing indicators low data availability (done manually affects structure index) Consider removing units low data availability (see Unit Screening) Impute missing data options can also combined. , focus option imputation.","code":"library(COINr)  ASEM <- build_example_coin(up_to = \"new_coin\", quietly = TRUE) l_avail <- get_data_avail(ASEM, dset = \"Raw\", out2 = \"list\") head(l_avail$Summary) #>    uCode N_missing N_zero N_miss_or_zero Dat_Avail  Non_Zero #> 31   AUS         0      3              3 1.0000000 0.9387755 #> 1    AUT         0      2              2 1.0000000 0.9591837 #> 2    BEL         0      2              2 1.0000000 0.9591837 #> 32   BGD         6      1              7 0.8775510 0.9767442 #> 3    BGR         0      0              0 1.0000000 1.0000000 #> 33   BRN        10      2             12 0.7959184 0.9487179 min(l_avail$Summary$Dat_Avail) #> [1] 0.7959184 df_avail <- get_stats(ASEM, dset = \"Raw\", out2 = \"df\")  head(df_avail[c(\"iCode\", \"N.Avail\", \"Frc.Avail\")], 10) #>       iCode N.Avail Frc.Avail #> 1       LPI      51     1.000 #> 2   Flights      51     1.000 #> 3      Ship      51     1.000 #> 4      Bord      51     1.000 #> 5      Elec      51     1.000 #> 6       Gas      51     1.000 #> 7  ConSpeed      43     0.843 #> 8     Cov4G      51     1.000 #> 9     Goods      51     1.000 #> 10 Services      51     1.000 min(df_avail$Frc.Avail) #> [1] 0.843"},{"path":"https://bluefoxr.github.io/COINr/articles/imputation.html","id":"data-frames","dir":"Articles","previous_headings":"","what":"Data frames","title":"Imputation","text":"Impute() function flexible function imputes missing data data set using suitable function can passed . fact, Impute() generic, methods coins, data frames, numeric vectors purses. Let’s begin examining data frame method Impute(), since easier see ’s going . use small data frame easy visualise: simplest case, imputation can performed column-wise, .e. imputing indicator one time: , “Raw” data set imputed substituting missing values mean non-NA values column. performed setting f_i = \"i_mean\". f_i argument refers function imputes numeric vector - case built-i_mean() function: key concept simple function i_mean() applied Impute() column. idea passing simpler functions used several key COINr functions, allows great flexibility sophisticated imputation methods can used packages, example. now let’s explore options native COINr. can also apply i_median() function way substitute indicator median. Adding little complexity, can also impute mean median, within unit (row) groups. Let’s assume first five rows data frame belong group “”, remaining five different group “b”. practice, e.g. GDP, population wealth groups countries - might hypothesise better replace NA values median inside group, rather overall median, countries within groups similar. data frame can use i_median_grp() function, requires additional argument f: grouping variable. passed Impute() using f_i_para argument takes additional parameters top f_i apart data imputed. f_i_para argument requires named list additional parameter values. allows functions complexity passed Impute(). default, Impute() applies f_i column data, f_i expected take numeric vector first input, specifically format function(x, f_i_para) x numeric vector ... arguments. means first argument f_i must called “x”. use functions don’t x first argument, write wrapper function. imputing column, can also impute row. really makes sense indicators common scale, .e. normalised first (perhaps already share units). impute row, set impute_by = \"row\". example data set indicators rather different scales. Let’s see happens impute row mean don’t normalise: imputes silly values, particularly “CultGood”, “Pat” much higher values. Clearly sensible strategy, unless indicators scale. can however normalise first, impute, return indicators original scales: additionally required specify directions argument need know direction indicator runs (whether positive negative indicators). case indicators positive. See vignette Normalisation details indicator directions. values imputed way realistic. Essentially replacing missing value average (normalised) score indicators, given unit. However also makes sense indicators/columns similar one another: high values one likely imply high values . Behind scenes, setting normalise_first = TRUE first normalises column using min-max method, performs imputation, returns indicators original scales using inverse transformation. Another approach gives control simply run Normalise() first, work normalised data point onwards. case better set normalise_first = FALSE, since default impute_by = \"row\" set TRUE. final point data frames, can set impute_by = \"df\" pass entire data frame f_i, may useful sophisticated multivariate imputation methods. ’s point using Impute() , may ask? First, imputing coins, can impute indicator groups (see next section); second, Impute() performs checks ensure non-NA values altered.","code":"# some data to use as an example # this is a selected portion of the data with some missing values df1 <-  ASEM_iData[37:46, 36:39] print(df1, row.names = FALSE) #>    Pat CultServ CultGood Tourist #>   23.7  0.13405       NA  11.519 #>  583.5  2.20754   16.182  24.040 #>    3.6  0.05780    0.985   6.509 #>  249.8  1.79800       NA  17.242 #>     NA       NA       NA   3.315 #>   64.2  1.15292    7.555  26.757 #>    0.3  0.00266    0.046   0.404 #>     NA  0.08905       NA   2.907 #>   46.5  0.34615    1.213   3.370 #>    7.2  0.03553    1.256   0.966 Impute(df1, f_i = \"i_mean\") #>       Pat  CultServ CultGood Tourist #> 37  23.70 0.1340500   4.5395  11.519 #> 38 583.50 2.2075400  16.1820  24.040 #> 39   3.60 0.0578000   0.9850   6.509 #> 40 249.80 1.7980000   4.5395  17.242 #> 41 122.35 0.6470778   4.5395   3.315 #> 42  64.20 1.1529200   7.5550  26.757 #> 43   0.30 0.0026600   0.0460   0.404 #> 44 122.35 0.0890500   4.5395   2.907 #> 45  46.50 0.3461500   1.2130   3.370 #> 46   7.20 0.0355300   1.2560   0.966 # demo of i_mean() function, which is built in to COINr x <- c(1,2,3,4, NA) i_mean(x) #> [1] 1.0 2.0 3.0 4.0 2.5 # row grouping groups <- c(rep(\"a\", 5), rep(\"b\", 5))  # impute dfi2 <- Impute(df1, f_i = \"i_median_grp\", f_i_para = list(f = groups))  # display print(dfi2, row.names = FALSE) #>     Pat CultServ CultGood Tourist #>   23.70 0.134050   8.5835  11.519 #>  583.50 2.207540  16.1820  24.040 #>    3.60 0.057800   0.9850   6.509 #>  249.80 1.798000   8.5835  17.242 #>  136.75 0.966025   8.5835   3.315 #>   64.20 1.152920   7.5550  26.757 #>    0.30 0.002660   0.0460   0.404 #>   26.85 0.089050   1.2345   2.907 #>   46.50 0.346150   1.2130   3.370 #>    7.20 0.035530   1.2560   0.966 Impute(df1, f_i = \"i_mean\", impute_by = \"row\", normalise_first = FALSE) #>           Pat CultServ  CultGood Tourist #> 37  23.700000  0.13405 11.784350  11.519 #> 38 583.500000  2.20754 16.182000  24.040 #> 39   3.600000  0.05780  0.985000   6.509 #> 40 249.800000  1.79800 89.613333  17.242 #> 41   3.315000  3.31500  3.315000   3.315 #> 42  64.200000  1.15292  7.555000  26.757 #> 43   0.300000  0.00266  0.046000   0.404 #> 44   1.498025  0.08905  1.498025   2.907 #> 45  46.500000  0.34615  1.213000   3.370 #> 46   7.200000  0.03553  1.256000   0.966 Impute(df1, f_i = \"i_mean\", impute_by = \"row\", normalise_first = TRUE, directions = rep(1,4)) #>          Pat CultServ  CultGood Tourist #> 37  23.70000 0.134050  2.850908  11.519 #> 38 583.50000 2.207540 16.182000  24.040 #> 39   3.60000 0.057800  0.985000   6.509 #> 40 249.80000 1.798000 10.163326  17.242 #> 41  64.72133 0.246215  1.828412   3.315 #> 42  64.20000 1.152920  7.555000  26.757 #> 43   0.30000 0.002660  0.046000   0.404 #> 44  39.42134 0.089050  1.128411   2.907 #> 45  46.50000 0.346150  1.213000   3.370 #> 46   7.20000 0.035530  1.256000   0.966"},{"path":"https://bluefoxr.github.io/COINr/articles/imputation.html","id":"coins","dir":"Articles","previous_headings":"","what":"Coins","title":"Imputation","text":"Imputing coins similar imputing data frames coin method Impute() calls data frame method. Please read section first already done . However, coins additional function arguments. simple case impute named data set dset using function f_i: e.g. want impute “Raw” data set using indicator median values: , Impute() extracts “Raw” data set data frame, imputes using data frame method (see previous section), saves new data set coin. , data set called “Imputed” can named otherwise using write_to argument. can also impute group using grouped imputation function. Since unit groups stored within coin (variables labelled “Group” iMeta), can called directly using use_group argument (without specify f_i_para argument): imputed indicator using GDP group mean. Row-wise imputation works way data frame, setting impute_by = \"row\". However, particularly useful conjunction group_level argument. specified, rather imputing across entire row data, splits rows indicator groups, using structure index. example: , group_level argument specifies level-grouping indicators use. ASEM example , using level 2 groups, substituting missing values average normalised score within sub-pillar (ASEM example level 2 called “sub-pillars”). Imputation way important relationship aggregation. don’t impute, aggregation step, take mean group indicators, NA present, value excluded mean calculation. mathematically equivalent assigning mean missing value taking mean indicators. sometimes known “shadow imputation”. Therefore, one reason use imputation method see values implicitly assigned result excluding missing values aggregation step. Last can see example imputation data frame, option impute_by = \"row\". Recall option requires function f_i accepts returns entire data frames. suitable sophisticated multivariate imputation methods. ’ll use basic implementation Expectation Maximisation (EM) algorithm Amelia package. Since COINr requires first argument f_i called x, relevant Amelia function doesn’t satisfy requirement, write simple wrapper function acts intermediary COINr Amelia. also gives us chance specify function arguments necessary. Now armed new function, just call Impute(). don’t need specify f_i_para arguments already specified intermediary function. now passed group indicators level 2 data frames Amelia, imputed one passed back.","code":"ASEM <- Impute(ASEM, dset = \"Raw\", f_i = \"i_mean\") #> Written data set to .$Data$Imputed  ASEM #> -------------- #> A coin with... #> -------------- #> Input: #>   Units: 51 (AUS, AUT, BEL, ...) #>   Indicators: 49 (Goods, Services, FDI, ...) #>   Denominators: 4 (Area, Energy, GDP, ...) #>   Groups: 4 (GDP_group, GDPpc_group, Pop_group, ...) #>  #> Structure: #>   Level 1 Indicator: 49 indicators (FDI, ForPort, Goods, ...)  #>   Level 2 Pillar: 8 groups (ConEcFin, Instit, P2P, ...)  #>   Level 3 Sub-index: 2 groups (Conn, Sust)  #>   Level 4 Index: 1 groups (Index)  #>  #> Data sets: #>   Raw (51 units) #>   Imputed (51 units) ASEM <- Impute(ASEM, dset = \"Raw\", f_i = \"i_mean_grp\", use_group = \"GDP_group\", ) #> Written data set to .$Data$Imputed #> (overwritten existing data set) ASEM <- Impute(ASEM, dset = \"Raw\", f_i = \"i_mean\", impute_by = \"row\",                group_level = 2, normalise_first = TRUE) #> Written data set to .$Data$Imputed #> (overwritten existing data set) # this function takes a data frame input and returns an imputed data frame using amelia i_EM <- function(x){   # impute   amOut <- Amelia::amelia(x, m = 1, p2s = 0, boot.type = \"none\")   # return imputed data   amOut$imputations[[1]] } # impute raw data set coin <- Impute(coin, dset = \"Raw\", f_i = i_EM, impute_by = \"df\", group_level = 2)"},{"path":"https://bluefoxr.github.io/COINr/articles/imputation.html","id":"purses","dir":"Articles","previous_headings":"","what":"Purses","title":"Imputation","text":"Purse imputation similar coin imputation, default purse method Impute() imputes coin separately. one exception : f_i = \"impute_panel, data sets inside purse imputed using last available data point, using impute_panel() function. case, coins imputed individually, treated single data set. case, optionally set f_i_para = list(max_time = .) . substituted maximum number time points search backwards non-NA value. See impute_panel() details. arguments need passed impute_panel(). difficult show working without contrived example, let’s contrive one. take example panel data set ASEM_iData_p, introduce missing value NA indicator “LPI” unit “GB”, year 2022. data point value previous year, 2021. Let’s see : Now let’s build purse impute raw data set. Now check whether imputed point expect: expect NA now replaced 2021 value found previously. get data can use get_data() function. indeed corresponds expect.","code":"# copy dfp <- ASEM_iData_p  # create NA for GB in 2022 dfp$LPI[dfp$uCode == \"GB\" & dfp$Time == 2022] <- NA dfp$LPI[dfp$uCode == \"GB\" & dfp$Time == 2021] #> numeric(0) # build purse ASEMp <- new_coin(dfp, ASEM_iMeta, split_to = \"all\", quietly = TRUE)  # impute raw data using latest available value ASEMp <- Impute(ASEMp, dset = \"Raw\", f_i = \"impute_panel\") #> Written data set to .$Data$Imputed #> Written data set to .$Data$Imputed #> Written data set to .$Data$Imputed #> Written data set to .$Data$Imputed #> Written data set to .$Data$Imputed get_data(ASEMp, dset = \"Imputed\", iCodes = \"LPI\", uCodes = \"GBR\", Time = 2021) #>     Time uCode      LPI #> 183 2021   GBR 4.386542"},{"path":"https://bluefoxr.github.io/COINr/articles/normalise.html","id":"coins","dir":"Articles","previous_headings":"","what":"Coins","title":"Normalisation","text":"Normalise() method coins follows familiar format: specify: x coin global_specs default specifications apply indicators indiv_specs individual specifications override global_specs specific indicators, required directions data frame specifying directions - overrides directions iMeta specified out2 whether output updated coin simply data frame Let’s begin simple example. build example coin normalise raw data. can compare one raw un-normalised indicators side side.  plot also illustrates linear nature min-max transformation. default normalisation uses min-max approach, scaling indicators onto \\([0, 100]\\) interval. can change normalisation type parameters using global_specs argument. , let’s plot example result:  , z-score transformation linear. simply puts resulting indicator different scale. Notice syntax global_specs. specified, takes entries f_n (name function apply column) f_n_para (arguments f_n, including x). Importantly, f_n_para must specified list, even contains one parameter. Note COINr number normalisation functions built , form n_*(), n_minmax(), n_borda(), etc. Type n_ R Studio console press Tab key see list, else browse COINr functions alphabetically.","code":"library(COINr)  # build example coin coin <- build_example_coin(up_to = \"new_coin\") #> iData checked and OK. #> iMeta checked and OK. #> Written data set to .$Data$Raw  # normalise the raw data set coin <- Normalise(coin, dset = \"Raw\") #> Written data set to .$Data$Normalised plot_scatter(coin, dsets = c(\"Raw\", \"Normalised\"), iCodes = \"Goods\") coin <- Normalise(coin, dset = \"Raw\",                    global_specs = list(f_n = \"n_zscore\",                                         f_n_para = list(c(10,2)))) #> Written data set to .$Data$Normalised #> (overwritten existing data set) plot_scatter(coin, dsets = c(\"Raw\", \"Normalised\"), iCodes = \"Goods\")"},{"path":"https://bluefoxr.github.io/COINr/articles/normalise.html","id":"calling-external-functions","dir":"Articles","previous_headings":"Coins","what":"Calling external functions","title":"Normalisation","text":"Since f_n points function name, function can passed Normalise() long available namespace. illustrate, consider example want categorise discrete bins. can use base R’s cut() function purpose. simply need specify number bins. directly call cut(), clarity create simple wrapper function around , pass function Normalise(). illustrate difference linear transformations , plot raw normalised indicator:  Obviously linear. Generally, requirements function passed Normalise() first argument x, numeric vector, return numeric vector length x. also able handle NAs. arguments can passed via f_n_para entry.","code":"# wrapper function f_bin <- function(x, nbins){   cut(x, breaks = nbins, labels = FALSE) }  # pass wrapper to normalise, specify 5 bins coin <- Normalise(coin, dset = \"Raw\",                    global_specs = list(f_n = \"f_bin\",                                         f_n_para = list(nbins = 5))) #> Written data set to .$Data$Normalised #> (overwritten existing data set) plot_scatter(coin, dsets = c(\"Raw\", \"Normalised\"), iCodes = \"Goods\")"},{"path":"https://bluefoxr.github.io/COINr/articles/normalise.html","id":"directions","dir":"Articles","previous_headings":"Coins","what":"Directions","title":"Normalisation","text":"default, directions taken coin. specified Direction column iMeta constructing coin new_coin(). However, can specify different directions using directions argument normalise(): case need specify data frame two columns: iCode (entry indicator code found target data set) Direction giving direction -1 1. show example, take existing directions coin, modify slightly, run normalisation function : ’ll change direction “Goods” indicator re-normalise:","code":"# get directions from coin directions <- coin$Meta$Ind[c(\"iCode\", \"Direction\")]  head(directions, 10) #>       iCode Direction #> 9     Goods         1 #> 10 Services         1 #> 11      FDI         1 #> 12   PRemit         1 #> 13  ForPort         1 #> 31    Renew         1 #> 32 PrimEner        -1 #> 33      CO2        -1 #> 34   MatCon        -1 #> 35   Forest        -1 # change Goods to -1 directions$Direction[directions$iCode == \"Goods\"] <- -1  # re-run (using min max default) coin <- Normalise(coin, dset = \"Raw\", directions = directions) #> Written data set to .$Data$Normalised #> (overwritten existing data set)"},{"path":"https://bluefoxr.github.io/COINr/articles/normalise.html","id":"individual-normalisation","dir":"Articles","previous_headings":"Coins","what":"Individual normalisation","title":"Normalisation","text":"Finally let’s explore specify different normalisation methods different indicators. indiv_specs argument takes named list indicator, override specifications global_specs. indiv_specs specified, need include sub-lists indicators differ global_specs. illustrate, can use contrived example might want apply min-max indicators except two. , apply rank transformation distance maximum approach. Note, since default global_specs min-max, don’t need specify . example meant illustrative functionality Normalise(), rather sensible normalisation strategy, indicators now different ranges. practice, different normalisation strategies selected, good idea keep indicators similar ranges, otherwise effects unequal aggregation step.","code":"# individual specifications: # LPI - borda scores # Flights - z-scores with mean 10 and sd 2 indiv_specs <- list(   LPI = list(f_n = \"n_borda\"),   Flights = list(f_n = \"n_zscore\",                  f_n_para = list(m_sd = c(10, 2))) )  # normalise coin <- Normalise(coin, dset = \"Raw\", indiv_specs = indiv_specs) #> Written data set to .$Data$Normalised #> (overwritten existing data set)  # a quick look at the first three indicators get_dset(coin, \"Normalised\")[1:4] |>   head(10) #>    uCode LPI   Flights      Ship #> 1    AUS  36  9.889993  66.14497 #> 2    AUT  44  9.588735   0.00000 #> 3    BEL  45  9.711512  97.14314 #> 4    BGD   4  8.529810  45.80661 #> 5    BGR   7  8.741971  37.40495 #> 6    BRN   9  8.433044  35.38920 #> 7    CHE  42 10.563483   0.00000 #> 8    CHN  30 13.235114 100.00000 #> 9    CYP  14  8.721372  55.21211 #> 10   CZE  31  9.001961   0.00000"},{"path":"https://bluefoxr.github.io/COINr/articles/normalise.html","id":"use-of-targets","dir":"Articles","previous_headings":"Coins","what":"Use of targets","title":"Normalisation","text":"particular type normalisation “distance target”. normalises indicators distance value specified target. Targets may often political business meaning, e.g. emissions targets sales targets. Targets input coin using iMeta argument building coin using new_coin(). fact, built-example data targets indicators: (Note targets fabricated just purposes example) use distance--target normalisation, call n_dist2targ() function. Like built normalisation functions, normalises vector using specified target. can’t use f_n_para entry Normalise() pass single target value, whereas need use different target indicator. However, COINr special case built targets iMeta can used automatically. Simply set global_specs = list(f_n = \"n_dist2targ\"), Normalise() function automatically retrieve targets iMeta$Target. targets present, generate error. Note directions indicators also passed n_dist2targ() - see function documentation normalisation performed depending direction specified. normalisation look like : also possible specify cap_max parameter n_dist2targ() follows:","code":"head(ASEM_iMeta[c(\"iCode\", \"Target\")]) #>     iCode     Target #> 1     LPI   4.118031 #> 2 Flights 200.332655 #> 3    Ship  20.113377 #> 4    Bord 115.900000 #> 5    Elec 104.670585 #> 6     Gas  90.060420 coin <- Normalise(coin, dset = \"Raw\", global_specs = list(f_n = \"n_dist2targ\")) coin <- Normalise(coin, dset = \"Raw\", global_specs = list(f_n = \"n_dist2targ\", f_n_para = list(cap_max = TRUE)))"},{"path":"https://bluefoxr.github.io/COINr/articles/normalise.html","id":"data-frames-and-vectors","dir":"Articles","previous_headings":"","what":"Data frames and vectors","title":"Normalisation","text":"Normalising data frame similar normalising coin, except input data frame output also data frame. coins, columns can normalised individual specifications using indiv_spec argument exactly way coin. Note non-numeric columns always ignored: also method numeric vectors, although usually just easy call underlying normalisation function directly.","code":"mtcars_n <- Normalise(mtcars, global_specs = list(f_n = \"n_dist2max\"))  head(mtcars_n) #>         mpg cyl      disp        hp      drat        wt      qsec vs am gear #> 1 0.4510638 0.5 0.2217511 0.2049470 0.5253456 0.2830478 0.2333333  0  1  0.5 #> 2 0.4510638 0.5 0.2217511 0.2049470 0.5253456 0.3482485 0.3000000  0  1  0.5 #> 3 0.5276596 0.0 0.0920429 0.1448763 0.5023041 0.2063411 0.4892857  1  1  0.5 #> 4 0.4680851 0.5 0.4662010 0.2049470 0.1474654 0.4351828 0.5880952  1  0  0.0 #> 5 0.3531915 1.0 0.7206286 0.4346290 0.1797235 0.4927129 0.3000000  0  0  0.0 #> 6 0.3276596 0.5 0.3838863 0.1872792 0.0000000 0.4978266 0.6809524  1  0  0.0 #>        carb #> 1 0.4285714 #> 2 0.4285714 #> 3 0.0000000 #> 4 0.0000000 #> 5 0.1428571 #> 6 0.0000000 Normalise(iris) |>   head() #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1    22.222222    62.50000     6.779661    4.166667  setosa #> 2    16.666667    41.66667     6.779661    4.166667  setosa #> 3    11.111111    50.00000     5.084746    4.166667  setosa #> 4     8.333333    45.83333     8.474576    4.166667  setosa #> 5    19.444444    66.66667     6.779661    4.166667  setosa #> 6    30.555556    79.16667    11.864407   12.500000  setosa # example vector x <- runif(10)  # normalise using distance to reference (5th data point) x_norm <- Normalise(x, f_n = \"n_dist2ref\", f_n_para = list(iref = 5))  # view side by side data.frame(x, x_norm) #>             x    x_norm #> 1  0.45836776  87.63985 #> 2  0.33234687  59.85610 #> 3  0.06085299   0.00000 #> 4  0.55563561 109.08444 #> 5  0.06538877   1.00000 #> 6  0.81397328 166.04000 #> 7  0.31155399  55.27190 #> 8  0.88219196 181.08013 #> 9  0.42373432  80.00424 #> 10 0.64590922 128.98701"},{"path":"https://bluefoxr.github.io/COINr/articles/normalise.html","id":"purses","dir":"Articles","previous_headings":"","what":"Purses","title":"Normalisation","text":"purse method normalise() especially useful working multiple coins panel data. make scores comparable one time point next, usually good idea normalise indicators together rather separately. example, min-max method, indicators typically normalised using minimum maximum time points data, opposed separate max min . indicators normalised separately time point, highest scoring unit get score 100 time \\(t\\) (assuming min-max 0 100), highest scoring unit time \\(t+1\\) also assigned score 100. underlying values two scores different, get means purse method normalise() bit different purse methods, doesn’t independently apply function coin, takes coins together. following implications: normalisation function can applied globally coins purse, ensuring comparability. : normalisation done globally, longer possible automatically regenerate coins purse (.e. using regenerate()), coin longer self-contained: needs know values coins purse. Perhaps point add dedicated method regenerating entire purses, yet. Let’s anyway illustrate example. build example purse first. Normalising purse works exactly way normalising coin, except global argument. default, global = TRUE, means normalisation applied time points simultaneously, aim making index comparable. , apply default min-max approach coins: Now let’s examine data set first coin. ’ll see max min indicators : see minimum values zero, maximum values 100, coins indicators higher values. show global maximum indeed 100, can extract whole normalised data set years run check. confirms expectations: global maximum minimum 0 100 respectively. type normalisation can performed purse “global” mode. However, keep mind going . Simply put, global = TRUE happens: data sets coin joined together one using get_dset() function. Normalisation applied global data set. global data set split back coins. specify normalise e.g. rank, ranks calculated time points. Therefore, consider carefully fits intended meaning. Normalisation can also performed independently coin, setting global = FALSE. Now normalised data set coin min max 0 100 respectively, indicator.","code":"purse <- build_example_purse(quietly = TRUE) purse <- Normalise(purse, dset = \"Raw\", global = TRUE) #> Written data set to .$Data$Normalised #> (overwritten existing data set) #> Written data set to .$Data$Normalised #> (overwritten existing data set) #> Written data set to .$Data$Normalised #> (overwritten existing data set) #> Written data set to .$Data$Normalised #> (overwritten existing data set) #> Written data set to .$Data$Normalised #> (overwritten existing data set) # get normalised data of first coin in purse x1 <- get_dset(purse$coin[[1]], dset = \"Normalised\")  # get min and max of first four indicators (exclude uCode col) sapply(x1[2:5], min, na.rm = TRUE) #>     LPI Flights    Ship    Bord  #>       0       0       0       0 sapply(x1[2:5], max, na.rm = TRUE) #>      LPI  Flights     Ship     Bord  #> 83.98913 88.79325 85.91861 93.62416 # get entire normalised data set for all coins in one df x1_global <- get_dset(purse, dset = \"Normalised\")  # get min and max of first four indicators (exclude Time and uCode cols) sapply(x1_global[3:6], min, na.rm = TRUE) #>     LPI Flights    Ship    Bord  #>       0       0       0       0 sapply(x1_global[3:6], max, na.rm = TRUE) #>     LPI Flights    Ship    Bord  #>     100     100     100     100 purse <- Normalise(purse, dset = \"Raw\", global = FALSE) #> Written data set to .$Data$Normalised #> (overwritten existing data set) #> Written data set to .$Data$Normalised #> (overwritten existing data set) #> Written data set to .$Data$Normalised #> (overwritten existing data set) #> Written data set to .$Data$Normalised #> (overwritten existing data set) #> Written data set to .$Data$Normalised #> (overwritten existing data set)  # get normalised data of first coin in purse x1 <- get_dset(purse$coin[[1]], dset = \"Normalised\")  # get min and max of first four indicators (exclude uCode col) sapply(x1[2:5], min, na.rm = TRUE) #>     LPI Flights    Ship    Bord  #>       0       0       0       0 sapply(x1[2:5], max, na.rm = TRUE) #>     LPI Flights    Ship    Bord  #>     100     100     100     100"},{"path":"https://bluefoxr.github.io/COINr/articles/normalise.html","id":"simplified-normalisation","dir":"Articles","previous_headings":"","what":"Simplified normalisation","title":"Normalisation","text":"syntax Normalise() looks bit -complicated, can use simpler qNormalise() function, less flexibility makes key function arguments visible (wrapped lists). function applies normalisation method indicators. also generic can used data frames, coins purses. Let’s demonstrate data frame: default, normalisation results min-max \\([0, 100]\\) interval: can pass another normalisation function like, syntax bit easier Normalise(): qNormalise() function works similar way coins purses.","code":"# some made up data X <- data.frame(uCode = letters[1:10],                 a = runif(10),                 b = runif(10)*100)  X #>    uCode          a        b #> 1      a 0.35050217 31.44541 #> 2      b 0.16361783 81.40296 #> 3      c 0.57525505 36.54627 #> 4      d 0.03647389 96.36231 #> 5      e 0.56133276 18.92878 #> 6      f 0.44189813 56.48925 #> 7      g 0.14370877 22.70082 #> 8      h 0.88389372 92.40622 #> 9      i 0.27610768 79.47204 #> 10     j 0.16012540 54.56927 qNormalise(X) #>    uCode         a          b #> 1      a  37.05699  16.164355 #> 2      b  15.00365  80.681045 #> 3      c  63.57901  22.751758 #> 4      d   0.00000 100.000000 #> 5      e  61.93611   0.000000 #> 6      f  47.84219  48.506724 #> 7      g  12.65428   4.871319 #> 8      h 100.00000  94.890984 #> 9      i  28.27805  78.187388 #> 10     j  14.59153  46.027201 qNormalise(X, f_n = \"n_dist2ref\", f_n_para = list(iref = 1, cap_max = TRUE)) #>    uCode         a         b #> 1      a 1.0000000 1.0000000 #> 2      b 0.4048806 1.0000000 #> 3      c 1.0000000 1.0000000 #> 4      d 0.0000000 1.0000000 #> 5      e 1.0000000 0.0000000 #> 6      f 1.0000000 1.0000000 #> 7      g 0.3414816 0.3013618 #> 8      h 1.0000000 1.0000000 #> 9      i 0.7630962 1.0000000 #> 10     j 0.3937592 1.0000000"},{"path":"https://bluefoxr.github.io/COINr/articles/other_functions.html","id":"import-and-export","dir":"Articles","previous_headings":"","what":"Import and export","title":"Other Functions","text":"One useful functions export_to_excel(). can used export contents coin Excel point construction, simple run. first build example coin: export Excel: exports every data frame coin separate tab workbook, named according position coin. default excludes Log coin, can optionally included. function useful passing results people don’t use R (let’s face , ’s people). Data can also imported directly COINr COIN Tool Excel-based tool building analysing composite indicators, similar fact COINr1. import_coin_tool() function can import data directly COIN Tool cross check extend analysis COINr. demonstrate, can take example version COIN Tool, can download . ’s simple running: directly generate coin COIN Tool.","code":"library(COINr)  # build example coin coin <- build_example_coin(quietly = TRUE) # export coin to Excel export_to_excel(coin, fname = \"example_coin_results.xlsx\") # make sure file is in working directory! coin_import <- import_coin_tool(\"COIN_Tool_v1_LITE_exampledata.xlsm\",                                 makecodes = TRUE, out2 = \"coin\")"},{"path":"https://bluefoxr.github.io/COINr/articles/other_functions.html","id":"converting-from-older-coinr-versions","dir":"Articles","previous_headings":"","what":"Converting from older COINr versions","title":"Other Functions","text":"COINr changed drastically v0.6 v1.0. drastically skipped several version numbers. v1.0, main object COINr called “coin” different “COIN” used v0.6.x. worked COINr v1.0, can use COIN_to_coin() function convert old COINs new coins: comes limitations: data sets present coin passed unless recover_dsets = TRUE. However, specified, coin regenerated possible translate log older COIN class (called “Method”) log new coin class. Still, conversion avoids reformat iData iMeta.","code":"coin <- COIN_to_coin(COIN)"},{"path":"https://bluefoxr.github.io/COINr/articles/other_functions.html","id":"other-useful-functions","dir":"Articles","previous_headings":"","what":"Other useful functions","title":"Other Functions","text":"list accessory functions useful circumstances. rank_df() function converts data frame ranks, ignoring non-numeric columns. Taking sample data: looks like replace_df() function replaces values found anywhere data frame corresponding new values: round_df() rounds specified number decimal places, ignoring non-numeric columns: signif_df() equivalent number significant figures: Finally, compare_df() function gives detailed comparison two similar data frames indexed specified column. function tailored compare results composite indicators. Say set results COINr want cross check separate calculation. Often, end data frame columns, possibly different order. Rows different order indexed identifier, “uCode”. compare_df() function gives detailed comparison two data frames points differences. ’ll demonstrate copying example data frame, altering values seeing happens: output list several entries. First, tells us two data frames . “Details” data frame lists column says whether identical , many different points . Finally, “Differences” list one entry column differs, details value point first data frame compared value second. experience, kind output can helpful quickly zooming differences possibly large data frames results. mainly intended use case described , data frames known similar, size, want check precise differences.","code":"X <- ASEM_iData[1:5,c(2,10:12)] X #>   uCode       GDP Population      LPI #> 1   AUT 390.79999   8735.453 4.097985 #> 2   BEL 467.95527  11429.336 4.108538 #> 3   BGR  53.23964   7084.571 2.807685 #> 4   HRV  51.23100   4189.353 3.160829 #> 5   CYP  20.04623   1179.551 2.999061 rank_df(X) #>   uCode GDP Population LPI #> 1   AUT   2          2   2 #> 2   BEL   1          1   1 #> 3   BGR   3          3   5 #> 4   HRV   4          4   3 #> 5   CYP   5          5   4 replace_df(X, data.frame(old = c(\"AUT\", \"BEL\"), new = c(\"test1\", \"test2\"))) #>   uCode       GDP Population      LPI #> 1 test1 390.79999   8735.453 4.097985 #> 2 test2 467.95527  11429.336 4.108538 #> 3   BGR  53.23964   7084.571 2.807685 #> 4   HRV  51.23100   4189.353 3.160829 #> 5   CYP  20.04623   1179.551 2.999061 round_df(X, 1) #>   uCode   GDP Population LPI #> 1   AUT 390.8     8735.5 4.1 #> 2   BEL 468.0    11429.3 4.1 #> 3   BGR  53.2     7084.6 2.8 #> 4   HRV  51.2     4189.4 3.2 #> 5   CYP  20.0     1179.6 3.0 signif_df(X, 3) #>   uCode   GDP Population  LPI #> 1   AUT 391.0       8740 4.10 #> 2   BEL 468.0      11400 4.11 #> 3   BGR  53.2       7080 2.81 #> 4   HRV  51.2       4190 3.16 #> 5   CYP  20.0       1180 3.00 # copy X1 <- X  # change three values X1$GDP[3] <- 101 X1$Population[1] <- 10000 X1$Population[2] <- 70000  # reorder X1 <- X1[order(X1$uCode), ]  # now compare compare_df(X, X1, matchcol = \"uCode\") #> $Same #> [1] FALSE #>  #> $Details #>       Column TheSame                          Comment NDifferent #> 1      uCode    TRUE      Non-numerical and identical          0 #> 2        GDP   FALSE Numerical and different at 5 sf.          1 #> 3 Population   FALSE Numerical and different at 5 sf.          2 #> 4        LPI    TRUE Numerical and identical to 5 sf.          0 #>  #> $Differences #> $Differences$GDP #>   uCode      df1 df2 #> 3   BGR 53.23964 101 #>  #> $Differences$Population #>   uCode       df1   df2 #> 1   AUT  8735.453 10000 #> 2   BEL 11429.336 70000"},{"path":"https://bluefoxr.github.io/COINr/articles/overview.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Overview","text":"vignette introduces gives overview COINr package. COINr high-level R package first fully-flexible development analysis environment composite indicators scoreboards. vignette one quite vignettes document package. , aim give quick introduction overview package. vignettes deal specific operations. COINr v1.0.0 radical changes introduced. notably existing users, change syntax. unfortunate one-necessity changes (survive , roll back old version COINr) described extra vignette called Changes v1.0.","code":""},{"path":"https://bluefoxr.github.io/COINr/articles/overview.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Overview","text":"COINr CRAN can installed running: simply browsing package R Studio. CRAN version updated every 1-2 months . want latest version meantime (usually adding features fixing bugs find ), can install development version GitHub. First, install ‘remotes’ package don’t already , run: directly install package Github, without steps. may asked update packages. might strictly necessary, can also try skipping step prefer. package installed, can loaded follows:","code":"install.packages(\"COINr\") remotes::install_github(\"bluefoxr/COINr\") library(COINr)"},{"path":"https://bluefoxr.github.io/COINr/articles/overview.html","id":"features","dir":"Articles","previous_headings":"","what":"Features","title":"Overview","text":"main features COINr package building composite indicator performing operations data, analysing/post-processing, visualisation. , main functions briefly listed (list exhaustive): Building functions begin capital letter, except new_coin() used initialise coin object Building functions defined modify data (creating additional data set). also keep record arguments inside coin, allows coins regenerated. See Adjustments Comparisons. Analysing functions include multivariate analysis, weight optimisation sensitivity analysis, well reporting results: Plotting functions generate plots using ggplot2 package: Adjustment comparison functions allow copies, adjustments comparisons made alternative versions composite indicator: functions useful tools don’t fit categories functions fully documented individual function help can accessed usual way ?function_name. COINr package loosely object oriented, sense composite indicator encapsulated S3 class object called “coin”, time-indexed collection coins called “purse” (see Building coins) main functions listed previous tables take “coin” class main input (often also output) function arguments specifying apply function. E.g. syntax typically: Many main COINr functions generics: methods also data frames, purses, cases numeric vectors. means COINr functions can also used ad-hoc operations without needing build coins.","code":"coin <- COINr_function(coin, function_arguments)"},{"path":"https://bluefoxr.github.io/COINr/articles/overview.html","id":"quick-example","dir":"Articles","previous_headings":"","what":"Quick example","title":"Overview","text":"COINr package contains example data used vignettes demonstrate functions, comes ASEM Sustainable Connectivity Portal. data set 49 indicators covering 51 Asian European countries, measuring “sustainable connectivity”. work building composite indicator, link vignettes details. proceeding, let’s clearly define terms first avoid confusion later . indicator variable observed value unit. Indicators might things like life expectancy, CO2 emissions, number tertiary graduates, . unit one entities comparing using indicators. Often, units countries, also regions, universities, individuals even competing policy options (latter realm multicriteria decision analysis). begin building new “coin”. build coin need two data frames inputs new_coin() function. See vignette Building coins details . output new_coin() coin class object single data set called “Raw”: Let’s view structure index specified, using plot_framework() function:  See Visualisation vignette full range plotting options COINr. moment coin contains raw data. build composite indicator need perform operations coin. operations optional can performed order. begin denominating raw data: , divide indicators quantities make indicators comparable small large countries. See vignette Denomination. thing specify denomination performed “Raw” data set. specifications denominate indicators already contained data frames input new_coin(). Running Denominate() created new data set called “Denominated” reported message run function (can choose another name wish). additional “Raw” data set overwrite . Next screen units (countries) based data availability. want ensure every unit (country) least 90% data availability across indicators. Screening done Screen() function: details function can found Unit screening vignette. , running function created new data set. Let’s look contents coin using print() method: Notice “Screened” data set now 46 units five screened , less 90% data availability. Next impute remaining missing data points. can done variety ways, choose impute using group mean, .e. country “Asia” group, replace missing points Asian mean. country “Europe” group, replace European mean. writes another data set called “Imputed”, filled missing data points. , specify data set impute, chosen “Screened” data set. Full details imputation function can found Imputation vignette. next like treat outliers. Treat() function gives number options, default identify outliers using skewness kurtosis thresholds, Winsorise log-transform indicators brought within specified thresholds. function slightly complicated full details can found Outlier treatment vignette. details data treatment can found inside coin. simplified version Treat() also available, called qTreat(), may easier use many cases. final step aggregating bring indicators onto common scale normalising . Normalise() function , default, scale indicator onto \\([0, 100]\\) interval using “min-max” approach. , Normalise() slightly complex function (unless run defaults, ), simplified version called qNormalise() also available. Details normalisation can found Normalisation vignette. conclude construction composite indicator, must aggregate normalised indicators within aggregation groups. example, indicators (level 1) aggregated “pillars” (level 2), aggregated “sub-indexes” (level 3), finally aggregated single index (level 4). Aggregate() function aggregate following structure specified iMeta argument new_coin(). default, done using arithmetic mean, using weights also specified iMeta. Details aggregation can found Aggregation vignette. now fully-constructed coin index scores country. look results? One way get_results() function extracts conveniently-arranged table results: shows glance top-ranking countries scores. See Presenting Results vignette ways generate results tables. can also generate bar chart:  also shows underlying sub-index scores. explore functions . final useful step, can export entire contents coin Excel needed:","code":"ASEM <- new_coin(ASEM_iData, ASEM_iMeta, level_names = c(\"Indicator\", \"Pillar\", \"Sub-index\", \"Index\")) #> iData checked and OK. #> iMeta checked and OK. #> Written data set to .$Data$Raw ASEM #> -------------- #> A coin with... #> -------------- #> Input: #>   Units: 51 (AUS, AUT, BEL, ...) #>   Indicators: 49 (Goods, Services, FDI, ...) #>   Denominators: 4 (Area, Energy, GDP, ...) #>   Groups: 4 (GDP_group, GDPpc_group, Pop_group, ...) #>  #> Structure: #>   Level 1 Indicator: 49 indicators (FDI, ForPort, Goods, ...)  #>   Level 2 Pillar: 8 groups (ConEcFin, Instit, P2P, ...)  #>   Level 3 Sub-index: 2 groups (Conn, Sust)  #>   Level 4 Index: 1 groups (Index)  #>  #> Data sets: #>   Raw (51 units) plot_framework(ASEM) ASEM <- Denominate(ASEM, dset = \"Raw\") #> Written data set to .$Data$Denominated ASEM <- Screen(ASEM, dset = \"Denominated\", dat_thresh = 0.9, unit_screen = \"byNA\") #> Written data set to .$Data$Screened ASEM #> -------------- #> A coin with... #> -------------- #> Input: #>   Units: 51 (AUS, AUT, BEL, ...) #>   Indicators: 49 (Goods, Services, FDI, ...) #>   Denominators: 4 (Area, Energy, GDP, ...) #>   Groups: 4 (GDP_group, GDPpc_group, Pop_group, ...) #>  #> Structure: #>   Level 1 Indicator: 49 indicators (FDI, ForPort, Goods, ...)  #>   Level 2 Pillar: 8 groups (ConEcFin, Instit, P2P, ...)  #>   Level 3 Sub-index: 2 groups (Conn, Sust)  #>   Level 4 Index: 1 groups (Index)  #>  #> Data sets: #>   Raw (51 units) #>   Denominated (51 units) #>   Screened (46 units) ASEM <- Impute(ASEM, dset = \"Screened\", f_i = \"i_mean_grp\", use_group = \"EurAsia_group\") #> Written data set to .$Data$Imputed ASEM <- Treat(ASEM, dset = \"Screened\") #> Written data set to .$Data$Treated ASEM <- Normalise(ASEM, dset = \"Treated\") #> Written data set to .$Data$Normalised ASEM <- Aggregate(ASEM, dset = \"Normalised\", f_ag = \"a_amean\") #> Written data set to .$Data$Aggregated # get results table df_results <- get_results(ASEM, dset = \"Aggregated\", tab_type = \"Aggs\")  head(df_results) #>   uCode Rank Index  Conn  Sust Physical ConEcFin Political Instit   P2P Environ #> 1   CHE    1 68.33 62.18 74.48    64.37    33.30     73.03  83.32 56.87   78.13 #> 2   DNK    2 64.47 56.05 72.90    50.17    30.52     76.98  71.59 51.01   70.53 #> 3   NLD    3 64.46 61.32 67.60    68.15    45.11     83.49  67.96 41.86   57.14 #> 4   NOR    4 64.23 56.53 71.93    57.45    25.39     78.95  87.10 33.75   71.55 #> 5   BEL    5 63.11 63.02 63.19    71.80    48.65     79.57  71.84 43.27   52.00 #> 6   SWE    6 62.82 52.88 72.77    51.90    23.93     80.10  70.04 38.43   68.34 #>   Social SusEcFin #> 1  87.63    57.67 #> 2  86.17    61.99 #> 3  86.00    59.65 #> 4  87.04    57.20 #> 5  85.36    52.22 #> 6  86.92    63.04 plot_bar(ASEM, dset = \"Aggregated\", iCode = \"Index\", stack_children = TRUE) # export coin to Excel export_to_excel(coin, fname = \"example_coin_results.xlsx\")"},{"path":"https://bluefoxr.github.io/COINr/articles/overview.html","id":"finally","dir":"Articles","previous_headings":"","what":"Finally","title":"Overview","text":"preceding example covered number features COINr. Features mentioned can found following vignettes: Weights Analysis Sensitivity analysis Adjustments Comparisons Data selection functions","code":""},{"path":"https://bluefoxr.github.io/COINr/articles/screening.html","id":"data-frames","dir":"Articles","previous_headings":"","what":"Data frames","title":"Unit Screening","text":"begin data frames. Let’s take subset inbuilt example data demonstration. cherry-pick rows columns missing values. data four indicators, plus identifier column “uCode”. Looking unit, data availability variable. 12 units total. Now let’s use Screen() screen units. Specifically, remove units less 75% data availabilty (3 4 indicators non-NA values): output Screen() list: can see already “RemovedUnits” entry tells us three units removed based specifications. now new screened data set: summary data availability things: table fact generated get_data_avail() - details can found Analysis vignette. data availability, units can also screened based presence zeros, - specified unit_screen argument. Use Force1 argument override screening rules specified units required (either force inclusion force exclusion).","code":"library(COINr)  # example data iData <- ASEM_iData[40:51, c(\"uCode\", \"Research\", \"Pat\", \"CultServ\", \"CultGood\")]  iData #>    uCode Research   Pat CultServ CultGood #> 40   KOR    20437 249.8  1.79800       NA #> 41   LAO      175    NA       NA       NA #> 42   MYS     8080  64.2  1.15292    7.555 #> 43   MNG      293   0.3  0.00266    0.046 #> 44   MMR      299    NA  0.08905       NA #> 45   NZL     7731  46.5  0.34615    1.213 #> 46   PAK     7122   7.2  0.03553    1.256 #> 47   PHL     1361  11.3  0.29555    3.185 #> 48   RUS    16182 141.5  1.44633    8.379 #> 49   SGP    11411 270.5  0.92780   14.507 #> 50   THA     5317  53.6  0.08969    6.661 #> 51   VNM     3618    NA       NA       NA l_scr <- Screen(iData, unit_screen = \"byNA\", dat_thresh = 0.75) str(l_scr, max.level = 1) #> List of 3 #>  $ ScreenedData:'data.frame':    9 obs. of  5 variables: #>  $ DataSummary :'data.frame':    12 obs. of  10 variables: #>  $ RemovedUnits: chr [1:3] \"LAO\" \"MMR\" \"VNM\" l_scr$ScreenedData #>    uCode Research   Pat CultServ CultGood #> 40   KOR    20437 249.8  1.79800       NA #> 42   MYS     8080  64.2  1.15292    7.555 #> 43   MNG      293   0.3  0.00266    0.046 #> 45   NZL     7731  46.5  0.34615    1.213 #> 46   PAK     7122   7.2  0.03553    1.256 #> 47   PHL     1361  11.3  0.29555    3.185 #> 48   RUS    16182 141.5  1.44633    8.379 #> 49   SGP    11411 270.5  0.92780   14.507 #> 50   THA     5317  53.6  0.08969    6.661 head(l_scr$DataSummary) #>    uCode N_missing N_zero N_miss_or_zero Dat_Avail Non_Zero LowData LowNonZero #> 40   KOR         1      0              1      0.75        1   FALSE      FALSE #> 41   LAO         3      0              3      0.25        1    TRUE      FALSE #> 42   MYS         0      0              0      1.00        1   FALSE      FALSE #> 43   MNG         0      0              0      1.00        1   FALSE      FALSE #> 44   MMR         2      0              2      0.50        1    TRUE      FALSE #> 45   NZL         0      0              0      1.00        1   FALSE      FALSE #>    LowDatOrZeroFlag Included #> 40            FALSE     TRUE #> 41             TRUE    FALSE #> 42            FALSE     TRUE #> 43            FALSE     TRUE #> 44             TRUE    FALSE #> 45            FALSE     TRUE"},{"path":"https://bluefoxr.github.io/COINr/articles/screening.html","id":"coins","dir":"Articles","previous_headings":"","what":"Coins","title":"Unit Screening","text":"Screening coins similar data frames, coin method extracts relevant data set, passes data frame method, puts output back new data set. means arguments almost . thing different specify data set screen, name give new data set, whether output coin list. ’ll build example coin, screen raw data set threshold 85% data availability also name new data set something different rather “Screened” (default): printed summary shows new data set 48 units, compared raw data set 51. can find units filtered stored coin’s “Analysis” sub-list: Analysis sub-list also contains data availability table output Screen(). data frame method, can also choose screen units presence zeroes, combination zeroes missing values.","code":"# build example coin coin <- build_example_coin(up_to = \"new_coin\", quietly = TRUE)  # screen units from raw dset coin <- Screen(coin, dset = \"Raw\", unit_screen = \"byNA\", dat_thresh = 0.85, write_to = \"Filtered_85pc\") #> Written data set to .$Data$Filtered_85pc  # some details about the coin by calling its print method coin #> -------------- #> A coin with... #> -------------- #> Input: #>   Units: 51 (AUS, AUT, BEL, ...) #>   Indicators: 49 (Goods, Services, FDI, ...) #>   Denominators: 4 (Area, Energy, GDP, ...) #>   Groups: 4 (GDP_group, GDPpc_group, Pop_group, ...) #>  #> Structure: #>   Level 1 Indicator: 49 indicators (FDI, ForPort, Goods, ...)  #>   Level 2 Pillar: 8 groups (ConEcFin, Instit, P2P, ...)  #>   Level 3 Sub-index: 2 groups (Conn, Sust)  #>   Level 4 Index: 1 groups (Index)  #>  #> Data sets: #>   Raw (51 units) #>   Filtered_85pc (48 units) coin$Analysis$Filtered_85pc$RemovedUnits #> [1] \"BRN\" \"LAO\" \"MMR\""},{"path":"https://bluefoxr.github.io/COINr/articles/screening.html","id":"purses","dir":"Articles","previous_headings":"","what":"Purses","title":"Unit Screening","text":"completion also demonstrate purse method. Like purse methods, simply applying coin method coin purse, without special features. , perform example coin section, purse coins:","code":"# build example purse purse <- build_example_purse(up_to = \"new_coin\", quietly = TRUE)  # screen units in all coins to 85% data availability purse <- Screen(purse, dset = \"Raw\", unit_screen = \"byNA\",                 dat_thresh = 0.85, write_to = \"Filtered_85pc\") #> Written data set to .$Data$Filtered_85pc #> Written data set to .$Data$Filtered_85pc #> Written data set to .$Data$Filtered_85pc #> Written data set to .$Data$Filtered_85pc #> Written data set to .$Data$Filtered_85pc"},{"path":"https://bluefoxr.github.io/COINr/articles/sensitivity.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Sensitivity Analysis","text":"Sensitivity analysis often confused uncertainty analysis. Uncertainty analysis involves estimating uncertainty outputs system (, scores ranks composite indicator), given uncertainties inputs (, methodological decisions, weights, etc.). results uncertainty include example confidence intervals ranks, median ranks, . Sensitivity analysis extra step uncertainty analysis, estimates input uncertainties driving output uncertainty, much. rule thumb, known Pareto Principle (80/20 Rule) suggests often, small proportion input uncertainties causing majority output uncertainty. Sensitivity analysis allows us find input uncertainties significant (therefore perhaps worthy extra attention), important. reality, sensitivity analysis uncertainty analysis can performed simultaneously. However cases, main technique use Monte Carlo methods. essentially involves re-calculating composite indicator many times, time randomly varying uncertain variables (assumptions, parameters), order estimate output distributions. COINr implements flexible variance-based global sensitivity analysis approach, allows almost assumption varied, long distribution alternative values can described. Variance-based “sensitivity indices” estimated using Monte Carlo design (running composite indicator many times particular combination input values). follows methodology described paper.","code":""},{"path":"https://bluefoxr.github.io/COINr/articles/sensitivity.html","id":"defining-the-problem","dir":"Articles","previous_headings":"","what":"Defining the problem","title":"Sensitivity Analysis","text":"first step sensitivity analysis identify assumptions treat uncertain, alternative values assign assumption. Let’s begin “”: think ingredients gone making composite indicator: data , selection indicators, methodological decisions along way (imputation method use, ; whether treat outliers way, normalisation method, etc…). test everything, can pick assumptions seem important, plausible alternatives assign. work familiar -built example coin. can see exactly built calling edit(build_example_coin) way. test four assumptions: maximum number Winsorised data points. currently set five, let vary 1 5 points. normalisation method. default min-max method used, also consider z-score alternative. weights. test perturbing weights randomly inside set interval. aggregation method. example uses arithmetic mean also consider geometric mean alternative.","code":"library(COINr)  # build example coin coin <- build_example_coin(quietly = TRUE)"},{"path":"https://bluefoxr.github.io/COINr/articles/sensitivity.html","id":"input-distributions","dir":"Articles","previous_headings":"","what":"Input distributions","title":"Sensitivity Analysis","text":"now selected assumptions vary, can now work defining distributions assumption. Sensitivity analysis probabilistic tool, input assumption treated random variable, means define distribution assumption. function run sensitivity COINr called get_sensitivity(). takes little understanding get set properly. argument defines input distributions list called SA_specs. specifies assumptions vary, distributions assumption, assumption can found coin. Let’s demonstrate defining one part SA_specs, first assumption: maximum number Winsorised points. uncertain assumption defined list three components. “Address” component describes coin object interest found. look inside coin find : notice don’t specify name coin , .e. coin$Log$Treat$... rather just $Log$Treat$.... Next “Distribution”, essentially describes alternatives parameter. entered 1:5, .e. integer 1 5. Finally “Type” entry set either “discrete” “continuous”. former, distribution assumed discrete, samples taken alternatives given “Distribution”. latter, distribution assumed continuous uniform, “Distribution” 2-length vector specifying upper lower bounds parameter. Obviously latter case, parameter must numeric, must able take non-integer values. summary, list specifies winmax parameter allowed vary 1 5 (integers). list combined lists assumptions , input get_sensitivity(). Now let’s see entry normalisation method: bit complicated switch min-max z-score methods, also want use corresponding set parameters (f_n_para). means parameter target entire “global_specs” argument Normalise(). define two alternatives: one min-max 1 100, z-score mean 10 standard deviation 2. Notice need careful wrap things appropriately lists required function. Otherwise rest straight forward: define address attach norm_alts alternatives main list chunk. distribution discrete. Notice specification includes “default” value assumption, just alternative(s). Next weights, also special case. different ways approach changing weights. First, might small number alternative weight sets, perhaps one original weights, one PCA, one adjusted hand. case, put three sets weights list set address $Log$Aggregate$w, discrete distribution. second possibility treat individual weights individual parameters. might good idea want vary small number individual weights, e.g. sub-index weights (two). define one assumption one weight set address e.g. coin$Meta$Weights$Original$Weight[58] location “Conn” sub-index weight, similarly “Sust” sub-index. set Type = \"continuous\" set upper lower bounds needed, e.g. c(0.5, 1) vary 0.5 1. instead get overall perturbation weights, use helper function. get_noisy_weights() function designed purpose: generates replications set weights, replication random noise added according specifications. works. take nominal weights (normally use) feed function: noisy_wts object list containing 100 data frames, set weights slightly different values. sample shows last rows one weight-sets. Now can feed list chunk: Notice distribution defined discrete practice 100 alternative sets weights, even though emulating continuous distribution. Last define list chunk aggregation method: relatively straightforward. defined input distributions individually, ’s time put together: simply put list chunks single list. names list used names assumptions, can name want.","code":"# component of SA_specs for winmax distribution l_winmax <- list(Address = \"$Log$Treat$global_specs$f1_para$winmax\",                Distribution = 1:5,                Type = \"discrete\") # normalisation method  # first, we define the two alternatives: minmax or zscore (along with respective parameters) norm_alts <- list(   list(f_n = \"n_minmax\", f_n_para = list(c(1,100))),   list(f_n = \"n_zscore\", f_n_para = list(c(10,2))) )  # now put this in a list l_norm <- list(Address = \"$Log$Normalise$global_specs\",                Distribution = norm_alts,                Type = \"discrete\") # get nominal weights w_nom <- coin$Meta$Weights$Original  # build data frame specifying the levels to apply the noise at noise_specs = data.frame(Level = c(2,3),                          NoiseFactor = c(0.25, 0.25))  # get 100 replications noisy_wts <- get_noisy_weights(w = w_nom, noise_specs = noise_specs, Nrep = 100)  # examine one of the noisy weight sets tail(noisy_wts[[1]]) #>       iCode Level    Weight #> 55  Environ     2 0.8119616 #> 56   Social     2 0.7875536 #> 57 SusEcFin     2 0.7615617 #> 58     Conn     3 0.7675647 #> 59     Sust     3 0.9443213 #> 60    Index     4 1.0000000 # component of SA_specs for weights l_weights <- list(Address = \"$Log$Aggregate$w\",                   Distribution = noisy_wts,                   Type = \"discrete\") ## aggregation l_agg <- list(Address = \"$Log$Aggregate$f_ag\",                Distribution = c(\"a_amean\", \"a_gmean\"),                Type = \"discrete\") # create overall specification list SA_specs <- list(   Winmax = l_winmax,   Normalisation = l_norm,   Weights = l_weights,   Aggregation = l_agg )"},{"path":"https://bluefoxr.github.io/COINr/articles/sensitivity.html","id":"uncertainty-analysis","dir":"Articles","previous_headings":"","what":"Uncertainty analysis","title":"Sensitivity Analysis","text":"bit complicated, defining sensitivity analysis complicated! Now COINr can take . can now call get_sensitivity() function: actually run building vignette can take little finish. run get message saying weights address found NULL. COINr checks address see already object address inside coin. , NULL asks want continue anyway. case, fact NULL made mistake address, simply w argument Aggregate() specified build coin (.e. set NULL), default “Original” weights used. Sometimes however, address NULL might made error. Looking syntax get_sensitivity(): apart passing coin SA_specs, also specify many replications run (N - replications results accurate sensitivity analysis, also takes longer); whether run uncertainty analysis (SA_type = \"UA\") sensitivity analysis (SA_type = \"SA\"); finally target output sensitivity analysis, case specified Index, aggregated data set. type sensitivity analysis (SA_type) set \"UA\", assumptions sampled randomly results simply consist distribution ranks. takes less replications, may sufficient just interested output uncertainty, without attributing input assumption. can directly look output uncertainty analysis calling plot_uncertainty() function:  Results contained output get_sensitivity() can also viewed directly, e.g. shows nominal, mean, median, 5th/95th percentile ranks unit, result induced uncertainty.","code":"# Not run here: will take a few seconds to finish if you run this SA_res <- get_sensitivity(coin, SA_specs = SA_specs, N = 100, SA_type = \"UA\",                           dset = \"Aggregated\", iCode = \"Index\") plot_uncertainty(SA_res) head(SA_res$RankStats) #>   uCode Nominal  Mean Median    Q5 Q95 #> 1   AUS      35 35.28     35 34.00  38 #> 2   AUT       7  7.00      7  5.95   9 #> 3   BEL       5  5.15      5  3.00   9 #> 4   BGD      46 45.46     46 41.00  48 #> 5   BGR      30 27.59     28 24.00  30 #> 6   BRN      40 40.07     40 37.00  45"},{"path":"https://bluefoxr.github.io/COINr/articles/sensitivity.html","id":"sensitivity-analysis","dir":"Articles","previous_headings":"","what":"Sensitivity analysis","title":"Sensitivity Analysis","text":"process performing sensitivity analysis , set SA_type = \"SA\". run , see important difference: although set N = 100 coin replicated 600 times! variance based sensitivity analysis requires specific experimental design, actual number runs \\(N(d+2)\\), \\(d\\) number uncertain assumptions. Notice also set Nboot = 100, number bootstrap replications perform, used estimating confidence intervals sensitivity indices. Let’s now plot results using plot_sensitivity() function:  default returns bar chart. bar gives sensitivity results (case average rank change Index compared nominal values) assumption. Clearly, sensitive assumption aggregation method, least sensitive maximum number points Winsorise. results can plotted pie chart, box plot, depending set ptype:  confidence intervals rather wide , especially first order sensitivity indices. increasing N, precision estimates increase confidence intervals narrow. case, right hand plot (total order sensitivity indices) already clear: despite estimation uncertainty, order importance four assumptions clearly distinguished.","code":"# Not run here: will take a few seconds to finish if you run this SA_res <- get_sensitivity(coin, SA_specs = SA_specs, N = 100, SA_type = \"SA\",                           dset = \"Aggregated\", iCode = \"Index\", Nboot = 100) plot_sensitivity(SA_res) plot_sensitivity(SA_res, ptype = \"box\")"},{"path":"https://bluefoxr.github.io/COINr/articles/sensitivity.html","id":"discussiontips","dir":"Articles","previous_headings":"","what":"Discussion/tips","title":"Sensitivity Analysis","text":"get_sensitivity() function flexible can target anything inside coin. However, comes expense carefully specifying uncertainties analysis, general understanding coin regenerated. latter part, may also help read Adjustments comparisons vignette. particular points consider: responsibility get correct address parameter understand use. also responsibility make sure conflicts caused methodological variations, negative values fed geometric mean. can’t target parameter twice sensitivity analysis - one specification just overwrite . general better start simple: start one two assumptions vary gradually expand level complexity needed. can also test run low N see results vaguely sensible. Variance based sensitivity analysis complicated, especially assumptions vary often just single value, strings, data frames lists. , understanding COINr basic understanding sensitivity analysis can help lot. One important point sensitivity analysis, target sensitivity analysis mean absolute rank change. COINr takes target output specify, replication compares ranks variable nominal ranks. takes difference two takes mean absolute value differences: higher value quantity, ranks changed respect nominal. done variance-based SA generally requires univariate output. want perform complex sensitivity analysis, perhaps generating separate sensitivity indices unit, also bypassing get_sensitivity() altogether. want venture path, check SA_sample() SA_estimate(), called get_sensitivity(). definitely require custom coding part feel challenge, go !","code":""},{"path":"https://bluefoxr.github.io/COINr/articles/sensitivity.html","id":"removing-elements","dir":"Articles","previous_headings":"","what":"Removing elements","title":"Sensitivity Analysis","text":"Last turn separate function variance-based sensitivity analysis related sensitivity analysis general. remove_elements() function tests effect removing components composite indicator one time. can useful find impact component, terms “remove , happen?”. run , input coin function specify level want remove components. example, specifying Level = 2 removes component level 2 one time, replacement, regenerates results time. also specify indicator/aggregate target output: output contains details ranks scores, “MeanAbsDiff” entry good summary: shows mean absolute rank difference nominal ranks, ranks component removed. , higher value means ranks changed component removed vice versa. Clearly, impact removing components , can useful information considering whether discard part index.","code":"# run function removing elements in level 2 l_res <- remove_elements(coin, Level = 2, dset = \"Aggregated\", iCode = \"Index\") #> Iteration 1 of 8 #> Iteration 2 of 8 #> Iteration 3 of 8 #> Iteration 4 of 8 #> Iteration 5 of 8 #> Iteration 6 of 8 #> Iteration 7 of 8 #> Iteration 8 of 8  # get summary of rank changes l_res$MeanAbsDiff #>   Nominal  Physical  ConEcFin Political    Instit       P2P   Environ    Social  #>  0.000000  1.529412  2.627451  2.901961  1.176471  1.686275  3.098039  3.960784  #>  SusEcFin  #>  2.627451"},{"path":"https://bluefoxr.github.io/COINr/articles/treat.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Outlier Treatment","text":"Data treatment process altering indicators improve statistical properties, mainly purposes aggregation. Data treatment delicate subject, essentially involves changing values certain observations, transforming entire distribution. Like step assumption though, data treatment carefully recorded implications understood. course, data treatment applied, simply another tool toolbox.","code":""},{"path":"https://bluefoxr.github.io/COINr/articles/treat.html","id":"the-treat-function","dir":"Articles","previous_headings":"","what":"The Treat() function","title":"Outlier Treatment","text":"COINr function treating data called Treat(). generic function methods coins, purses, data frames numeric vectors. flexible can add layer complexity. want run mostly default options, see qTreat() function mentioned Simplified function. Treat() function operates two-stage data treatment process, based two data treatment functions (f1 f2), pass/fail function f_pass detects outliers. arrangement function inspired fairly standard data treatment process applied indicators, consists checking skew kurtosis, criteria met, applying Winsorisation specified limit. Winsorisation still bring skew kurtosis within limits, applying nonlinear transformation log Box-Cox. function generalises process using following general steps: Check variable passes fails using f_pass f_pass returns FALSE, apply f1, else return x unmodified Check using f_pass f_pass still returns FALSE, apply f2 Return modified x well information. “typical” case described f1 Winsorisation function, f2 nonlinear transformation f_pass skew kurtosis check. However, functions can passed f1, f2 f_pass, makes flexible tool also compatible packages. details works given following sections.","code":""},{"path":"https://bluefoxr.github.io/COINr/articles/treat.html","id":"numeric-vectors","dir":"Articles","previous_headings":"","what":"Numeric vectors","title":"Outlier Treatment","text":"clearest way demonstrate Treat() function numeric vector. Let’s make vector couple outliers: can check skew kurtosis vector: skew kurtosis high. follow default limits COINr (absolute skew capped 2, kurtosis capped 3.5), classed vector outliers. Indeed can confirm using check_SkewKurt() function, default pass/fail function used Treat(). also anyway outputs skew kurtosis: Now know x outliers, can treat (want). use Treat() function specify function checking outliers f_pass = \"check_SkewKurt\", first function treating outliers f1 = \"winsorise\". also pass additional parameter winsorise(), winmax = 2. can check winsorise() function documentation better understand works.  result data treatment shown scatter plot: one point x Winsorised (reassigned next highest value). can check skew kurtosis treated vector: Clearly, Winsorising one point enough case bring skew kurtosis within specified thresholds.","code":"# numbers between 1 and 10 x <- 1:10  # two outliers x <- c(x, 30, 100) library(COINr)  skew(x) #> [1] 3.063241  kurt(x) #> [1] 9.741391 check_SkewKurt(x) #> $Pass #> [1] FALSE #>  #> $Skew #> [1] 3.063241 #>  #> $Kurt #> [1] 9.741391 l_treat <- Treat(x, f1 = \"winsorise\", f1_para = list(winmax = 2),                  f_pass = \"check_SkewKurt\")  plot(x, l_treat$x) check_SkewKurt(l_treat$x) #> $Pass #> [1] TRUE #>  #> $Skew #> [1] 1.712038 #>  #> $Kurt #> [1] 1.815781"},{"path":"https://bluefoxr.github.io/COINr/articles/treat.html","id":"data-frames","dir":"Articles","previous_headings":"","what":"Data frames","title":"Outlier Treatment","text":"Treatment data frame Treat() effectively treating numeric vector, data frame method passes column data frame numeric method. , use data COINr package demonstrate. can see output list x_treat, treated data frame; Dets_Table, table describing happened indicator; Treated_Points, marks individual points adjusted. effectively output treating numeric vector. also check individual points:","code":"# select three indicators df1 <- ASEM_iData[c(\"Flights\", \"Goods\", \"Services\")]  # treat the data frame using defaults l_treat <- Treat(df1)  str(l_treat, max.level = 1) #> List of 3 #>  $ x_treat       :'data.frame':  51 obs. of  3 variables: #>  $ Dets_Table    :'data.frame':  3 obs. of  8 variables: #>  $ Treated_Points:'data.frame':  51 obs. of  3 variables: l_treat$Dets_Table #>      iCode check_SkewKurt0.Pass check_SkewKurt0.Skew check_SkewKurt0.Kurt #> 1  Flights                FALSE             2.103287             4.508879 #> 2    Goods                FALSE             2.649973             8.266610 #> 3 Services                 TRUE             1.701085             2.375656 #>   winsorise.nwin check_SkewKurt1.Pass check_SkewKurt1.Skew check_SkewKurt1.Kurt #> 1              1                 TRUE             1.900658            3.3360647 #> 2              2                 TRUE             1.140608            0.1572047 #> 3             NA                   NA                   NA                   NA l_treat$Treated_Points #>    Flights Goods Services #> 1                         #> 2                         #> 3                         #> 4                         #> 5                         #> 6                         #> 7                         #> 8                         #> 9                         #> 10                        #> 11         winhi          #> 12                        #> 13                        #> 14                        #> 15                        #> 16                        #> 17                        #> 18                        #> 19                        #> 20                        #> 21                        #> 22                        #> 23                        #> 24                        #> 25                        #> 26                        #> 27                        #> 28                        #> 29                        #> 30   winhi                #> 31                        #> 32                        #> 33                        #> 34                        #> 35         winhi          #> 36                        #> 37                        #> 38                        #> 39                        #> 40                        #> 41                        #> 42                        #> 43                        #> 44                        #> 45                        #> 46                        #> 47                        #> 48                        #> 49                        #> 50                        #> 51"},{"path":"https://bluefoxr.github.io/COINr/articles/treat.html","id":"coins","dir":"Articles","previous_headings":"","what":"Coins","title":"Outlier Treatment","text":"Treating coins simple extension treating data frame. coin method simply extracts relevant data set data frame, passes data frame method. less, arguments present. begin building example coin, used examples .","code":"coin <- build_example_coin(up_to = \"new_coin\") #> iData checked and OK. #> iMeta checked and OK. #> Written data set to .$Data$Raw"},{"path":"https://bluefoxr.github.io/COINr/articles/treat.html","id":"default-treatment","dir":"Articles","previous_headings":"Coins","what":"Default treatment","title":"Outlier Treatment","text":"Treat() function can applied directly coin completely default options: indicator, Treat() function: Checks skew kurtosis using check_SkewKurt() function indicator fails test (returns FALSE), applies Winsorisation Checks skew kurtosis indicator still fails, applies log transformation. stage indicator passes skew kurtosis test, returned without treatment. run Treat() coin, also stores information returned f1, f2 f_pass coin: Notice one treatment function used , since Winsorisation (f1), indicators passed skew kurtosis test (f_pass). general, Treat() tries collect information returned functions calls. Details treatment individual points also stored .$Analysis$Treated$Treated_Points. Treat() function gives high degree control functions used treat test indicators, also possible specify different functions different indicators. Let’s begin though seeing can change specifications indicators, proceeding individual treatment. Unless indiv_specs specified (see later), procedure applied indicators. process specified global_specs argument. see use , easiest show default argument built treat() function: Notice six entries list: f1 string referring first treatment function f1_para list named arguments f1, excluding x (data treated) f2 f2_para analogous f1 f1_para second treatment function f_pass string referring function check outliers f_pass_para list named arguments f_pass, x (data checked) understand individual parameters , example f1_para, need look function called f1, winsorise() function: x numeric vector. na.rm Set TRUE remove NA values, otherwise returns NA. winmax Maximum number points Winsorise. Default 5. Set NULL limit. skew_thresh threshold absolute skewness (positive). Default 2.25. kurt_thresh threshold kurtosis. Default 3.5. force_win Logical: TRUE, forces winsorisation winmax (regardless skew/kurt). see parameters named list f1_para, can change maximum number points Winsorised, skew kurtosis thresholds, things. make adjustments, unless want redefine everything, don’t need specify entire list. example, want change maximum Winsorisation limit winmax, can just pass part list (notice still wrap parameter inside list): imposed much stricter Winsorisation limit (one point), can see now one indicator passed second treatment function f2, performed log transformation. , indicator passes skew kurtosis test. default, indicator satisfy f_pass applying f1, passed f2 original form - words output f1 passed f2, f2 applied instead f1, rather addition . want apply f2 top f1 set combine_treat = TRUE. case, f_pass satisfied f1 output f1 used input f2. defaults f1 f2 approach probably advisable Winsorisation log transform quite different approaches. However depending want , might useful.","code":"coin <- Treat(coin, dset = \"Raw\") #> Written data set to .$Data$Treated # summary of treatment for each indicator head(coin$Analysis$Treated$Dets_Table) #>     iCode check_SkewKurt0.Pass check_SkewKurt0.Skew check_SkewKurt0.Kurt #> 1     LPI                 TRUE           -0.3042681           -0.6567514 #> 2 Flights                FALSE            2.1032872            4.5088794 #> 3    Ship                 TRUE           -0.5756680           -0.6814795 #> 4    Bord                FALSE            2.1482360            5.7914905 #> 5    Elec                FALSE            2.2252736            5.7910268 #> 6     Gas                FALSE            2.8294486           10.3346494 #>   winsorise.nwin check_SkewKurt1.Pass check_SkewKurt1.Skew check_SkewKurt1.Kurt #> 1             NA                   NA                   NA                   NA #> 2              1                 TRUE             1.900658             3.336065 #> 3             NA                   NA                   NA                   NA #> 4              1                 TRUE             1.899211             4.346298 #> 5              1                 TRUE             1.717744             2.586062 #> 6              1                 TRUE             1.602518             1.525576 # default treatment for all cols specs_def <- list(f1 = \"winsorise\",                   f1_para = list(na.rm = TRUE,                                  winmax = 5,                                  skew_thresh = 2,                                  kurt_thresh = 3.5,                                  force_win = FALSE),                   f2 = \"log_CT\",                   f2_para = list(na.rm = TRUE),                   f_pass = \"check_SkewKurt\",                   f_pass_para = list(na.rm = TRUE,                                      skew_thresh = 2,                                      kurt_thresh = 3.5)) # treat with max winsorisation of 3 points coin <- Treat(coin, dset = \"Raw\", global_specs = list(f1_para = list(winmax = 1))) #> Written data set to .$Data$Treated #> (overwritten existing data set)  # see what happened coin$Analysis$Treated$Dets_Table |>   head(10) #>       iCode check_SkewKurt0.Pass check_SkewKurt0.Skew check_SkewKurt0.Kurt #> 1       LPI                 TRUE           -0.3042681           -0.6567514 #> 2   Flights                FALSE            2.1032872            4.5088794 #> 3      Ship                 TRUE           -0.5756680           -0.6814795 #> 4      Bord                FALSE            2.1482360            5.7914905 #> 5      Elec                FALSE            2.2252736            5.7910268 #> 6       Gas                FALSE            2.8294486           10.3346494 #> 7  ConSpeed                 TRUE            0.4622037            0.1873214 #> 8     Cov4G                 TRUE           -1.3725191            0.5419314 #> 9     Goods                FALSE            2.6499733            8.2666095 #> 10 Services                 TRUE            1.7010849            2.3756557 #>    winsorise.nwin check_SkewKurt1.Pass check_SkewKurt1.Skew #> 1              NA                   NA                   NA #> 2               1                 TRUE             1.900658 #> 3              NA                   NA                   NA #> 4               1                 TRUE             1.899211 #> 5               1                 TRUE             1.717744 #> 6               1                 TRUE             1.602518 #> 7              NA                   NA                   NA #> 8              NA                   NA                   NA #> 9               1                FALSE             2.469910 #> 10             NA                   NA                   NA #>    check_SkewKurt1.Kurt check_SkewKurt2.Pass check_SkewKurt2.Skew #> 1                    NA                   NA                   NA #> 2              3.336065                   NA                   NA #> 3                    NA                   NA                   NA #> 4              4.346298                   NA                   NA #> 5              2.586062                   NA                   NA #> 6              1.525576                   NA                   NA #> 7                    NA                   NA                   NA #> 8                    NA                   NA                   NA #> 9              7.087309                 TRUE           0.03104001 #> 10                   NA                   NA                   NA #>    check_SkewKurt2.Kurt #> 1                    NA #> 2                    NA #> 3                    NA #> 4                    NA #> 5                    NA #> 6                    NA #> 7                    NA #> 8                    NA #> 9            -0.8888965 #> 10                   NA"},{"path":"https://bluefoxr.github.io/COINr/articles/treat.html","id":"individual-treatment","dir":"Articles","previous_headings":"Coins","what":"Individual treatment","title":"Outlier Treatment","text":"global_specs specifies treatment methodology apply indicators. However, indiv_specs argument (specified), can used override treatment specified global_specs specific indicators. specified exactly way global_specs requires parameter list indicator individual specifications applied, wrapped inside one list. probably clearer using example. begin something simple, let’s say keep defaults indicators except one, change Winsorisation limit. set Winsorisation limit indicator “Flights” zero, force log-transformed. thing remember make sure list created correctly. indicator assign individual treatment must list - containing f1_para. f1_para list named parameter values f1. Finally, lists indicator wrapped single list pass indiv_specs. looks bit convoluted changing single parameter, gives high degree control data treatment performed. can now see happened “Flights”: Now see “Flights” didn’t pass first Winsorisation step (nothing happened ), passed log transform. , indicator passed skew kurtosis check. another example, may wish exclude indicators data treatment completely. , can set corresponding entries indiv_specs \"none\". case don’t pass list indicator. Now examine treatment table, find indicators excluded table, subjected treatment.","code":"# change individual specs for Flights indiv_specs <- list(   Flights = list(     f1_para = list(winmax = 0)   ) )  # re-run data treatment coin <- Treat(coin, dset = \"Raw\", indiv_specs = indiv_specs) #> Written data set to .$Data$Treated #> (overwritten existing data set) coin$Analysis$Treated$Dets_Table[   coin$Analysis$Treated$Dets_Table$iCode == \"Flights\",  ] #>     iCode check_SkewKurt0.Pass check_SkewKurt0.Skew check_SkewKurt0.Kurt #> 2 Flights                FALSE             2.103287             4.508879 #>   winsorise.nwin check_SkewKurt1.Pass check_SkewKurt1.Skew check_SkewKurt1.Kurt #> 2              0                FALSE             2.103287             4.508879 #>   check_SkewKurt2.Pass check_SkewKurt2.Skew check_SkewKurt2.Kurt #> 2                 TRUE          -0.09502644           -0.8305217 # change individual specs for two indicators indiv_specs <- list(   Flights = \"none\",   LPI = \"none\" )  # re-run data treatment coin <- Treat(coin, dset = \"Raw\", indiv_specs = indiv_specs) #> Written data set to .$Data$Treated #> (overwritten existing data set)"},{"path":"https://bluefoxr.github.io/COINr/articles/treat.html","id":"external-functions","dir":"Articles","previous_headings":"Coins","what":"External functions","title":"Outlier Treatment","text":"functions can passed Treat(), treating checking outliers. example, can pass outlier detection function ` performance package following code chunk run ‘performance’ package installed. see test outliers much stricter indicators pass test, even applying log transformation. Clearly, outlier defined can vary depend application.","code":"library(performance)  # the check_outliers function outputs a logical vector which flags specific points as outliers. # We need to wrap this to give a single TRUE/FALSE output, where FALSE means it doesn't pass, # i.e. there are outliers outlier_pass <- function(x){   # return FALSE if any outliers   !any(check_outliers(x)) }  # now call treat(), passing this function # we set f_pass_para to NULL to avoid passing default parameters to the new function coin <- Treat(coin, dset = \"Raw\",                global_specs = list(f_pass = \"outlier_pass\",                                     f_pass_para = NULL) ) #> Warning in proc_passing(passing, f_pass, 2): f_pass has returned NA. Returning #> untreated vector.  #> Warning in proc_passing(passing, f_pass, 2): f_pass has returned NA. Returning #> untreated vector.  #> Warning in proc_passing(passing, f_pass, 2): f_pass has returned NA. Returning #> untreated vector.  #> Warning in proc_passing(passing, f_pass, 2): f_pass has returned NA. Returning #> untreated vector. #> Warning in proc_passing(passing, f_pass, 0): f_pass has returned NA. Returning #> untreated vector. #> Warning in proc_passing(passing, f_pass, 2): f_pass has returned NA. Returning #> untreated vector. #> Warning in proc_passing(passing, f_pass, 0): f_pass has returned NA. Returning #> untreated vector.  #> Warning in proc_passing(passing, f_pass, 0): f_pass has returned NA. Returning #> untreated vector. #> Written data set to .$Data$Treated #> (overwritten existing data set)  # see what happened coin$Analysis$Treated$Dets_Table |>   head(10) #>       iCode outlier_pass0 winsorise.nwin outlier_pass1 outlier_pass2 #> 1       LPI          TRUE             NA            NA            NA #> 2   Flights         FALSE              1         FALSE          TRUE #> 3      Ship          TRUE             NA            NA            NA #> 4      Bord         FALSE              1         FALSE          TRUE #> 5      Elec         FALSE              1         FALSE          TRUE #> 6       Gas         FALSE              1         FALSE         FALSE #> 7  ConSpeed         FALSE              0         FALSE         FALSE #> 8     Cov4G         FALSE              0         FALSE         FALSE #> 9     Goods         FALSE              2         FALSE          TRUE #> 10 Services         FALSE              0         FALSE          TRUE"},{"path":"https://bluefoxr.github.io/COINr/articles/treat.html","id":"purses","dir":"Articles","previous_headings":"","what":"Purses","title":"Outlier Treatment","text":"purse method treat() fairly straightforward. takes almost arguments coin method, applies specifications coin. simply demonstrate example purse.","code":"# build example purse purse <- build_example_purse(up_to = \"new_coin\", quietly = TRUE)  # apply treatment to all coins in purse (default specs) purse <- Treat(purse, dset = \"Raw\") #> Written data set to .$Data$Treated #> Written data set to .$Data$Treated #> Written data set to .$Data$Treated #> Written data set to .$Data$Treated #> Written data set to .$Data$Treated"},{"path":"https://bluefoxr.github.io/COINr/articles/treat.html","id":"simplified-function","dir":"Articles","previous_headings":"","what":"Simplified function","title":"Outlier Treatment","text":"Treat() function flexible comes expense possibly fiddly syntax. don’t need level flexibility, consider using qTreat(), simplified wrapper Treat(). main features qTreat() : first treatment function f1 changed set winsorise(). winmax parameter, well skew kurtosis limits, available directly function arguments qTreat(). f_pass function changed always set check_SkewKurt(). can still choose f2 qTreat() function generic methods data frames, coins purses. , ’ll just demonstrate data frame. Now check results : can see case, Winsorsing one point enough bring “Flights” “Goods” within specified skew/kurtosis limits. Consequently, f2 invoked, uses log transform brought indicators within specified limits.","code":"# select three indicators df1 <- ASEM_iData[c(\"Flights\", \"Goods\", \"Services\")]  # treat data frame, changing winmax and skew/kurtosis limits l_treat <- qTreat(df1, winmax = 1, skew_thresh = 1.5, kurt_thresh = 3) l_treat$Dets_Table #>      iCode check_SkewKurt0.Pass check_SkewKurt0.Skew check_SkewKurt0.Kurt #> 1  Flights                FALSE             2.103287             4.508879 #> 2    Goods                FALSE             2.649973             8.266610 #> 3 Services                 TRUE             1.701085             2.375656 #>   winsorise.nwin check_SkewKurt1.Pass check_SkewKurt1.Skew check_SkewKurt1.Kurt #> 1              1                FALSE             1.900658             3.336065 #> 2              1                FALSE             2.469910             7.087309 #> 3             NA                   NA                   NA                   NA #>   check_SkewKurt2.Pass check_SkewKurt2.Skew check_SkewKurt2.Kurt #> 1                 TRUE          -0.09502644           -0.8305217 #> 2                 TRUE           0.03104001           -0.8888965 #> 3                   NA                   NA                   NA"},{"path":"https://bluefoxr.github.io/COINr/articles/v1.html","id":"why","dir":"Articles","previous_headings":"","what":"Why","title":"Changes from COINr v1.0.0","text":"just want know changed deal , skip section. want know things changed, read . short story found quite flaws package happy , given public domain. decided address flaws one giant revision, rather long series updates. ’ll explain points .","code":""},{"path":"https://bluefoxr.github.io/COINr/articles/v1.html","id":"robustness-and-efficiency","dir":"Articles","previous_headings":"Why","what":"Robustness and efficiency","title":"Changes from COINr v1.0.0","text":"COINr first CRAN package built (everyone say “aww”). process, learned lot package development, well principles programming general. However, since learned building package, especially first parts package wrote (retrospect) written well. example, although defined “COIN” class, didn’t define methods COIN. Much code written “functional” way, enough checks inputs outputs code. meant code robust patched, lot. made hard maintain, less robust, also slower user. consequence, decided re-write functions, many scratch, higher standard programming. also slimmed “COIN” class streamlined “coin” class.","code":""},{"path":"https://bluefoxr.github.io/COINr/articles/v1.html","id":"focus","dir":"Articles","previous_headings":"Why","what":"Focus","title":"Changes from COINr v1.0.0","text":"COINr package meant focus developing composite indicators. focus got lost point got carried away html plotly plots shiny apps. things, although nice, retrospect really useful package also difficult maintain bloat package. decided cut interactive plots apps, can still accessed COINr6 package conversion functions COINr COINr6 (see ).","code":""},{"path":"https://bluefoxr.github.io/COINr/articles/v1.html","id":"dependencies","dir":"Articles","previous_headings":"Why","what":"Dependencies","title":"Changes from COINr v1.0.0","text":"result first two points (inexperience plus straying track), COINr many dependencies, .e. packages installed install COINr. Although harm loading 10 20 packages performing data analysis R, can become problem building package every user packages installed. ever install several packages time R, probably run kind problem. Moreover, COINr dependent changes packages, makes maintaining difficult. meant practice, COINr always easy install. decided re-write package almost entirely base R, remove many dependencies possible.","code":""},{"path":"https://bluefoxr.github.io/COINr/articles/v1.html","id":"features-and-flexibility","dir":"Articles","previous_headings":"Why","what":"Features and flexibility","title":"Changes from COINr v1.0.0","text":"One thing missing COINr proper support panel data (time-dependent data). now mostly rectified introduction “purse” class. main “building” functions COINr also re-written generics, methods coins, data frames purses. Moreover many functions allow call functions, makes COINr much easier link packages.","code":""},{"path":"https://bluefoxr.github.io/COINr/articles/v1.html","id":"syntax","dir":"Articles","previous_headings":"Why","what":"Syntax","title":"Changes from COINr v1.0.0","text":"COINr syntax inconsistent. critical problem, since making big changes package decided take opportunity make syntax consistent possible. one-change won’t messed around !","code":""},{"path":[]},{"path":"https://bluefoxr.github.io/COINr/articles/v1.html","id":"function-names","dir":"Articles","previous_headings":"What’s changed?","what":"Function names","title":"Changes from COINr v1.0.0","text":"Many things changed. first thing probably notice syntax. anyway making syntax-breaking changes package, decided go , try make syntax consistent possible. means function names predictable: “building” functions start capital letter. Plot functions start plot_. Analysis functions mostly start get_. Functions generally lower case. hopefully makes package little easier use. notice calling old < v1.0 function name generate error, redirects new function name. hope although inconvenient, take long adapt new function names. functions, main logic behind arguments pretty similar. mentioned , ’m going change names ; one-thing.","code":""},{"path":"https://bluefoxr.github.io/COINr/articles/v1.html","id":"function-features","dir":"Articles","previous_headings":"What’s changed?","what":"Function features","title":"Changes from COINr v1.0.0","text":"second obvious change key functions changed syntax: re-written flexible robust. may seem annoying promise greater good. can’t describe changes , general functions made flexible: example Normalise() now can take normalising function, rather fixed set options. Outlier treatment also allows pass outlier detection treatment functions. sensitivity analysis function (now get_sensitivity()) now allows target part coin , just function arguments. general, core “building” functions now call lower-level functions makes easier hook COINr packages, example using sophisticated imputation aggregation methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/articles/v1.html","id":"new-coin-class-and-methods","dir":"Articles","previous_headings":"What’s changed?","what":"New “coin” class and methods","title":"Changes from COINr v1.0.0","text":"third related change perhaps obvious structure central object COINr, “COIN”, changed. object streamlined tidied, new S3 class called “coin” (difference new coin lower case). previously built COIN using older version COINr, work new version COINr! good news handy function called COIN_to_coin() converts older “COIN” class newer “coin” class. new “coin” class also comes number methods. main construction functions now methods least coins, data frames purses (see next sub-section), methods numerical vectors. contrast older COINr versions define formal methods. See Building coins vignette details.","code":""},{"path":"https://bluefoxr.github.io/COINr/articles/v1.html","id":"purses-and-panel-data","dir":"Articles","previous_headings":"What’s changed?","what":"Purses and panel data","title":"Changes from COINr v1.0.0","text":"new “purse” class gives formal way deal panel data (time indexed data). “purse” time-indexed collection coins. construction functions purse methods, working time data becomes straightforward. Purses purse methods still expanded COINr keep eye new features interested. See Building coins vignette details.","code":""},{"path":"https://bluefoxr.github.io/COINr/articles/v1.html","id":"documentation","dir":"Articles","previous_headings":"What’s changed?","what":"Documentation","title":"Changes from COINr v1.0.0","text":"next thing documentation completely re-written, loads new vignettes! even better, COINr now lives web-page built “pkgdown” can find , documentation easily accessible. function well-documented. Hurray.","code":""},{"path":"https://bluefoxr.github.io/COINr/articles/v1.html","id":"removed-functions","dir":"Articles","previous_headings":"What’s changed?","what":"Removed functions","title":"Changes from COINr v1.0.0","text":"last obvious change functions disappeared! gone? may notice functions generated interactive plots (often called iPlot* previous versions COINr), plus shiny apps, vanished. reason , explained , tools distracting main point package much effort maintain. Moreover, even though interactive plots great outputting html documents, pdf word hassle quite unpredictable rendered. good news replaced interactive plots static versions, plot_framework(), plot_scatter(), can still plotting previous versions, predictable (usable) outputs.","code":""},{"path":"https://bluefoxr.github.io/COINr/articles/v1.html","id":"coinr6-i-want-out","dir":"Articles","previous_headings":"","what":"COINr6: I want out!","title":"Changes from COINr v1.0.0","text":"level upheaval bit much, ’d like go back things , two options. easiest “roll-back” option install “COINr6” package. COINr6 latest version COINr major syntax changes. means wrote scripts markdown files old syntax, instead loading COINr, install load COINr6, run . advantage can COINr (new syntax) COINr6 (old syntax) installed time. install COINr6 install GitHub. First, make sure “remotes” package: Now install COINr6 GitHub repo: ’s . continue lightly maintain package (e.g. fixing critical bugs arise) general main focus new COINr version. Another way roll back COINr older version use devtools::install_version(), can specify version number package install. might bit fiddly, personally recommend rather install COINr6. want, check article info installing older package versions. COINr COINr6 conversion functions: COINr COIN_to_coin() function allows conversion older “COIN” class newer “coin” class. COINr6 also now reverse function, coin_to_COIN(), allows access old interactive plotting COINr6 liked , well apps. Note conversion comes limitations directions, discussed functions’ documentation.","code":"# install remotes package if you don't have it install.packages(\"remotes\") remotes::install_github(\"bluefoxr/COINr6\")"},{"path":"https://bluefoxr.github.io/COINr/articles/v1.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Changes from COINr v1.0.0","text":"summary, COINr changed quite lot, Good Thing. want roll back, old new syntax side side, install COINr6. usual, feedback, spot bugs suggestions, email open issue GitHub repo.","code":""},{"path":"https://bluefoxr.github.io/COINr/articles/visualisation.html","id":"framework","dir":"Articles","previous_headings":"","what":"Framework","title":"Visualisation","text":"Upon building coin (see Building coins vignette), good way begin check structure index. can done visually plot_framework() function, generates sunburst plot index structure.  sunburst plot useful things. First, shows structure COINr understood. allows check whether structure agrees expectations. Second, shows effective weight indicator. Effective weights final weights indicator index, result indicator weights, parent aggregate weights, structure index. can reveal indicators implicitly weighted others, e.g. less indicators aggregation groups. effective weights can also accessed directly using get_eff_weights() function. Finally, can good way communicate index structure people. plot_framework() function options colouring. , don’t like sunburst plots, another possibility set type = \"stack\":  gives linear representation index. also set colouring level pillar level (see plot_framework() documentation). Note probably adjust plot size get good figure.","code":"library(COINr)  # assemble example COIN coin <- build_example_coin(up_to = \"new_coin\")  # plot framework plot_framework(coin) plot_framework(coin, type = \"stack\", colour_level = 2)"},{"path":"https://bluefoxr.github.io/COINr/articles/visualisation.html","id":"statistical-plots","dir":"Articles","previous_headings":"","what":"Statistical plots","title":"Visualisation","text":"explore options statistical plots, namely distribution correlation plots.","code":""},{"path":"https://bluefoxr.github.io/COINr/articles/visualisation.html","id":"distributions","dir":"Articles","previous_headings":"Statistical plots","what":"Distributions","title":"Visualisation","text":"distribution variable, well groups variables, coin can visualised quickly using plot_dist() function. simplest case plot distribution single indicator.  , usual, specify data set (dset) indicator (iCodes) plot. data selection plot_dist() powered get_data(), means can plot subsets indicator units. Commonly, distribution plots, might interesting plot distributions indicators belonging particular group - let’s plot indicator distributions “P2P” pillar:  plots eight indicators belonging group, also specified plot “violin-dot” plots. Optionally, data can also normalised plotting using normalise argument. See plot_dist() details options. similar function, plot_dot() also plots single indicator using dots rather used highlighting individual units rather statistical plot distribution. See Dot plots .","code":"plot_dist(coin, dset = \"Raw\", iCodes = \"CO2\") plot_dist(coin, dset = \"Raw\", iCodes = \"P2P\", Level = 1, type = \"Violindot\")"},{"path":"https://bluefoxr.github.io/COINr/articles/visualisation.html","id":"correlations","dir":"Articles","previous_headings":"Statistical plots","what":"Correlations","title":"Visualisation","text":"Correlation plots useful understanding relationships indicators. COINr’s plot_corr() function flexible tool plotting correlations almost variables coin, visualising according structure index. One thing keep mind outset directionality indicators: negative probably reflected correlation plots, unless normalise data first. mind, build full example coin including normalisation step plot correlations: Now let’s basic plot correlations within group:  Notice syntax: specify iCodes list , specify level get data . case specified want indicators (level 1) “Physical” group correlated . usual arguments passed get_data(). reason iCodes specified list can pass two character vectors , possibly different levels:  point can select set indicators aggregates, correlate set. can also pass arguments get_data() groupings unit selection, needed. useful features include possibility correlate set indicators parent groups - done setting withparent = \"family\". also set discrete colour scheme using flagcolours = TRUE.  Notice boxes drawn around aggregation groups case. final example, show boxes groups can used show subsets correlation matrices. Typically interesting correlations within aggregation groups weak correlations cause less information transferred aggregate. can show -group correlations using grouplev argument, takes aggregation level group indicators :  can also done box_level argument, can used additionally highlight groupings different levels:  case also disabled correlation values . options include using different types correlations, changing colours. details, see help page plot_corr(). also worth mentioning underneath, plot_corr() calls get_corr(), interested correlation matrices rather plots, use .","code":"coin <- build_example_coin(quietly = TRUE) plot_corr(coin, dset = \"Normalised\", iCodes = list(\"Physical\"), Levels = 1) plot_corr(coin, dset = \"Aggregated\",           iCodes = list(c(\"Flights\", \"LPI\"), c(\"Physical\", \"P2P\")), Levels = c(1,2)) plot_corr(coin, dset = \"Aggregated\", iCodes = list(\"Sust\"), withparent = \"family\", flagcolours = T) plot_corr(coin, dset = \"Normalised\", iCodes = list(\"Sust\"),           grouplev = 2, flagcolours = T) plot_corr(coin, dset = \"Normalised\", grouplev = 3, box_level = 2, showvals = F)"},{"path":"https://bluefoxr.github.io/COINr/articles/visualisation.html","id":"indicator-plots","dir":"Articles","previous_headings":"","what":"Indicator plots","title":"Visualisation","text":"section examine options visualising individual indicators, particular aim seeing different units compare one another.","code":""},{"path":"https://bluefoxr.github.io/COINr/articles/visualisation.html","id":"bar","dir":"Articles","previous_headings":"Indicator plots","what":"Bar","title":"Visualisation","text":"simple way look set scores indicator bar chart:  plot_bar() function returns bar chart single indicator, sorted high low values. can also colour grouping variables found coin  also set axes_label = \"iName\" output indicator names rather codes. Several options available, including log scale, colouring options. just show one thing, possibility break bars underlying component scores. works plotting aggregate score (.e. level 2 higher), rather indicator, looks underlying scores used calculate aggregate score. example, can see Sustainability scores break three underlying components, country:","code":"plot_bar(coin, dset = \"Raw\", iCode = \"CO2\") plot_bar(coin, dset = \"Raw\", iCode = \"CO2\", by_group = \"GDPpc_group\", axes_label = \"iName\") plot_bar(coin, dset = \"Aggregated\", iCode = \"Sust\", stack_children = TRUE)"},{"path":"https://bluefoxr.github.io/COINr/articles/visualisation.html","id":"dot-plots","dir":"Articles","previous_headings":"Indicator plots","what":"Dot plots","title":"Visualisation","text":"COINr’s dot plot pretty similar distribution plot intended showing position particular unit units relative peers. means make useful, also select one units highlight.  plotted “LPI” indicator highlighted Spain Japan. can also add statistic indicator, median:  also labelled statistic using stat_label, labelled x-axis using indicator name unit taken indicator metadata found within coin.","code":"plot_dot(coin, dset = \"Raw\", iCode = \"LPI\", usel = c(\"JPN\", \"ESP\")) plot_dot(coin, dset = \"Raw\", iCode = \"LPI\", usel = c(\"JPN\", \"ESP\"), add_stat = \"median\",          stat_label = \"Median\", plabel = \"iName+unit\")"},{"path":"https://bluefoxr.github.io/COINr/articles/visualisation.html","id":"scatter","dir":"Articles","previous_headings":"Indicator plots","what":"Scatter","title":"Visualisation","text":"plot_scatter() function gives quick way plot scatter plots indicators variables coin.  Variables can come different data sets (including unit metadata), can also colour groups:  also converted x-axis log scale since population highly skewed. options can found help page plot_scatter(), plots can modified using ggplot2 commands.","code":"plot_scatter(coin, dsets = \"Raw\", iCodes = c(\"Goods\", \"Services\"), point_label = \"uCode\") plot_scatter(coin, dsets = c(\"uMeta\", \"Raw\"), iCodes = c(\"Population\", \"Flights\"),              by_group = \"GDPpc_group\", log_scale = c(TRUE, FALSE))"},{"path":"https://bluefoxr.github.io/COINr/articles/weights.html","id":"manual-re-weighting","dir":"Articles","previous_headings":"","what":"Manual re-weighting","title":"Weights","text":"change weights, one way simply go back original iMeta data frame used build coin, edit . don’t want , can also create new weight set. simply involves: Making copy existing set weights Changing weights copy Putting new set weights coin example, want change weighting “Conn” “Sust” sub-indices, : Now, actually use weights aggregation, direct Aggregate() function find . weights stored “Weights” sub-list done , easy pass name weights Aggregate(): Alternatively, can pass data frame Aggregate() don’t want store coin reason: altering weights may wish compare outcomes alternative sets weights. See Adjustments comparisons vignette details .","code":"# copy original weights w1 <- coin$Meta$Weights$Original  # modify weights of Conn and Sust to 0.3 and 0.7 respectively w1$Weight[w1$iCode == \"Conn\"] <- 0.3 w1$Weight[w1$iCode == \"Sust\"] <- 0.7  # put weight set back with new name coin$Meta$Weights$MyFavouriteWeights <- w1 coin <- Aggregate(coin, dset = \"Normalised\", w = \"MyFavouriteWeights\") #> Written data set to .$Data$Aggregated coin <- Aggregate(coin, dset = \"Normalised\", w = w1) #> Written data set to .$Data$Aggregated #> (overwritten existing data set)"},{"path":"https://bluefoxr.github.io/COINr/articles/weights.html","id":"effective-weights","dir":"Articles","previous_headings":"","what":"Effective weights","title":"Weights","text":"COINr statistical tools adjusting weights explained next sections. , also interesting look “effective weights”. index level, weighting indicator due just weight, also weights aggregation involved , plus number indicators/aggregates group. means final weighting, index level, indicator, slightly complex understand. COINr built function get “effective weights”: “EffWeight” column effective weight component highest level aggregation (index). weights sum 1 level: effective weights can also viewed using plot_framework() function, angle indicator/aggregate proportional effective weight:","code":"w_eff <- get_eff_weights(coin, out2 = \"df\")  head(w_eff) #>       iCode Level Weight  EffWeight #> 9     Goods     1      1 0.02000000 #> 10 Services     1      1 0.02000000 #> 11      FDI     1      1 0.02000000 #> 12   PRemit     1      1 0.02000000 #> 13  ForPort     1      1 0.02000000 #> 31    Renew     1      1 0.03333333 # get sum of effective weights for each level tapply(w_eff$EffWeight, w_eff$Level, sum) #> 1 2 3 4  #> 1 1 1 1 plot_framework(coin)"},{"path":"https://bluefoxr.github.io/COINr/articles/weights.html","id":"pca-weights","dir":"Articles","previous_headings":"","what":"PCA weights","title":"Weights","text":"get_PCA() function can used return set weights maximises explained variance within aggregation groups. function already discussed Analysis vignette, focus weighting aspect . First , PCA weights come number caveats need mentioned (also detailed get_PCA() function help). First, constitutes “PCA weights” composite indicators well-defined. COINr, simple option adopted. , loadings first principal component taken weights. logic loadings maximise explained variance - implication use weights aggregation, maximise explained variance hence information passed indicators aggregate value. nice property composite indicator, one aims represent many indicators single composite. See discussion . . weights result PCA number downsides. First, can often include negative weights can hard justify. Also PCA may arbitrarily flip axes (since variance point view direction important). quest maximum variance, PCA also weight strongest-correlating indicators highest, means indicators may neglected. short, often results unbalanced set weights. Moreover, PCA can performed one level time. result PCA weights used carefully. said, let’s see get PCA weights. simply run get_PCA() function out2 = \"coin\" specifying name weights use. , calculate PCA weights level 2, .e. first level aggregation. , need use “Aggregated” data set PCA needs level 2 scores work : stores new set weights Weights sub-list, name gave . Let’s look resulting weights. weights changed level 2, look : shows nature PCA weights: actually case severe Social dimension negatively weighted negatively correlated components group. case, weights can sometimes “strange” look may may problem. explained , actually use weights can call calling Aggregate().","code":"coin <- get_PCA(coin, dset = \"Aggregated\", Level =  2,                 weights_to = \"PCAwtsLev2\", out2 = \"coin\") #> Weights written to .$Meta$Weights$PCAwtsLev2 coin$Meta$Weights$PCAwtsLev2[coin$Meta$Weights$PCAwtsLev2$Level == 2, ] #>        iCode Level     Weight #> 50  Physical     2  0.5117970 #> 51  ConEcFin     2  0.3049926 #> 52 Political     2  0.3547671 #> 53    Instit     2  0.5081540 #> 54       P2P     2  0.5108455 #> 55   Environ     2  0.6513188 #> 56    Social     2 -0.7443677 #> 57  SusEcFin     2  0.1473108"},{"path":"https://bluefoxr.github.io/COINr/articles/weights.html","id":"optimised-weights","dir":"Articles","previous_headings":"","what":"Optimised weights","title":"Weights","text":"PCA based linear algebra, another way statistically weight indicators via numerical optimisation. Optimisation numerical search method finds set values maximise minimise criterion, called “objective function”. composite indicators, different objectives conceivable. get_opt_weights() function gives two options respect - either look set weights “balances” indicators, set maximises information transferred (see ). done looking correlations indicators index. needs little explanation. weights chosen match opinions experts, indeed opinion, catch obvious. Put simply, weights directly translate importance. understand , must first define “importance” means. Actually one way look , one possible measure use (possibly nonlinear) correlation indicator overall index. correlation high, indicator well-reflected index scores, vice versa. accept definition importance, ’s important realise correlation affected weights attached indicator, also correlations indicators. means correlations must accounted choosing weights agree budgets assigned group experts. fact, possible reverse-engineer weights either analytically using linear solution numerically using nonlinear solution. former method far quicker nonlinear optimisation, applicable case single level aggregation, arithmetic mean, using linear correlation measure. Therefore COINr, second method used. Let’s now see use get_opt_weights() practice. Like PCA weights, can optimise one level time. also need say kind optimisation perform. , search set weights results equal influence sub-indexes (level 3) index. need coin aggregated data set already present, function needs know kind aggregation method using. Just , first check correlations look like level 3 index, using equal weighting: shows correlations similar . Now let’s run optimisation: can view optimised weights (weights change level 3) see successful balancing correlations, let’s re-aggregate using weights check correlations. shows indeed correlations now well-balanced - optimisation worked. explore features get_opt_weights() , especially optimisations can take significant amount CPU time. However, main options include specifying vector “importances” rather aiming equal importance, optimising maximise total correlation, rather balancing. also numerical optimisation parameters help optimisation doesn’t converge.","code":"# build example coin coin <- build_example_coin(quietly = TRUE)  # check correlations between level 3 and index get_corr(coin, dset = \"Aggregated\", Levels = c(3, 4)) #>    Var1 Var2 Correlation #> 1 Index Conn   0.9397805 #> 2 Index Sust   0.8382873 # optimise weights at level 3 coin <- get_opt_weights(coin, itarg = \"equal\", dset = \"Aggregated\",                         Level = 3, weights_to = \"OptLev3\", out2 = \"coin\") #> iterating... objective function = -7.11287670895252 #> iterating... objective function = -6.75731482891423 #> iterating... objective function = -7.5563175412706 #> iterating... objective function = -8.21181051402935 #> iterating... objective function = -10.0802172796095 #> iterating... objective function = -13.3043247136273 #> iterating... objective function = -8.7011048855954 #> iterating... objective function = -7.93721550859392 #> iterating... objective function = -9.92111795779074 #> iterating... objective function = -8.57337082557942 #> iterating... objective function = -13.0490317878554 #> iterating... objective function = -10.1205749624737 #> iterating... objective function = -11.4698196057753 #> iterating... objective function = -11.5046209642509 #> iterating... objective function = -12.938292451273 #> Optimisation successful! #> Optimised weights written to .$Meta$Weights$OptLev3 coin$Meta$Weights$OptLev3[coin$Meta$Weights$OptLev3$Level == 3, ] #>    iCode Level    Weight #> 58  Conn     3 0.3902439 #> 59  Sust     3 0.6097561 # re-aggregate coin <- Aggregate(coin, dset = \"Normalised\", w = \"OptLev3\") #> Written data set to .$Data$Aggregated #> (overwritten existing data set)  # check correlations between level 3 and index get_corr(coin, dset = \"Aggregated\", Levels = c(3, 4)) #>    Var1 Var2 Correlation #> 1 Index Conn   0.8971336 #> 2 Index Sust   0.8925119"},{"path":"https://bluefoxr.github.io/COINr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"William Becker. Author, maintainer, copyright holder.","code":""},{"path":"https://bluefoxr.github.io/COINr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Becker et al., (2022). COINr: R package developing composite indicators. Journal Open Source Software, 7(78), 4567, https://doi.org/10.21105/joss.04567","code":"@Article{,   title = {COINr: An R package for developing composite indicators},   author = {William Becker and Giulio Caperna and Maria {Del Sorbo} and Hedvig Norlen and Eleni Papadimitriou and Michaela Saisana},   journal = {Journal of Open Source Software},   year = {2022},   volume = {7},   number = {78},   pages = {4567},   url = {https://doi.org/10.21105/joss.04567},   doi = {10.21105/joss.04567},   publisher = {The Open Journal}, }"},{"path":"https://bluefoxr.github.io/COINr/index.html","id":"coinr-","dir":"","previous_headings":"","what":"Composite Indicator Construction and Analysis","title":"Composite Indicator Construction and Analysis","text":"Full documentation available COINr’s website COINr high-level R package first fully-flexible development analysis environment composite indicators scoreboards. main features can summarised features building, features analysis features visualisation presentation. Building features: Flexible fast development composite indicators limits aggregation levels, numbers indicators, highly flexible set methodological choices. Denomination indicators Screening units data requirements Imputation missing data, variety methods Data treatment using Winsorisation nonlinear transformations Normalisation (scaling) using variety methods Weighting using either manual weighting, PCA weights correlation-optimised weights. Aggregation indicators using variety methods can different aggregation level. Analysis features: Detailed indicator statistics, data availability within aggregation groups Multivariate analysis, including quick functions PCA, detailed correlation analysis visualisation Easy “” analysis - quickly checking effects adding removing indicators, changing weights, methodological variations Full global uncertainty sensitivity analysis can check impacts uncertainties weighting many methodological choices Visualisation presentation: Statistical plots indicators - histograms, violin plots, dot plots, scatter plots Bar charts, stacked bar charts tables presenting indicator data making comparisons units Correlation plots visualising correlations indicators aggregation levels COINr also allows fast import COIN Tool fast export Excel.","code":""},{"path":"https://bluefoxr.github.io/COINr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Composite Indicator Construction and Analysis","text":"COINr CRAN can installed running: development version, may slightly --date, can installed GitHub: directly install package Github, without steps. may asked update packages. might strictly necessary, can also try skipping step.","code":"# Install released version from CRAN install.packages(\"COINr\") # Install development version from GitHub devtools::install_github(\"bluefoxr/COINr\")"},{"path":"https://bluefoxr.github.io/COINr/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Composite Indicator Construction and Analysis","text":"COINr needs little reading learning understand properly. done , can powerful developing composite indicators. good place get started COINr’s “Overview” vignette. Try vignette(\"overview\"). thorough documentation available COINr’s website (developed using pkgdown). contains package documentation easy--navigate format. documentation available also available browsing COINr vignettes: see vignette(package = \"COINr\").","code":""},{"path":"https://bluefoxr.github.io/COINr/index.html","id":"recent-updates","dir":"","previous_headings":"","what":"Recent updates","title":"Composite Indicator Construction and Analysis","text":"COINr recently updated v1.0, skipping version numbers. brought many new features, discarded features, less dependencies robust underlying code. syntax also changed make package consistent. See vignette(\"v1\") learn changes using COINr prior v1.0. COINr documentation previously contained online book. still available, although principles composite indicators still valid, code refers strictly COINr < v.1.0. prefer roll back old COINr, can still install separate package called “COINr6”. available GitHub:","code":"remotes::install_github(\"bluefoxr/COINr6\")"},{"path":"https://bluefoxr.github.io/COINr/index.html","id":"help-and-issues","dir":"","previous_headings":"","what":"Help and issues","title":"Composite Indicator Construction and Analysis","text":"general help COINr, best place look package’s documentation available either via command line (vignette(package = \"COINr\")) checking individual function documentation (?function_name). documentation also conveniently available online COINr’s website. find problems package, including bugs suggestions, either open GitHub issue , else contact email. Finally, contributions package welcome. done cloning repo, making modifications, opening pull request. also contact advance discuss changes extensions. changes (especially new functions) accompanied unit tests, existing tests run without errors warnings. , run:","code":"devtools::test()"},{"path":"https://bluefoxr.github.io/COINr/index.html","id":"citing-coinr","dir":"","previous_headings":"","what":"Citing COINr","title":"Composite Indicator Construction and Analysis","text":"found COINr helpful, grateful cite package. COINr citable paper Journal Open Source Software can find (citation information). R can also generate citation info using citation(package = \"COINr\"), see info COINr web page.","code":""},{"path":"https://bluefoxr.github.io/COINr/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Composite Indicator Construction and Analysis","text":"COINr initially developed contract European Commission’s Joint Research Centre enabled package get ground. Since almost completely rewritten package significantly improved extended meet needs projects, time.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/ASEM_COIN.html","id":null,"dir":"Reference","previous_headings":"","what":"ASEM COIN (COINr < v1.0) — ASEM_COIN","title":"ASEM COIN (COINr < v1.0) — ASEM_COIN","text":"\"old format\" \"COIN\" object stored testing purposes. generated using COINr6 package (available GitHub) using COINr6::build_ASEM()","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/ASEM_COIN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ASEM COIN (COINr < v1.0) — ASEM_COIN","text":"","code":"ASEM_COIN"},{"path":"https://bluefoxr.github.io/COINr/reference/ASEM_COIN.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ASEM COIN (COINr < v1.0) — ASEM_COIN","text":"\"COIN\" class object","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/ASEM_COIN.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ASEM COIN (COINr < v1.0) — ASEM_COIN","text":"https://github.com/bluefoxr/COINr6","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/ASEM_iData.html","id":null,"dir":"Reference","previous_headings":"","what":"ASEM raw indicator data — ASEM_iData","title":"ASEM raw indicator data — ASEM_iData","text":"data set containing raw values indicators 51 countries, groups denominators. See ASEM Portal information detailed description indicator. See also vignette(\"coins\") format data.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/ASEM_iData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ASEM raw indicator data — ASEM_iData","text":"","code":"ASEM_iData"},{"path":"https://bluefoxr.github.io/COINr/reference/ASEM_iData.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ASEM raw indicator data — ASEM_iData","text":"data frame 51 rows 60 variables.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/ASEM_iData.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ASEM raw indicator data — ASEM_iData","text":"https://composite-indicators.jrc.ec.europa.eu/asem-sustainable-connectivity/repository","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/ASEM_iData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ASEM raw indicator data — ASEM_iData","text":"data set new v1.0 format.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/ASEM_iData_p.html","id":null,"dir":"Reference","previous_headings":"","what":"ASEM raw panel data — ASEM_iData_p","title":"ASEM raw panel data — ASEM_iData_p","text":"artificially-generated set panel data (multiple observations indicators time) included build example \"purse\" class, .e. build composite indicators time. eventually replaced better example, .e. real data set.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/ASEM_iData_p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ASEM raw panel data — ASEM_iData_p","text":"","code":"ASEM_iData_p"},{"path":"https://bluefoxr.github.io/COINr/reference/ASEM_iData_p.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ASEM raw panel data — ASEM_iData_p","text":"data frame 255 rows 60 variables.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/ASEM_iData_p.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ASEM raw panel data — ASEM_iData_p","text":"https://composite-indicators.jrc.ec.europa.eu/asem-sustainable-connectivity/repository","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/ASEM_iData_p.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ASEM raw panel data — ASEM_iData_p","text":"data set new v1.0 format.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/ASEM_iMeta.html","id":null,"dir":"Reference","previous_headings":"","what":"ASEM indicator metadata — ASEM_iMeta","title":"ASEM indicator metadata — ASEM_iMeta","text":"contains metadata ASEM indicators, including names, weights, directions, etc. See ASEM Portal information detailed description indicator. See also vignette(\"coins\") format data.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/ASEM_iMeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ASEM indicator metadata — ASEM_iMeta","text":"","code":"ASEM_iMeta"},{"path":"https://bluefoxr.github.io/COINr/reference/ASEM_iMeta.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ASEM indicator metadata — ASEM_iMeta","text":"data frame 68 rows 9 variables","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/ASEM_iMeta.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ASEM indicator metadata — ASEM_iMeta","text":"https://bluefoxr.github.io/COINrDoc/coins--currency--coinr.html#aggregation-metadata","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/ASEM_iMeta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ASEM indicator metadata — ASEM_iMeta","text":"data set new v1.0 format.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Aggregate.coin.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate indicators — Aggregate.coin","title":"Aggregate indicators — Aggregate.coin","text":"Aggregates named data set specified dset using aggregation function f_ag, weights w, optional function parameters f_ag_para. Note COINr number aggregation functions built , form a_*(), e.g. a_amean(), a_gmean() friends.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Aggregate.coin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate indicators — Aggregate.coin","text":"","code":"# S3 method for coin Aggregate(   x,   dset,   f_ag = NULL,   w = NULL,   f_ag_para = NULL,   dat_thresh = NULL,   by_df = FALSE,   out2 = \"coin\",   write_to = NULL,   ... )"},{"path":"https://bluefoxr.github.io/COINr/reference/Aggregate.coin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate indicators — Aggregate.coin","text":"x coin class object. dset name data set apply function , accessible .$Data. f_ag name aggregation function, string. can either single string naming function use aggregation levels, else character vector function names length n-1, n number levels index structure. latter case, different aggregation function may used level index: first vector used aggregate Level 1 Level 2, second Level 2 Level 3, . w optional data frame weights. f_ag require accept weights, set \"none\". f_ag_para Optional parameters pass f_ag, x w. f_ag, can specified different parameters aggregation level specifying nested list length n-1. dat_thresh optional data availability threshold, specified number 0 1. row within aggregation group data availability lower threshold, aggregated value row NA. Data availability, row x_row defined sum(!.na(x_row))/length(x_row), .e. fraction non-NA values. by_df Controls whether send numeric vector f_ag (FALSE, default) data frame (TRUE) - see details. out2 Either \"coin\" (default) return updated coin \"df\" output aggregated data set. write_to specified, writes aggregated data .$Data[[write_to]]. Default write_to = \"Aggregated\". ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Aggregate.coin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate indicators — Aggregate.coin","text":"updated coin aggregated data set added .$Data[[write_to]] out2 = \"coin\", else out2 = \"df\" outputs aggregated data set data frame.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Aggregate.coin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregate indicators — Aggregate.coin","text":"Aggregation performed row-wise using function f_ag, row x_row, output f_ag(x_row, f_ag_para), whole data frame, outputs numeric vector. data frame x must contain numeric columns. function f_ag must supplied string, e.g. \"a_amean\", must take minimum input x either numeric vector (by_df = FALSE), data frame (by_df = TRUE). former case f_ag return single numeric value (.e. result aggregating x), latter case numeric vector (result aggregating whole data frame one go). f_ag can optionally parameters, e.g. weights, specified list f_ag_para. Note COINr number aggregation functions built , form a_*(), e.g. a_amean(), a_gmean() friends. see list browse COINr functions alphabetically type a_ R Studio console press tab key (loading COINr). Optionally, data availability threshold can assigned aggregated value return NA (see dat_thresh argument). by_df = TRUE, however ignored aggregation done individual rows. Note complex constraints built f_ag needed.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Aggregate.coin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate indicators — Aggregate.coin","text":"","code":"# build example up to normalised data set coin <- build_example_coin(up_to = \"Normalise\") #> iData checked and OK. #> iMeta checked and OK. #> Written data set to .$Data$Raw #> Written data set to .$Data$Denominated #> Written data set to .$Data$Imputed #> Written data set to .$Data$Screened #> Written data set to .$Data$Treated #> Written data set to .$Data$Normalised  # aggregate normalised data set coin <- Aggregate(coin, dset = \"Normalised\") #> Written data set to .$Data$Aggregated"},{"path":"https://bluefoxr.github.io/COINr/reference/Aggregate.data.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate data frame — Aggregate.data.frame","title":"Aggregate data frame — Aggregate.data.frame","text":"Aggregates data frame single column using specified function. Note COINr number aggregation functions built , form a_*(), e.g. a_amean(), a_gmean() friends.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Aggregate.data.frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate data frame — Aggregate.data.frame","text":"","code":"# S3 method for data.frame Aggregate(   x,   f_ag = NULL,   f_ag_para = NULL,   dat_thresh = NULL,   by_df = FALSE,   ... )"},{"path":"https://bluefoxr.github.io/COINr/reference/Aggregate.data.frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate data frame — Aggregate.data.frame","text":"x Data frame aggregated f_ag name aggregation function, string. f_ag_para additional parameters pass f_ag, named list. dat_thresh optional data availability threshold, specified number 0 1. row x data availability lower threshold, aggregated value row NA. Data availability, row x_row defined sum(!.na(x_row))/length(x_row), .e. fraction non-NA values. by_df Controls whether send numeric vector f_ag (FALSE, default) data frame (TRUE) - see details. ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Aggregate.data.frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate data frame — Aggregate.data.frame","text":"numeric vector","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Aggregate.data.frame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregate data frame — Aggregate.data.frame","text":"Aggregation performed row-wise using function f_ag, row x_row, output f_ag(x_row, f_ag_para), whole data frame, outputs numeric vector. data frame x must contain numeric columns. function f_ag must supplied string, e.g. \"a_amean\", must take minimum input x either numeric vector (by_df = FALSE), data frame (by_df = TRUE). former case f_ag return single numeric value (.e. result aggregating x), latter case numeric vector (result aggregating whole data frame one go). f_ag can optionally parameters, e.g. weights, specified list f_ag_para. Note COINr number aggregation functions built , form a_*(), e.g. a_amean(), a_gmean() friends. see list browse COINr functions alphabetically type a_ R Studio console press tab key (loading COINr). Optionally, data availability threshold can assigned aggregated value return NA (see dat_thresh argument). by_df = TRUE, however ignored aggregation done individual rows. Note complex constraints built f_ag needed.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Aggregate.data.frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate data frame — Aggregate.data.frame","text":"","code":"# get some indicator data - take a few columns from built in data set X <- ASEM_iData[12:15]  # normalise to avoid zeros - min max between 1 and 100 X <- Normalise(X,                global_specs = list(f_n = \"n_minmax\",                                     f_n_para = list(l_u = c(1,100))))  # aggregate using harmonic mean, with some weights y <- Aggregate(X, f_ag = \"a_hmean\", f_ag_para = list(w = c(1, 1, 2, 1)))"},{"path":"https://bluefoxr.github.io/COINr/reference/Aggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate data — Aggregate","title":"Aggregate data — Aggregate","text":"Methods aggregating numeric vectors, data frames, coins purses. See individual method documentation details:","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Aggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate data — Aggregate","text":"","code":"Aggregate(x, ...)"},{"path":"https://bluefoxr.github.io/COINr/reference/Aggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate data — Aggregate","text":"x Object aggregated ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Aggregate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate data — Aggregate","text":"object similar input","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Aggregate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregate data — Aggregate","text":"Aggregate.data.frame() Aggregate.coin() Aggregate.purse()","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Aggregate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate data — Aggregate","text":"","code":"# see individual method documentation"},{"path":"https://bluefoxr.github.io/COINr/reference/Aggregate.purse.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate indicators — Aggregate.purse","title":"Aggregate indicators — Aggregate.purse","text":"Aggregates indicators following structure specified iMeta, coin inside purse. See Aggregate.coin(), applied coin, information","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Aggregate.purse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate indicators — Aggregate.purse","text":"","code":"# S3 method for purse Aggregate(   x,   dset,   f_ag = NULL,   w = NULL,   f_ag_para = NULL,   dat_thresh = NULL,   write_to = NULL,   ... )"},{"path":"https://bluefoxr.github.io/COINr/reference/Aggregate.purse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate indicators — Aggregate.purse","text":"x purse-class object dset name data set apply function , accessible .$Data. f_ag name aggregation function, string. can either single string naming function use aggregation levels, else character vector function names length n-1, n number levels index structure. latter case, different aggregation function may used level index: first vector used aggregate Level 1 Level 2, second Level 2 Level 3, . w optional data frame weights. f_ag require accept weights, set \"none\". f_ag_para Optional parameters pass f_ag, x w. f_ag, can specified different parameters aggregation level specifying nested list length n-1. dat_thresh optional data availability threshold, specified number 0 1. row within aggregation group data availability lower threshold, aggregated value row NA. Data availability, row x_row defined sum(!.na(x_row))/length(x_row), .e. fraction non-NA values. write_to specified, writes aggregated data .$Data[[write_to]]. Default write_to = \"Aggregated\". ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Aggregate.purse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate indicators — Aggregate.purse","text":"updated purse new treated data sets added .$Data[[write_to]] coin.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Aggregate.purse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate indicators — Aggregate.purse","text":"","code":"# build example purse up to normalised data set purse <- build_example_purse(up_to = \"Normalise\", quietly = TRUE)  # aggregate using defaults purse <- Aggregate(purse, dset = \"Normalised\") #> Written data set to .$Data$Aggregated #> Written data set to .$Data$Aggregated #> Written data set to .$Data$Aggregated #> Written data set to .$Data$Aggregated #> Written data set to .$Data$Aggregated"},{"path":"https://bluefoxr.github.io/COINr/reference/CAGR.html","id":null,"dir":"Reference","previous_headings":"","what":"Compound annual growth rate — CAGR","title":"Compound annual growth rate — CAGR","text":"Given variable y indexed time vector x, calculates compound annual growth rate. Note CAGR assumes x refer years. Also calculated using first latest observed values.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/CAGR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compound annual growth rate — CAGR","text":"","code":"CAGR(y, x)"},{"path":"https://bluefoxr.github.io/COINr/reference/CAGR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compound annual growth rate — CAGR","text":"y numeric vector x numeric vector length y, indexing y time. NA values allowed x. vector assumed years, otherwise result must interpreted differently.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/CAGR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compound annual growth rate — CAGR","text":"scalar value (CAGR)","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/CAGR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compound annual growth rate — CAGR","text":"","code":"# random points over 10 years x <- 2011:2020 y <- runif(10)  CAGR(y, x) #> [1] -0.07176863"},{"path":"https://bluefoxr.github.io/COINr/reference/COIN_to_coin.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a COIN to a coin — COIN_to_coin","title":"Convert a COIN to a coin — COIN_to_coin","text":"Converts older COIN class newer coin class. Note limitations . First, function arguments used create COIN passed coin, since function arguments different. means data sets beyond \"Raw\" regenerated. second limitation anything .$Analysis folder passed .","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/COIN_to_coin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a COIN to a coin — COIN_to_coin","text":"","code":"COIN_to_coin(COIN, recover_dsets = FALSE, out2 = \"coin\")"},{"path":"https://bluefoxr.github.io/COINr/reference/COIN_to_coin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a COIN to a coin — COIN_to_coin","text":"COIN COIN class object, generated COINr version <= 0.6.1, list containing IndData, IndMeta AggMeta entries. recover_dsets Logical: TRUE, recover data sets \"Raw\" found .$Data list. out2 \"coin\" (default) outputs coin, else \"list\", outputs list iData iMeta entries. may useful want make edits building coin.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/COIN_to_coin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a COIN to a coin — COIN_to_coin","text":"coin class object out2 = \"coin\", else list data frames out2 = \"list\".","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/COIN_to_coin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a COIN to a coin — COIN_to_coin","text":"function works building iData iMeta arguments new_coin(), using information COIN. uses build coin out2 = \"coin\" else outputs data frames list. recover_dsets = TRUE, data sets found COIN$Data (except \"Raw\") also put coin$Data, correct format. can used inspect data regenerate. Note want exclude indicators, set out2 = \"list\" build coin separate step exclude specified. exclusions/inclusions COIN passed automatically.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/COIN_to_coin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a COIN to a coin — COIN_to_coin","text":"","code":"# see vignette(\"other_functions\")"},{"path":"https://bluefoxr.github.io/COINr/reference/Denominate.coin.html","id":null,"dir":"Reference","previous_headings":"","what":"Denominate data set in a coin — Denominate.coin","title":"Denominate data set in a coin — Denominate.coin","text":"\"Denominates\" \"scales\" indicators variables. Typically done dividing extensive variables GDP scaling variable population, give intensive variable (GDP per capita).","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Denominate.coin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Denominate data set in a coin — Denominate.coin","text":"","code":"# S3 method for coin Denominate(   x,   dset,   denoms = NULL,   denomby = NULL,   denoms_ID = NULL,   f_denom = NULL,   write_to = NULL,   out2 = \"coin\",   ... )"},{"path":"https://bluefoxr.github.io/COINr/reference/Denominate.coin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Denominate data set in a coin — Denominate.coin","text":"x coin class object dset name data set apply function , accessible .$Data. denoms optional data frame denominator data. Columns denominator data, column names corresponding entries denomby. must also include ID column identified denoms_ID match rows. denoms specified, extract potential denominator columns attached iData calling new_coin(). denomby Optional data frame specifies denominators use indicator, scaling factors apply. columns iCode, Denominator, ScaleFactor. iCode specifies indicator code found dset, Denominator specifies column name denoms use denominate corresponding column x. ScaleFactor allows possibility scale denominators needed, specifies factor multiply resulting values . example, GDP denominator measured dollars, dividing create small numbers (order 1e-10 smaller) cause problems numerical precision. denomby specified, specifications taken \"Denominator\" column iMeta, exists. denoms_ID ID column matching denoms data denominated. column contain uMeta codes match data set extracted coin. f_denom function takes two numeric vector arguments used perform denomination column. default, division, .e. x[[col]]/denoms[[col]] given columns, function can passed takes two numeric vectors inputs returns single numeric vector. See details. write_to specified, writes aggregated data .$Data[[write_to]]. Default write_to = \"Denominated\". out2 Either \"coin\" (default) return updated coin \"df\" output aggregated data set. ... arguments passed methods","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Denominate.coin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Denominate data set in a coin — Denominate.coin","text":"updated coin out2 = \"coin\", else data frame denominated data out2 = \"df\".","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Denominate.coin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Denominate data set in a coin — Denominate.coin","text":"function denominates data set dset inside coin. default, denominating variables taken coin, specifically variables iData Type = \"Denominator\" iMeta (input new_coin()). Specifications map denominators indicators also taken default iMeta$Denominator, exists. specifications can overridden using denoms denomby arguments. operator denomination can also changed using f_denom argument. See also documentation Denominate.data.frame() called method.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Denominate.coin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Denominate data set in a coin — Denominate.coin","text":"","code":"# build example coin coin <- build_example_coin(up_to = \"new_coin\", quietly = TRUE)  # denominate (here, we only need to say which dset to use, takes # specs and denominators from within the coin) coin <- Denominate(coin, dset = \"Raw\") #> Written data set to .$Data$Denominated"},{"path":"https://bluefoxr.github.io/COINr/reference/Denominate.data.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Denominate data sets by other variables — Denominate.data.frame","title":"Denominate data sets by other variables — Denominate.data.frame","text":"\"Denominates\" \"scales\" variables variables. Typically done dividing extensive variables GDP scaling variable population, give intensive variable (GDP per capita).","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Denominate.data.frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Denominate data sets by other variables — Denominate.data.frame","text":"","code":"# S3 method for data.frame Denominate(   x,   denoms,   denomby,   x_ID = NULL,   denoms_ID = NULL,   f_denom = NULL,   ... )"},{"path":"https://bluefoxr.github.io/COINr/reference/Denominate.data.frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Denominate data sets by other variables — Denominate.data.frame","text":"x data frame data denominated. Columns denominated must numeric, columns specified denomby ignored. x must also contain ID column specified x_ID match rows denoms. denoms data frame denominator data. Columns denominator data, column names corresponding entries denomby. must also include ID column identified denoms_ID match rows. denomby data frame specifies denominators use indicator, scaling factors apply. columns iCode, Denominator, ScaleFactor. iCode specifies column name x, Denominator specifies column name denoms use denominate corresponding column x. ScaleFactor allows possibility scale denominators needed, specifies factor multiply resulting values . example, GDP denominator measured dollars, dividing create small numbers (order 1e-10 smaller) cause problems numerical precision. x_ID column name x use match rows denoms. Default \"uCode\". denoms_ID column name denoms use match rows x. Default \"uCode\". f_denom function takes two numeric vector arguments used perform denomination column. default, division, .e. x[[col]]/denoms[[col]] given columns, function can passed takes two numeric vectors inputs returns single numeric vector. See details. ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Denominate.data.frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Denominate data sets by other variables — Denominate.data.frame","text":"data frame size x, specified columns denominated according specifications.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Denominate.data.frame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Denominate data sets by other variables — Denominate.data.frame","text":"data frame x denominated variables found another data frame denoms, according specifications denomby. denomby specifies columns x denominated, columns denoms, scaling factors apply denomination. x denomby must contain ID column matches rows x denomby. specified, assumed uCode,  can also specified using x_ID denoms_ID arguments. entries x[[x_ID]] must present denoms[[denoms_ID]], although extra rows allowed denoms. rows x matched rows denoms using ID columns, ensure units (rows) correctly denominated. default, columns x divided columns denoms. can generalised setting f_denom another function takes two numeric vector arguments. .e. setting denoms = ``*``  multiply columns x denoms together.","code":""},{"path":[]},{"path":"https://bluefoxr.github.io/COINr/reference/Denominate.data.frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Denominate data sets by other variables — Denominate.data.frame","text":"","code":"# Get a sample of indicator data (note must be indicators plus a \"UnitCode\" column) iData <- ASEM_iData[c(\"uCode\", \"Goods\", \"Flights\", \"LPI\")] # Also get some denominator data denoms <- ASEM_iData[c(\"uCode\", \"GDP\", \"Population\")] # specify how to denominate denomby <- data.frame(iCode = c(\"Goods\", \"Flights\"), Denominator = c(\"GDP\", \"Population\"), ScaleFactor = c(1, 1000)) # Denominate one by the other iData_den <- Denominate(iData, denoms, denomby)"},{"path":"https://bluefoxr.github.io/COINr/reference/Denominate.html","id":null,"dir":"Reference","previous_headings":"","what":"Denominate data — Denominate","title":"Denominate data — Denominate","text":"\"Denominates\" \"scales\" variables variables. Typically done dividing extensive variables GDP scaling variable population, give intensive variable (GDP per capita).","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Denominate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Denominate data — Denominate","text":"","code":"Denominate(x, ...)"},{"path":"https://bluefoxr.github.io/COINr/reference/Denominate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Denominate data — Denominate","text":"x Object denominated ... arguments passed methods","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Denominate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Denominate data — Denominate","text":"See individual method documentation","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Denominate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Denominate data — Denominate","text":"See documentation individual methods: Denominate.data.frame() Denominate.coin() Denominate.purse(). function replaces now-defunct denominate() COINr < v1.0.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Denominate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Denominate data — Denominate","text":"","code":"# See individual method documentation"},{"path":"https://bluefoxr.github.io/COINr/reference/Denominate.purse.html","id":null,"dir":"Reference","previous_headings":"","what":"Denominate a data set within a purse. — Denominate.purse","title":"Denominate a data set within a purse. — Denominate.purse","text":"works almost exactly way Denominate.coin(). point care denoms argument take time-indexed data, single value unit. therefore recommended pass time-dependent denominator data part iData calling new_coin(). way, denominators can vary time. See vignette(\"denomination\").","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Denominate.purse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Denominate a data set within a purse. — Denominate.purse","text":"","code":"# S3 method for purse Denominate(   x,   dset,   denoms = NULL,   denomby = NULL,   denoms_ID = NULL,   f_denom = NULL,   write_to = NULL,   ... )"},{"path":"https://bluefoxr.github.io/COINr/reference/Denominate.purse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Denominate a data set within a purse. — Denominate.purse","text":"x purse class object dset name data set apply function , accessible .$Data. denoms optional data frame denominator data. Columns denominator data, column names corresponding entries denomby. must also include ID column identified denoms_ID match rows. denoms specified, extract potential denominator columns attached iData calling new_coin(). denomby Optional data frame specifies denominators use indicator, scaling factors apply. columns iCode, Denominator, ScaleFactor. iCode specifies indicator code found dset, Denominator specifies column name denoms use denominate corresponding column x. ScaleFactor allows possibility scale denominators needed, specifies factor multiply resulting values . example, GDP denominator measured dollars, dividing create small numbers (order 1e-10 smaller) cause problems numerical precision. denomby specified, specifications taken \"Denominator\" column iMeta, exists. denoms_ID ID column matching denoms data denominated. column contain uMeta codes match data set extracted coin. f_denom function takes two numeric vector arguments used perform denomination column. default, division, .e. x[[col]]/denoms[[col]] given columns, function can passed takes two numeric vectors inputs returns single numeric vector. See details. write_to specified, writes aggregated data .$Data[[write_to]]. Default write_to = \"Denominated\". ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Denominate.purse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Denominate a data set within a purse. — Denominate.purse","text":"updated purse","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Denominate.purse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Denominate a data set within a purse. — Denominate.purse","text":"","code":"# build example purse purse <- build_example_purse(up_to = \"new_coin\", quietly = TRUE)  # denominate using data/specs already included in coin purse <- Denominate(purse, dset = \"Raw\") #> Written data set to .$Data$Denominated #> Written data set to .$Data$Denominated #> Written data set to .$Data$Denominated #> Written data set to .$Data$Denominated #> Written data set to .$Data$Denominated"},{"path":"https://bluefoxr.github.io/COINr/reference/Impute.coin.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute a data set in a coin — Impute.coin","title":"Impute a data set in a coin — Impute.coin","text":"imputes NAs data set specified dset invoking function f_i optional arguments f_i_para column time (impute_by = \"column\"), row time (impute_by = \"row\"), passing entire data frame f_i impute_by = \"df\".","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Impute.coin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute a data set in a coin — Impute.coin","text":"","code":"# S3 method for coin Impute(   x,   dset,   f_i = NULL,   f_i_para = NULL,   impute_by = \"column\",   use_group = NULL,   group_level = NULL,   normalise_first = NULL,   out2 = \"coin\",   write_to = NULL,   disable = FALSE,   ... )"},{"path":"https://bluefoxr.github.io/COINr/reference/Impute.coin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute a data set in a coin — Impute.coin","text":"x coin class object dset name data set apply function , accessible .$Data. f_i imputation function. See details. f_i_para arguments pass f_i, x. See details. impute_by Specifies impute: \"column\", passes column (indicator) separately numerical vector f_i; \"row\", passes row separately; \"df\" passes entire data set (data frame) f_i. function called f_i compatible type data passed . use_group Optional grouping variable name pass imputation function supports group imputation. group_level level framework use grouping indicators. relevant impute_by = \"row\" \"df\". case, indicators split groups level specified group_level, imputation performed across rows group, rather whole data set. can make sense indicators within group likely similar. normalise_first Logical: TRUE, column normalised using min-max operation imputation. default FALSE unless impute_by = \"row\". See details. out2 Either \"coin\" return normalised data set back coin, df simply return data frame. write_to Optional character string naming data set coin. Data written .$Data[[write_to]]. Default write_to == \"Imputed\". disable Logical: TRUE disable imputation completely write unaltered data set. option mainly useful sensitivity uncertainty analysis (test effect turning imputation /). ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Impute.coin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute a data set in a coin — Impute.coin","text":"updated coin imputed data set .$Data[[write_to]]","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Impute.coin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Impute a data set in a coin — Impute.coin","text":"Clearly, function f_i needs able accept data class passed - impute_by \"row\" \"column\" numeric vector, \"df\" data frame. Moreover, function return vector data frame identical vector/data frame passed except NA values, can replaced. function f_i required replace NA values. imputing row-wise, prior normalisation data recommended. imputation use e.g. mean unit values indicators (columns). indicators different scales, result likely make sense. indicators normalised first, sensible results can obtained. two options pre-normalise: first setting normalise_first = TRUE - anyway default impute_by = \"row\". case, also need supply vector directions. data normalised using min-max approach imputation, followed inverse operation return data original scales. Another approach gives control simply run Normalise() first, work normalised data point onwards. case better set normalise_first = FALSE, since default impute_by = \"row\" set TRUE. Checks made format data returned imputation functions, ensure type non-NA values inadvertently altered. latter check allowed degree tolerance numerical precision, controlled sfigs argument. data frame normalised, /depending imputation function, may small differences. default sfigs = 9, meaning non-NA values pre post-imputation compared 9 significant figures. See also documentation Impute.data.frame() Impute.numeric() called function.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Impute.coin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute a data set in a coin — Impute.coin","text":"","code":"#' # build coin coin <- build_example_coin(up_to = \"new_coin\") #> iData checked and OK. #> iMeta checked and OK. #> Written data set to .$Data$Raw  # impute raw data set using population groups # output to data frame directly Impute(coin, dset = \"Raw\", f_i = \"i_mean_grp\",                use_group = \"Pop_group\", out2 = \"df\") #>    uCode      LPI   Flights      Ship Bord         Elec      Gas ConSpeed #> 1    AUS 3.793385  36.05498 14.004198    0   0.00000000  1.14000 11.10000 #> 2    AUT 4.097985  29.01725  0.000000   35  35.36972983  0.27300 14.10000 #> 3    BEL 4.108538  31.88546 20.567121   48  26.53304667 36.10000 16.30000 #> 4    BGD 2.663902   4.27955  9.698165   16   1.33161667  0.14400 11.65000 #> 5    BGR 2.807685   9.23588  7.919366   18  11.27758417  0.31200 15.50000 #> 6    BRN 2.870492   2.01900  7.492593    2   0.00000000  6.04000 13.65455 #> 7    CHE 3.987158  51.78846  0.000000   41  68.77328717  3.05000 21.70000 #> 8    CHN 3.661104 114.20080 21.171976   32   6.43630583  9.46000  7.60000 #> 9    CYP 2.999061   8.75467 11.689495    0   0.43936433  0.02900  6.90000 #> 10   CZE 3.674309  15.30953  0.000000   35  46.75817867  2.70000 16.90000 #> 11   DEU 4.225967 174.35880 20.501262  105 110.17956283 48.70000 15.30000 #> 12   DNK 3.815794  32.77050 14.407080    3  20.10336500  0.41800 20.10000 #> 13   ESP 3.727412 170.96280 19.328835   26  24.17962333  3.29000 15.50000 #> 14   EST 3.363489   3.12946  9.171997    6   9.49907183  0.06670 11.60000 #> 15   FIN 3.920745  18.85806 10.044155   18  24.41426050  0.38000 20.50000 #> 16   FRA 3.900953  97.63489 19.536115   75  78.52593033 29.90000 10.80000 #> 17   GBR 4.069669 210.82440 20.800425   13  25.78370767 42.50000 16.90000 #> 18   GRC 3.239516  34.83849 15.679508   12   2.43086017  0.13900  7.90000 #> 19   HRV 3.160829   9.24529 12.440452   41  19.52836200  0.42200  8.60000 #> 20   HUN 3.428968  13.01196  0.000000   28  20.54324117  0.41900 14.80000 #> 21   IDN 2.984537  34.68020 12.209998    2   0.00000200 22.30000  7.20000 #> 22   IND 3.420043  25.26430 16.522118   35   1.33225167  0.75100  6.50000 #> 23   IRL 3.794886  34.17721 10.575193   12   3.39668933  2.17000 15.60000 #> 24   ITA 3.755414 110.27550 18.383778   24  49.32954433  4.22000  9.20000 #> 25   JPN 3.970464  69.00941 17.261338    0   0.00003600 34.50000 20.20000 #> 26   KAZ 2.751998   4.02303  0.000000   46   3.08950333 12.70000 14.74000 #> 27   KHM 2.800590   9.52120  9.017474   13   2.18452350  0.13500 14.74000 #> 28   KOR 3.717126  69.84827 20.427418    1   0.00003600 12.50000 28.60000 #> 29   LAO 2.067254   3.07440  0.000000   20   2.04784200  0.00841 16.68333 #> 30   LTU 3.631688   5.37919  9.234349   22   7.49402750  0.98000 14.60000 #> 31   LUX 4.219409   4.84458  0.000000   12   6.91123783  0.48200 11.60000 #> 32   LVA 3.327107   6.77976  7.850937   17   5.68129900  0.37700 16.60000 #> 33   MLT 3.069256   6.75251 17.060552    0   1.06719433  0.07190 12.80000 #> 34   MMR 2.458571   6.69500  9.182403    8   0.39678050 24.10000 14.74000 #> 35   MNG 2.506056   0.98951  0.000000    9   1.52714167  0.02670 13.65455 #> 36   MYS 3.426307  53.33988 20.551337    9   0.06733867 26.30000  8.90000 #> 37   NLD 4.187530  63.59241 20.541548   32  44.09012050 23.00000 17.40000 #> 38   NOR 3.732163  25.64994  9.287889   19  19.54137450 94.80000 23.50000 #> 39   NZL 3.388000  13.37242 11.910746    0   0.00000000  0.02260 14.70000 #> 40   PAK 2.923219   2.21146 15.319999   43   0.00301600  0.19500 11.65000 #> 41   PHL 2.856259  19.43838 11.621228    0   0.00000000  0.68300  5.50000 #> 42   POL 3.425877  33.79735 14.815517   62  26.34419950  3.68000 12.60000 #> 43   PRT 3.409367  40.46484 16.198871   11  10.12481567  0.57300 12.90000 #> 44   ROU 2.993120  18.79894 12.689838   24   8.26470100  0.37600 17.00000 #> 45   RUS 2.570864  34.06447 15.811485  122  14.18802800 19.80000 11.80000 #> 46   SGP 4.143632  67.86156 20.276872    2   0.00000200  9.43000 20.30000 #> 47   SVK 3.336895   2.07397  0.000000   25  18.81965283  4.63000 13.00000 #> 48   SVN 3.184508   1.51736 13.380177   20  21.65607267  0.44200 13.70000 #> 49   SWE 4.204593  31.74444 15.578093   18  42.47252133  1.69000 22.50000 #> 50   THA 3.255100  73.92221 14.506399   17   2.25995317 24.50000 16.00000 #> 51   VNM 2.976629  28.52418 16.548761   25   3.52419900  0.77600  9.50000 #>     Cov4G      Goods  Services    FDI     PRemit     ForPort Embs IGOs   UNVote #> 1   94.00  288.48930 108.66450 20.900 14.7103856  2188.31100   82  196 38.46245 #> 2   98.00  278.42640 108.12730  5.000  5.0690118   808.68320   88  227 42.63920 #> 3   99.89  597.87230 216.31460  5.710 13.3545270  1574.30800   84  248 43.00308 #> 4   65.00   56.24166  10.07891  3.010  7.4693891     8.48896   52  145 38.60601 #> 5   56.73   42.82515  12.97674  1.350  1.0395414    15.50880   67  209 42.95986 #> 6   80.00    7.23391   2.11464  0.130  0.7604628  1642.16572   41   85 38.50109 #> 7   98.00  402.86490 207.36370 12.200  9.4893412  2615.08900   82  222 42.64127 #> 8   85.00 1713.61900 657.10900 75.600 26.5510247  1541.03500  100  193 37.13661 #> 9   60.00    8.76681  15.23712  1.230  0.4772705    40.76228   43  172 42.34705 #> 10  98.70  274.13650  43.46382  3.880  4.6915576   107.71030   84  201 42.22506 #> 11  95.70 1919.19400 578.42640 47.000 28.6815953  6386.91800  100  309 42.62615 #> 12  99.99  146.67710 113.67530  9.100  2.1877554  1021.27800   77  259 42.79140 #> 13  91.30  447.12290 197.19810 17.100 16.7522764  2040.57100   89  280 43.10103 #> 14 100.00   28.24110  10.22780  0.580  0.5888337    17.41899   46  194 42.87997 #> 15  99.90  101.57500  53.80751  6.030  1.5102145   747.62680   74  269 42.74629 #> 16  80.00  849.33030 471.29310 30.900 30.2099053  6745.32800  100  329 40.42295 #> 17  97.80  778.90520 518.22560 55.500 20.6965329  8206.97800  100  285 39.40118 #> 18  83.00   56.62702  38.17887  0.883  0.7630075   185.10480   83  216 42.69301 #> 19  98.00   28.36795  17.35676  0.387  1.5624119    16.88908   62  197 42.74966 #> 20  97.30  173.61590  39.11952  3.210  4.1655816    72.52570   79  212 42.53351 #> 21   5.00  222.41860  54.06682 19.300  4.4459418   287.61530   83  175 38.10477 #> 22   4.00  288.98060 294.28220 41.800 14.6034747   270.28240   95  198 36.92131 #> 23  90.00  139.99370 338.09850  6.100  1.9605859  6908.41200   74  195 42.68568 #> 24  93.00  658.19810 202.53980 10.300 16.2027497  3264.08700   93  288 42.99491 #> 25  99.00  732.20780 351.42530 37.100 10.5489456  7449.99300   95  201 42.17231 #> 26  65.50   55.04856  16.85995  4.990  2.5553953    87.49439   62  117 38.72687 #> 27  30.00   20.75014   5.79267  4.190  0.6288657  1857.95820   42   95 38.02232 #> 28  99.00  568.99200 200.84810 26.700  8.7110922  1195.63500   86  210 42.00012 #> 29   5.00    8.95527   1.37855  1.750  0.1662127   743.46552   41   82 37.63291 #> 30  91.00   42.12889  12.35732  0.965  1.1467629    31.03612   50  190 42.71283 #> 31  96.00   30.97279 165.79100  7.990  2.8993036 10601.75000   37  190 42.98426 #> 32  90.00   28.29194   7.25574  0.444  1.0374761    26.82834   48  184 42.70066 #> 33 100.00   13.27830  20.06847  0.179  0.2330044   139.86780   28  169 42.56485 #> 34   0.00   31.70398   6.24003  6.700  0.9065301     0.04805   52   87 35.75572 #> 35  90.00    7.81803   2.72198  2.100  0.3115324     5.20507   40  107 39.05257 #> 36  71.00  278.03190  72.93042 21.900  7.3896926   248.16150   74  177 38.28493 #> 37  99.00  770.39350 346.55110 13.900  4.8949538  4697.46400   89  265 42.80321 #> 38  99.00  142.60950  83.35802  4.570  2.2852030  1632.78100   78  259 43.11114 #> 39  88.00   48.20846  26.55097  1.850  2.3361618   235.98580   44  149 42.32222 #> 40  16.00   45.28752  11.00249  6.950  3.9638222    13.38957   72  157 38.14939 #> 41  39.00  118.56180  55.21572  6.130  8.2693569   103.68870   66  158 37.68160 #> 42 100.00  363.01320  82.74544 10.100  6.2945847   218.88300   87  238 42.58490 #> 43  94.30  102.49150  43.77949  2.330  5.2309644   327.18220   72  236 43.18605 #> 44  72.00  115.31850  31.05017  4.050  4.7341943    35.20750   75  217 42.52487 #> 45  50.00  343.85040 122.55080 17.000  5.5610250   304.70170   99  232 36.12970 #> 46 100.00  414.23890 304.71690 27.000  6.0574964  1487.02000   58  119 38.74750 #> 47  75.00  140.36600  16.24510  2.320  2.7675602    70.29841   62  201 43.10103 #> 48  97.70   54.98977  11.79091  0.362  0.7759290    49.05213   43  197 43.10103 #> 49  99.99  233.30670 132.10610  8.070  4.7452582  1463.55900   78  278 42.75153 #> 50  21.00  282.80140 108.01090 17.200  7.3177969   220.11210   78  152 38.82629 #> 51   0.00  269.07660  30.53244 24.900  5.0849807     0.00189   80  138 37.53063 #>    CostImpEx    Tariff      TBTs TIRcon RTAs Visa  StMob Research       Pat #> 1      364.0  1.170000  205.0000      0   14   68 268.00    46761  229.8000 #> 2        0.0  1.600000 1144.0000      1   30   80  69.80    14432  519.1000 #> 3        0.0  1.600000 1348.0000      1   30   80  42.30    20176  655.8000 #> 4      595.0 10.530000  526.9091      0   12   45  50.40     2084  627.1600 #> 5       52.0  1.600000 1140.0000      1   30   79  28.80     1854   12.2000 #> 6      140.0  0.500000    2.0000      0   15   90   3.50      229   41.9250 #> 7      150.0  0.000000  300.0000      1   33   80  49.80    30056 1315.7000 #> 8      255.5  3.540000 1230.0000      1   17   11 445.00    95919  927.8000 #> 9      100.0  1.600000 1141.0000      1   30   79  29.40     1337    7.4000 #> 10       0.0  1.600000 1456.0000      1   30   79  47.90     9190  112.6000 #> 11      45.0  1.600000 1163.0000      1   30   82 233.00    78353 2771.7000 #> 12       0.0  1.600000 1393.0000      1   30   81  33.20    15986  306.0000 #> 13       0.0  1.600000 1212.0000      1   30   81  51.00    39777  334.7000 #> 14       0.0  1.600000 1153.0000      1   30   79   5.99     1594   14.4000 #> 15      70.0  1.600000 1215.0000      1   30   81  22.00    10303  412.5000 #> 16       0.0  1.600000 1385.0000      1   30   81 152.00    56677 1469.0000 #> 17      25.0  1.600000 1187.0000      1   30   81 326.00    96337 1313.7000 #> 18      30.0  1.600000 1140.0000      1   30   80  48.60     8020   43.4000 #> 19       0.0  1.600000 1179.0000      1   30   78   5.05     2342   15.1000 #> 20       0.0  1.600000 1173.0000      1   30   79  26.20     5180  109.5000 #> 21     303.2  2.640000  118.0000      1   17   59  31.10     2624   23.7000 #> 22     226.7  6.320000  117.0000      1   15   51 120.00    20234  437.6000 #> 23     150.0  1.600000 1143.0000      1   30   80  24.50     7451  140.6000 #> 24       0.0  1.600000 1171.0000      1   30   81  97.00    45825  513.0000 #> 25     161.0  1.350000  805.0000      0   14   84 133.00    31184  583.5000 #> 26     320.0  2.510000   19.0000      1    2   48  83.90     1026    3.6000 #> 27     220.0  9.770000    3.0000      0   15   61   4.43      378  398.4545 #> 28      38.0  7.680000  839.0000      1   46   85  83.80    20437  249.8000 #> 29     350.0  1.650000    1.0000      0   16   61   6.46      175  321.1083 #> 30      28.0  1.600000 1170.0000      1   30   79  12.10     1482    7.5000 #> 31       0.0  1.600000 1140.0000      1   30   80  12.70     1206   66.2000 #> 32      35.0  1.600000 1170.0000      1   30   79   8.79      794    1.5000 #> 33      25.0  1.600000 1140.0000      1   30   80   1.77      347    4.7000 #> 34     350.0  3.000833    2.0000      0   17   17   5.81      299  398.4545 #> 35     147.0  1.432500    7.0000      1    1   21   8.48      293    0.3000 #> 36     105.0  3.680000  236.0000      0   17   91 115.00     8080   64.2000 #> 37       0.0  1.600000 1754.0000      1   30   80  69.30    33445  641.2000 #> 38       0.0  1.020000   81.0000      1   31   81  22.60    11696  168.1000 #> 39     147.0  1.270000  108.0000      0   13   80  49.20     7731   46.5000 #> 40     992.0  9.990000  112.0000      1   11    1  30.30     7122    7.2000 #> 41     103.0  3.400000  256.0000      0   17   57  10.60     1361   11.3000 #> 42       0.0  1.600000 1147.0000      1   30   79  35.60    13008  179.3000 #> 43       0.0  1.600000 1141.0000      1   30   80  14.40    10943   46.1000 #> 44       0.0  1.600000 1230.0000      1   30   79  38.70     4173   42.6000 #> 45     244.5  3.430000   85.0000      1    2   17 135.00    16182  141.5000 #> 46      77.0  0.000000   57.0000      0   19   92  19.30    11411  270.5000 #> 47       0.0  1.600000 1187.0000      1   30   79  40.90     2741   44.2000 #> 48       0.0  1.600000 1250.0000      1   30   79   3.60     2653   30.8000 #> 49      40.0  1.600000 1364.0000      1   30   81  28.10    23514  661.5000 #> 50     140.0  4.296364  609.0000      0   17   61  30.30     5317   53.6000 #> 51     322.0  2.860000  114.0000      0   19   31  53.40     3618  627.1600 #>     CultServ CultGood Tourist MigStock        Lang       Renew  PrimEner #> 1  2.0009800  6.80700   8.263  5.66849 19.00543746  9.18050296 123.01003 #> 2  1.5275800  8.93200  28.121  1.30365 14.19041597 34.39499175  84.92785 #> 3  2.3878700 12.69800   7.481  1.32919 10.69085182  9.20164053 113.76871 #> 4  0.0147200 22.26911   0.125  5.08139  0.17744048 34.74706901  74.74533 #> 5  0.1199100  0.88000   8.252  0.69462  6.28997761 17.65007793 151.98183 #> 6  1.1553375  0.36400   0.219  0.14041  6.24168794  0.01493504 113.44995 #> 7  1.1597600 28.96500   9.205  2.12634 13.63554873 25.29198368  53.47854 #> 8  2.8862400 74.46800  59.270  4.30982  0.73963574 12.41335257 175.31089 #> 9  0.1370000  0.52900   3.187  0.23838 12.32117982  9.94206602  77.69450 #> 10 0.3223000  8.80700   9.321  1.10637  7.72876772 14.82856195 134.44935 #> 11 4.8360300 47.16100  35.555 10.92850 15.26134955 14.20625270  86.76327 #> 12 1.9881600  4.91200  10.781  0.54405 19.26996939 33.17027717  63.75411 #> 13 1.5920175 11.75900  75.315  3.34468  5.15846746 16.25409774  79.00655 #> 14 0.1027500  0.74500   3.147  0.32117 12.21152796 27.47683347 169.38370 #> 15 0.5887800  1.85800   2.789  0.46894 15.04353335 43.23526259 159.24526 #> 16 7.0190500 41.02800  82.570  4.37339 11.50318182 13.49926232  97.46473 #> 17 9.5699600 35.13900  35.814  8.91445 19.35213020  8.71168557  72.59383 #> 18 0.4748300  1.62600  24.799  1.06705 10.59013987 17.17004755  88.19577 #> 19 0.2833100  0.73700  13.809  0.54069 11.97641492 33.12746664  94.25010 #> 20 1.5107100  2.61400   5.302  0.84562  5.22493581 15.55936205  95.79304 #> 21 0.1340500 22.26911  11.519  2.06821  0.03222059 36.87934810  88.36380 #> 22 3.2919800  7.99100  14.569  8.43759  3.77194295 36.02122257 118.26344 #> 23 0.5222000  3.42400  10.100  1.28606 19.46425530  9.08139901  56.06685 #> 24 0.5783200 26.84300  52.372  4.87039  6.40814649 16.51685058  71.12753 #> 25 2.2075400 16.18200  24.040  2.19471  0.03107851  6.29735708  92.99299 #> 26 0.0578000  0.98500   6.509  6.38381  7.20274577  1.55844291 188.00931 #> 27 0.0050100 14.11330   5.012  0.93047  4.41049248 64.92377591 133.44976 #> 28 1.7980000 14.11330  17.242  2.06535  2.13461064  2.70770280 158.23984 #> 29 0.8463708  7.01150   3.315  1.12532  0.16638354 59.31586075  99.50804 #> 30 0.0653200  1.28100   2.296  0.57490 10.50042321 28.96117925  90.93856 #> 31 8.0450000  0.63600   1.054  0.29738 21.48526056  9.03131366  73.25911 #> 32 0.0332000  0.73500   1.793  0.47182 12.00784247 38.09801717  97.98307 #> 33 2.4627200  0.36900   1.966  0.11826 16.91195826  5.35500475  55.99671 #> 34 0.0890500 14.11330   2.907  2.57501  0.01884848 61.52781165  77.95974 #> 35 0.0026600  0.04600   0.404  0.08170  2.25185464  3.42973729 161.97873 #> 36 1.1529200  7.55500  26.757  4.00744  6.66895073  5.19444259 122.65287 #> 37 2.4231700 19.15900  15.828  1.68457 18.15321190  5.88946308  94.71582 #> 38 1.6616300  2.98100   5.960  0.66093 15.09626505 57.77200160  88.23266 #> 39 0.3461500  1.21300   3.370  1.48606 16.68013129 30.78917555 132.29055 #> 40 0.0355300  1.25600   0.966  4.09286  1.71805798 46.47632492 105.86127 #> 41 0.2955500  3.18500   5.967  1.40403 10.89425114 27.45154445  72.31282 #> 42 1.4471400 11.91200  17.471  4.24078  9.10344746 11.91148821 101.58949 #> 43 0.5394600  2.61600  11.223  1.75075  6.93615852 27.15729839  78.17923 #> 44 0.1449000  2.38700  10.223  3.32536  7.05215979 23.69779403  80.93064 #> 45 1.4463300  8.37900  24.571  7.65393  5.92039782  3.30422835 192.45083 #> 46 0.9278000 14.50700  12.914  2.47645 12.57967365  0.70863530  63.77904 #> 47 0.0882000  2.40700   2.027  0.49825  8.23424298 13.40916822 107.86727 #> 48 0.2021100  1.21200   3.032  0.18037 14.10243000 20.87739614 113.88117 #> 49 0.9089600  6.01400   6.782  1.03933 18.16742472 53.24776980 112.44515 #> 50 0.0896900  6.66100  32.530  4.13663  0.15905946 22.86307013 132.60433 #> 51 2.2552382 22.26911  10.013  1.16007  0.08500231 34.99856984 130.35543 #>           CO2    MatCon     Forest    Poverty    Palma TertGrad FreePress #> 1  15.3701378 38.381073  6.3295294  0.3000000 1.400000 29.78425        22 #> 2   6.8737132 15.763616  3.0382810  0.7000000 1.110000 13.08167        22 #> 3   8.3281599 15.884942  5.7098277  0.0000000 0.960000 31.70948        12 #> 4   0.4591420  2.577148  5.2605370 19.6000000 1.260000 14.60314        62 #> 5   5.8716159 18.704688  1.5483901  1.5000000 1.490000 24.47098        42 #> 6  22.1247012 23.331756  3.2269754  0.3363636 1.239000 25.99135        76 #> 7   4.3115630 13.520983  0.9916749  0.0000000 1.200000 36.94929        13 #> 8   7.5439076 23.647067  3.7251454  1.4000000 2.100000  3.57765        87 #> 9   5.2603520 24.426326  1.7662068  0.0000000 1.400000 25.54672        23 #> 10  9.1659784 17.115225  4.9847983  0.0000000 0.920000 19.34180        21 #> 11  8.8893704 15.015616  2.3703489  0.0000000 1.100000 24.74205        20 #> 12  5.9357125 16.651923  5.3043935  0.2000000 1.040000 30.38373        12 #> 13  5.0338245 11.998735  6.9265991  1.0000000 1.460000 29.29108        28 #> 14 14.8488192 32.980617  9.4062132  0.5000000 1.260000 37.60498        16 #> 15  8.6607212 24.605785  8.5039377  0.0000000 0.950000 22.50554        12 #> 16  4.5720882 11.827461  3.7879808  0.0000000 1.310000 17.66307        26 #> 17  6.4974405  8.495755  5.4662193  0.2000000 1.250000 29.33262        25 #> 18  6.1803373 11.624611  1.8997660  1.5000000 1.550000 22.92907        44 #> 19  3.9738049  9.791906  1.7280976  0.7000000 1.220000 18.25773        41 #> 20  4.2655750 16.923169  5.8471809  0.5000000 1.130000 20.67309        44 #> 21  1.8193633  7.190287 10.6347954  7.2000000 1.810000  8.48301        49 #> 22  1.7300004  5.337525  3.3552538 21.2000000 1.480000  9.13629        43 #> 23  7.3781178 13.938004  3.5608942  0.5000000 1.250000 26.83780        18 #> 24  5.2708668 10.904800  2.0543587  0.8100000 1.420000 14.35266        31 #> 25  9.5387061  9.381838  1.4232737  6.0545455 1.220000 29.87681        27 #> 26 14.3623897 28.212457  0.4801006  0.1000000 0.920000 22.91112        85 #> 27  0.4377600  4.882918 22.8067646  0.8100000 1.160000 22.91112        70 #> 28 11.5703454 15.904725  3.0383172  0.3000000 1.311818 24.35774        34 #> 29  0.2972009 10.606696 13.1990072 22.7000000 1.680000 23.22077        85 #> 30  4.3780901 14.803791  8.0974972  0.7000000 1.430000 33.09735        21 #> 31 17.3621214 28.154633  4.5446296  0.2000000 1.400000 34.27727        14 #> 32  3.4981929 16.002621 10.3812689  0.7000000 1.440000 27.79356        26 #> 33  5.4915248 16.261072  2.9263320  0.0000000 1.239000 13.28486        23 #> 34  0.4166004  3.300184  6.3602604  6.4000000 1.311818 22.91112        73 #> 35  7.1273263 33.493893  2.9419658  0.2000000 1.230000 23.71332        37 #> 36  8.0329916 18.856906 17.2735413  0.8100000 2.620000 16.36954        69 #> 37  9.9201381 14.304186  1.8284548  0.0000000 0.990000 28.86907        11 #> 38  9.2709451 21.150196  3.1175512  0.2000000 0.880000 26.65009         8 #> 39  7.6865758 24.861794  6.0694910  0.3363636 1.239000 26.00903        19 #> 40  0.8962641  4.432336  0.3263907  6.1000000 1.180000  8.75331        65 #> 41  1.0554568  3.972959  4.4737686  8.3000000 2.170000 16.99506        44 #> 42  7.5171516 17.682962  5.8058431  0.0000000 1.230000 23.70020        34 #> 43  4.3315540 11.090858 31.8455434  0.5000000 1.500000 18.18253        17 #> 44  3.5161537 11.469474  2.4348105  0.0000000 0.960000 13.01408        38 #> 45 11.8575278 16.362004  5.3007501  0.0000000 2.020000  2.00915        83 #> 46 10.3063319 33.369013  5.9836906  2.4000000 1.198333 28.21053        67 #> 47  5.6615813 10.910721  5.0249404  0.7000000 0.880000 18.92215        26 #> 48  6.2136868 13.770686  2.0597113  0.0000000 0.880000 18.82353        23 #> 49  4.4781822 17.027679  8.5016067  0.5000000 0.930000 22.99885        11 #> 50  4.6218600 12.304692  6.7611565  0.0000000 1.650000 13.12545        77 #> 51  1.8035657 13.594893 12.7836337  2.6000000 1.640000 14.60314        84 #>      TolMin NGOs CPI    FemLab WomParl PubDebt  PrivDebt     GDPGrow    RDExp #> 1  3.600000  311  77 0.8592661 28.6667  37.640 202.50016  0.34888036 2.202070 #> 2  4.800000  301  75 0.8872138 30.6011  86.190 141.28513  2.18677558 3.071810 #> 3  4.600000 1824  75 0.8699724 38.0000 106.050 225.72427  1.36616464 2.456680 #> 4  8.400000   16  28 0.5414029 20.2857  31.670  40.81502  6.16478747 1.196272 #> 5  5.100000   28  43 0.8927631 19.1667  26.300 116.98938  4.32022261 0.956570 #> 6  5.600000    1  62 0.8618006  9.0909   2.810 189.43663  0.02851029 1.124665 #> 7  3.600000  741  85 0.8936418 32.5000  45.660 237.77122 -0.01982295 2.966350 #> 8  7.600000  117  41 0.8359555 23.7030  42.920 193.43419  6.30396712 2.065580 #> 9  6.000000   19  57 0.8633334 17.8571 108.870 345.59967  0.00000000 0.455850 #> 10 5.100000   55  57 0.8119483 20.0000  40.310  73.21357  4.04300124 1.948650 #> 11 4.900000  986  81 0.8844910 36.9841  70.990 105.91991  1.79471020 2.877490 #> 12 4.400000  208  88 0.9270000 37.4302  45.530 223.23741  1.50309097 3.013870 #> 13 5.800000  341  57 0.8631487 39.1429  99.260 165.79129  2.85707386 1.219610 #> 14 7.536316   21  71 0.9000751 26.7327   9.740 126.58231  4.87884628 1.495020 #> 15 1.500000  118  85 0.9651910 42.0000  62.510 181.23815  2.33629470 2.904740 #> 16 7.000000 1071  70 0.8953486 25.8232  96.140 188.68200  1.42667764 2.231350 #> 17 6.400000 1582  82 0.8697419 30.0000  88.980 169.14574  1.12929130 1.703040 #> 18 5.100000  102  48 0.7784910 18.3333 176.940 124.65858  1.49779228 0.956730 #> 19 5.500000   30  49 0.8664952 19.8675  86.670 130.34435  3.99021292 0.854390 #> 20 4.500000   62  45 0.8249007 10.0503  75.330  92.51395  4.33844641 1.377620 #> 21 7.200000   32  37 0.6149829 19.8214  27.300  40.83840  3.92307260 0.084660 #> 22 8.300000  167  40 0.3455764 11.8081  69.070  55.03717  5.42924312 0.627400 #> 23 1.100000   64  74 0.8078358 22.1519  78.680 299.06965  6.49733804 1.513680 #> 24 4.800000  498  50 0.7364464 30.9524 132.710 115.32313  1.62982757 1.334880 #> 25 3.400000  252  73 0.7796105  9.2632 247.980 158.42065  1.88001976 3.283630 #> 26 7.900000    5  31 0.9010363 27.1028  21.890  52.65279  2.59552272 0.169440 #> 27 6.600000    0  21 0.8788125 20.3252  32.540  68.15849  5.19299957 0.118270 #> 28 2.600000  145  54 0.7311271 17.0000  37.890 193.24990  2.62122194 4.228160 #> 29 6.406549    1  29 1.0274716 27.5168  61.860  19.86313  5.33713473 2.092836 #> 30 4.100000   16  59 0.9398145 21.2766  42.780  63.30250  5.31639215 1.042460 #> 31 2.800000   66  82 0.8341093 28.3333  21.450 421.38527 -0.67739873 1.287730 #> 32 8.300000   18  58 0.9234106 16.0000  34.940  96.90818  5.56194830 0.625500 #> 33 3.600000   14  56 0.6323963 12.5000  63.960 190.06811  4.14990811 0.769230 #> 34 9.800000    1  30 0.8208780 10.1617  34.340  21.86631  5.40145516 1.563575 #> 35 3.500000    3  36 0.8351940 17.1053  49.245  85.61135  4.22356684 0.155010 #> 36 6.200000  113  47 0.6499864 10.3604  57.390 145.18617  4.43836861 1.298130 #> 37 4.500000  731  82 0.8748585 38.0000  65.120 231.32965  2.54478724 2.013290 #> 38 3.400000  160  85 0.9480041 39.6450  27.940 252.12094  0.99831301 1.933010 #> 39 3.300000   54  89 0.8854174 34.1667  29.950 174.09862  0.86445133 1.152360 #> 40 9.700000   25  32 0.2970086 20.5882  63.570  19.67393  3.65519604 0.245540 #> 41 8.200000  104  34 0.6490328 29.4521  34.790  56.33445  5.05974739 0.138390 #> 42 5.900000   50  60 0.8201792 28.0435  51.280  86.22427  4.53454572 1.003370 #> 43 2.200000   81  63 0.9104053 34.7826 128.980 184.73320  2.99637372 1.278850 #> 44 6.500000   30  48 0.7703541 20.6687  39.300  28.38030  7.57933150 0.487650 #> 45 8.500000   82  29 0.8649159 15.7778  16.420  70.67039  0.00000000 1.132020 #> 46 2.300000  139  84 0.7977098 23.7624 104.680 165.48938  3.52678166 2.197540 #> 47 6.600000   24  50 0.8132671 20.0000  52.910  92.63818  3.22730973 1.178450 #> 48 4.500000   31  61 0.9055214 36.6667  83.150  88.14863  4.91413516 2.211740 #> 49 1.800000  299  84 0.9490853 43.5530  43.400 207.22266  0.81838277 3.262850 #> 50 8.200000   98  37 0.8148830  4.8583  42.720 130.82868  3.64110272 0.627200 #> 51 5.700000    8  35 0.9194402 26.7206  58.250 123.81487  5.72587785 0.374040 #>        NEET #> 1   8.70000 #> 2   6.50000 #> 3   9.30000 #> 4  27.40000 #> 5  15.30000 #> 6  17.20000 #> 7   6.50000 #> 8  16.09091 #> 9  16.10000 #> 10  6.30000 #> 11  6.30000 #> 12  7.00000 #> 13 13.30000 #> 14  9.40000 #> 15  9.40000 #> 16 11.50000 #> 17 10.30000 #> 18 15.30000 #> 19 15.40000 #> 20 11.00000 #> 21 21.50000 #> 22 27.90000 #> 23 10.90000 #> 24 20.00000 #> 25  3.50000 #> 26  9.50000 #> 27 12.70000 #> 28 11.99167 #> 29 42.10000 #> 30  9.20000 #> 31  5.90000 #> 32 10.30000 #> 33  8.00000 #> 34 17.40000 #> 35 19.80000 #> 36 12.80000 #> 37  4.00000 #> 38  4.60000 #> 39 11.80000 #> 40 30.40000 #> 41 21.70000 #> 42  9.50000 #> 43  9.30000 #> 44 15.20000 #> 45 12.40000 #> 46  4.00000 #> 47 12.10000 #> 48  6.50000 #> 49  6.20000 #> 50 15.00000 #> 51  0.60000"},{"path":"https://bluefoxr.github.io/COINr/reference/Impute.data.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute a data frame — Impute.data.frame","title":"Impute a data frame — Impute.data.frame","text":"Impute data frame using function, either column-wise, row-wise whole data frame one shot.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Impute.data.frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute a data frame — Impute.data.frame","text":"","code":"# S3 method for data.frame Impute(   x,   f_i = NULL,   f_i_para = NULL,   impute_by = \"column\",   normalise_first = NULL,   directions = NULL,   ... )"},{"path":"https://bluefoxr.github.io/COINr/reference/Impute.data.frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute a data frame — Impute.data.frame","text":"x data frame numeric columns. f_i function use imputation. default, imputation performed simply substituting mean non-NA values column time. f_i_para additional parameters pass f_i, apart x impute_by Specifies impute: \"column\", passes column separately numerical vector f_i; \"row\", passes row separately; \"df\" passes entire data frame f_i. function called f_i compatible type data passed . normalise_first Logical: TRUE, column normalised using min-max operation imputation. default FALSE unless impute_by = \"row\". See details. directions vector directions: either -1 1 indicate direction column x - used normalise_first = TRUE. See details. ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Impute.data.frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute a data frame — Impute.data.frame","text":"imputed data frame","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Impute.data.frame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Impute a data frame — Impute.data.frame","text":"function accepts data frames numeric columns. imputes NAs data frame invoking function f_i optional arguments f_i_para column time (impute_by = \"column\"), row time (impute_by = \"row\"), passing entire data frame f_i impute_by = \"df\". Clearly, function f_i needs able accept data class passed - impute_by \"row\" \"column\" numeric vector, \"df\" data frame. Moreover, function return vector data frame identical vector/data frame passed except NA values, can replaced. function f_i required replace NA values. imputing row-wise, prior normalisation data recommended. imputation use e.g. mean unit values indicators (columns). indicators different scales, result likely make sense. indicators normalised first, sensible results can obtained. two options pre-normalise: first setting normalise_first = TRUE - anyway default impute_by = \"row\". case, also need supply vector directions. data normalised using min-max approach imputation, followed inverse operation return data original scales. Another approach gives control simply run Normalise() first, work normalised data point onwards. case better set normalise_first = FALSE, since default impute_by = \"row\" set TRUE. Checks made format data returned imputation functions, ensure type non-NA values inadvertently altered. latter check allowed degree tolerance numerical precision, controlled sfigs argument. data frame normalised, /depending imputation function, may small differences. default sfigs = 9, meaning non-NA values pre post-imputation compared 9 significant figures.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Impute.data.frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute a data frame — Impute.data.frame","text":"","code":"# a df of random numbers X <- as.data.frame(matrix(runif(50), 10, 5))  # introduce NAs (2 in 3 of 5 cols) X[sample(1:10, 2), 1] <- NA X[sample(1:10, 2), 3] <- NA X[sample(1:10, 2), 5] <- NA  # impute using column mean Impute(X, f_i = \"i_mean\") #>            V1         V2         V3         V4         V5 #> 1  0.12858023 0.30533850 0.06964349 0.45684746 0.97132109 #> 2  0.33573819 0.74556063 0.53977689 0.30221670 0.30750955 #> 3  0.26357289 0.77015178 0.63799600 0.47637388 0.78986295 #> 4  0.33573819 0.29431382 0.90246279 0.09909573 0.00145347 #> 5  0.53091346 0.35905926 0.93134362 0.94508692 0.36632415 #> 6  0.25675519 0.98895837 0.71315440 0.38244579 0.36632415 #> 7  0.09600231 0.79985401 0.16642448 0.90793218 0.53315144 #> 8  0.31948194 0.04086471 0.92135688 0.50751614 0.03236682 #> 9  0.90025321 0.62373491 0.85980548 0.54376203 0.05944141 #> 10 0.19034624 0.48757369 0.63799600 0.95635742 0.23548650  # impute using row median (no normalisation) Impute(X, f_i = \"i_median\", impute_by = \"row\",        normalise_first = FALSE) #>            V1         V2         V3         V4         V5 #> 1  0.12858023 0.30533850 0.06964349 0.45684746 0.97132109 #> 2  0.42364322 0.74556063 0.53977689 0.30221670 0.30750955 #> 3  0.26357289 0.77015178 0.62326283 0.47637388 0.78986295 #> 4  0.19670478 0.29431382 0.90246279 0.09909573 0.00145347 #> 5  0.53091346 0.35905926 0.93134362 0.94508692 0.73112854 #> 6  0.25675519 0.98895837 0.71315440 0.38244579 0.54780010 #> 7  0.09600231 0.79985401 0.16642448 0.90793218 0.53315144 #> 8  0.31948194 0.04086471 0.92135688 0.50751614 0.03236682 #> 9  0.90025321 0.62373491 0.85980548 0.54376203 0.05944141 #> 10 0.19034624 0.48757369 0.36153009 0.95635742 0.23548650"},{"path":"https://bluefoxr.github.io/COINr/reference/Impute.html","id":null,"dir":"Reference","previous_headings":"","what":"Imputation of missing data — Impute","title":"Imputation of missing data — Impute","text":"generic function following methods:","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Impute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Imputation of missing data — Impute","text":"","code":"Impute(x, ...)"},{"path":"https://bluefoxr.github.io/COINr/reference/Impute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Imputation of missing data — Impute","text":"x Object imputed ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Impute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Imputation of missing data — Impute","text":"object class x, imputed.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Impute.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Imputation of missing data — Impute","text":"Impute.numeric() Impute.data.frame() Impute.coin() Impute.purse() See methods individual documentation. function replaces now-defunct impute() COINr < v1.0.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Impute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Imputation of missing data — Impute","text":"","code":"# See individual method documentation"},{"path":"https://bluefoxr.github.io/COINr/reference/Impute.numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute a numeric vector — Impute.numeric","title":"Impute a numeric vector — Impute.numeric","text":"Imputes missing values numeric vector using function f_i. function return vector identical x except NA values, can replaced. function f_i required replace NA values.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Impute.numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute a numeric vector — Impute.numeric","text":"","code":"# S3 method for numeric Impute(x, f_i = NULL, f_i_para = NULL, ...)"},{"path":"https://bluefoxr.github.io/COINr/reference/Impute.numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute a numeric vector — Impute.numeric","text":"x numeric vector, possibly NA values imputed. f_i function imputes missing values numeric vector. See description details. f_i_para Optional arguments passed f_i() ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Impute.numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute a numeric vector — Impute.numeric","text":"imputed numeric vector length x.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Impute.numeric.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Impute a numeric vector — Impute.numeric","text":"calls function f_i(), optionally arguments f_i_para, impute missing values found x. default, f_i = \"i_mean()\", simply imputes NAs mean non-NA values x. also use one imputation functions directly (i_mean()). However, function offers extra advantages, checking input output formats, making sure resulting imputed vector agrees input. also skip imputation entirely NAs .","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Impute.numeric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute a numeric vector — Impute.numeric","text":"","code":"# a vector with a missing value x <- 1:10 x[3] <- NA x #>  [1]  1  2 NA  4  5  6  7  8  9 10  # impute using median # this calls COINr's i_median() function Impute(x, f_i = \"i_median\") #>  [1]  1  2  6  4  5  6  7  8  9 10"},{"path":"https://bluefoxr.github.io/COINr/reference/Impute.purse.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute data sets in a purse — Impute.purse","title":"Impute data sets in a purse — Impute.purse","text":"function imputes target data set dset coin using imputation function f_i. performed way coin method Impute.coin(), one \"special case\" panel data. f_i = \"impute_panel, data sets inside purse imputed using last available data point, using impute_panel() function. case, coins imputed individually, treated single data set. case, optionally set f_i_para = list(max_time = .) . substituted maximum number time points search backwards non-NA value. See impute_panel() details. arguments need passed impute_panel(). See vignette(\"imputation\") details. See also Impute.coin() documentation.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Impute.purse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute data sets in a purse — Impute.purse","text":"","code":"# S3 method for purse Impute(   x,   dset,   f_i = NULL,   f_i_para = NULL,   impute_by = \"column\",   group_level = NULL,   use_group = NULL,   normalise_first = NULL,   write_to = NULL,   ... )"},{"path":"https://bluefoxr.github.io/COINr/reference/Impute.purse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute data sets in a purse — Impute.purse","text":"x purse object dset name data set apply function , accessible .$Data. f_i imputation function. \"purse\" class, f_i = \"impute_panel special case: see details. f_i_para arguments pass f_i, x. See details. impute_by Specifies impute: \"column\", passes column (indicator) separately numerical vector f_i; \"row\", passes row separately; \"df\" passes entire data set (data frame) f_i. function called f_i compatible type data passed . group_level level framework use grouping indicators. relevant impute_by = \"row\" \"df\". case, indicators split groups level specified group_level, imputation performed across rows group, rather whole data set. can make sense indicators within group likely similar. use_group Optional grouping variable name pass imputation function supports group imputation. normalise_first Logical: TRUE, column normalised using min-max operation imputation. default FALSE unless impute_by = \"row\". See details. write_to Optional character string naming resulting data set coin. Data written .$Data[[write_to]]. Default write_to == \"Imputed\". ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Impute.purse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute data sets in a purse — Impute.purse","text":"updated purse imputed data sets added coin.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Impute.purse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute data sets in a purse — Impute.purse","text":"","code":"# see vignette(\"imputation\")"},{"path":"https://bluefoxr.github.io/COINr/reference/Normalise.coin.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a normalised data set — Normalise.coin","title":"Create a normalised data set — Normalise.coin","text":"Creates normalised data set using specifications specified global_specs. Columns dset can also optionally normalised individual specifications using indiv_specs argument. indicators directions reversed, can specified using directions argument. Non-numeric columns ignored automatically function. default, function normalises indicator using \"min-max\" method, scaling indicators lie 0 100. calls n_minmax() function. Note, COINr normalisation functions form n_*().","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Normalise.coin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a normalised data set — Normalise.coin","text":"","code":"# S3 method for coin Normalise(   x,   dset,   global_specs = NULL,   indiv_specs = NULL,   directions = NULL,   out2 = \"coin\",   write_to = NULL,   write2log = TRUE,   ... )"},{"path":"https://bluefoxr.github.io/COINr/reference/Normalise.coin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a normalised data set — Normalise.coin","text":"x coin dset named data set found .$Data global_specs Specifications apply columns, apart specified indiv_specs. See details. indiv_specs Specifications applied specific columns, overriding specified global_specs. See details. directions optional data frame containing following columns: iCode indicator code, corresponding column names data set Direction numeric vector entries either -1 1 directions specified, directions taken iMeta table coin, available. out2 Either \"coin\" return normalised data set back coin, df simply return data frame. write_to Optional character string naming data set coin. Data written .$Data[[write_to]]. Default write_to == \"Normalised\". write2log Logical: FALSE, arguments function written coin log, function invoked regenerating. Recommend keep TRUE unless good reason otherwise. ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Normalise.coin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a normalised data set — Normalise.coin","text":"updated coin","code":""},{"path":[]},{"path":"https://bluefoxr.github.io/COINr/reference/Normalise.coin.html","id":"global-specification","dir":"Reference","previous_headings":"","what":"Global specification","title":"Create a normalised data set — Normalise.coin","text":"global_specs argument list specifies normalisation function function parameters used normalise indicators found data set. Unless indiv_specs specified, applied indicators. list two entries: .$f_n: name function use normalise indicator .$f_n_para: parameters pass f_n, apart numeric vector (column data set) list, f_n character string name normalisation function. example, f_n = \"n_minmax\" calls n_minmax() function. f_n_para list arguments f_n. means function can passed Normalise(), long first argument x, numeric vector, returns numeric vector length. See n_minmax() example. f_n_para required named list. e.g. define function f1(x, arg1, arg2) specify f_n = \"f1\", f_n_para = list(arg1 = val1, arg2 = val2), val1 val2 values assigned arguments arg1 arg2 respectively. default list global_specs : list(f_n = \"n_minmax\", f_n_para = list(l_u = c(0,100))), .e. min-max normalisation 0 100. Note, COINr normalisation functions (passed f_n) form n_*(). Type n_ R Studio console press Tab key see list. function includes special case \"distance target\" normalisation. Setting global_specs = list(f_n = \"n_dist2targ\") apply distance target normalisation, automatically passing targets found \"Target\" column iMeta.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Normalise.coin.html","id":"individual-column-specification","dir":"Reference","previous_headings":"","what":"Individual column specification","title":"Create a normalised data set — Normalise.coin","text":"Optionally, indicators can normalised different normalisation functions parameters using indiv_specs argument. must specified named list e.g. list(i1 = specs1, i2 = specs2) i1 i2 iCodes apply individual normalisation , specs1 specs2 respectively lists format global_specs (see ). words, indiv_specs big list wrapping together global_specs-style lists. iCodes named indiv_specs ( .e. names(indiv_specs)) normalised using specifications global_specs. indiv_specs lists exceptions global_specs. See also vignette(\"normalise\") details.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Normalise.coin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a normalised data set — Normalise.coin","text":"","code":"# build example coin coin <- build_example_coin(up_to = \"new_coin\") #> iData checked and OK. #> iMeta checked and OK. #> Written data set to .$Data$Raw  # normalise the raw data set coin <- Normalise(coin, dset = \"Raw\") #> Written data set to .$Data$Normalised"},{"path":"https://bluefoxr.github.io/COINr/reference/Normalise.data.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalise a data frame — Normalise.data.frame","title":"Normalise a data frame — Normalise.data.frame","text":"Normalises data frame using specifications specified global_specs. Columns can also optionally normalised individual specifications using indiv_specs argument. variables directions reversed, can specified using directions argument. Non-numeric columns ignored automatically function. default, function normalises indicator using \"min-max\" method, scaling indicators lie 0 100. calls n_minmax() function. Note, COINr normalisation functions form n_*().","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Normalise.data.frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalise a data frame — Normalise.data.frame","text":"","code":"# S3 method for data.frame Normalise(x, global_specs = NULL, indiv_specs = NULL, directions = NULL, ...)"},{"path":"https://bluefoxr.github.io/COINr/reference/Normalise.data.frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalise a data frame — Normalise.data.frame","text":"x data frame global_specs Specifications apply columns, apart specified indiv_specs. See details. indiv_specs Specifications applied specific columns, overriding specified global_specs. See details. directions optional data frame containing following columns: iCode indicator code, corresponding column names data frame Direction numeric vector entries either -1 1 directions specified, directions assigned 1. Non-numeric columns need directions assigned. ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Normalise.data.frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalise a data frame — Normalise.data.frame","text":"normalised data frame","code":""},{"path":[]},{"path":"https://bluefoxr.github.io/COINr/reference/Normalise.data.frame.html","id":"global-specification","dir":"Reference","previous_headings":"","what":"Global specification","title":"Normalise a data frame — Normalise.data.frame","text":"global_specs argument list specifies normalisation function function parameters used normalise columns x. Unless indiv_specs specified, applied numeric columns x. list two entries: .$f_n: name function use normalise column .$f_n_para: parameters pass f_n, apart numeric vector (column x) list, f_n character string name normalisation function. example, f_n = \"n_minmax\" calls n_minmax() function. f_n_para list arguments f_n. means function can passed Normalise(), long first argument x, numeric vector, returns numeric vector length. See n_minmax() example. f_n_para required named list. e.g. define function f1(x, arg1, arg2) specify f_n = \"f1\", f_n_para = list(arg1 = val1, arg2 = val2), val1 val2 values assigned arguments arg1 arg2 respectively. default list global_specs : list(f_n = \"n_minmax\", f_n_para = list(l_u = c(0,100))). Note, COINr normalisation functions (passed f_n) form n_*(). Type n_ R Studio console press Tab key see list.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Normalise.data.frame.html","id":"individual-column-specification","dir":"Reference","previous_headings":"","what":"Individual column specification","title":"Normalise a data frame — Normalise.data.frame","text":"Optionally, columns x can normalised different normalisation functions parameters using indiv_specs argument. must specified named list e.g. list(i1 = specs1, i2 = specs2) i1 i2 column names x apply individual normalisation , specs1 specs2 respectively lists format global_specs (see ). words, indiv_specs big list wrapping together global_specs-style lists. numeric columns x named indiv_specs ( .e. names(indiv_specs)) normalised using specifications global_specs. indiv_specs lists exceptions global_specs. See also vignette(\"normalise\") details.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Normalise.data.frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalise a data frame — Normalise.data.frame","text":"","code":"iris_norm <- Normalise(iris) head(iris_norm) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1    22.222222    62.50000     6.779661    4.166667  setosa #> 2    16.666667    41.66667     6.779661    4.166667  setosa #> 3    11.111111    50.00000     5.084746    4.166667  setosa #> 4     8.333333    45.83333     8.474576    4.166667  setosa #> 5    19.444444    66.66667     6.779661    4.166667  setosa #> 6    30.555556    79.16667    11.864407   12.500000  setosa"},{"path":"https://bluefoxr.github.io/COINr/reference/Normalise.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalise data — Normalise","title":"Normalise data — Normalise","text":"generic function normalising variables indicators, .e. bringing onto common scale. Please see individual method documentation depending data class:","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Normalise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalise data — Normalise","text":"","code":"Normalise(x, ...)"},{"path":"https://bluefoxr.github.io/COINr/reference/Normalise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalise data — Normalise","text":"x Object normalised ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Normalise.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normalise data — Normalise","text":"Normalise.numeric() Normalise.data.frame() Normalise.coin() Normalise.purse() See also vignette(\"normalise\") details. function replaces now-defunct normalise() COINr < v1.0.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Normalise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalise data — Normalise","text":"","code":"# See individual method documentation."},{"path":"https://bluefoxr.github.io/COINr/reference/Normalise.numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalise a numeric vector — Normalise.numeric","title":"Normalise a numeric vector — Normalise.numeric","text":"Normalise numeric vector using specified function f_n, possible reversal direction using direction.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Normalise.numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalise a numeric vector — Normalise.numeric","text":"","code":"# S3 method for numeric Normalise(x, f_n = NULL, f_n_para = NULL, direction = 1, ...)"},{"path":"https://bluefoxr.github.io/COINr/reference/Normalise.numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalise a numeric vector — Normalise.numeric","text":"x Object normalised f_n normalisation method, specified string refers function form f_n(x, npara). See details. Defaults \"n_minmax\" min-max function. f_n_para Supporting list arguments f_n. required list. direction direction = -1 highest values x correspond lowest values normalised x. Else direction = 1 direction x unaltered. ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Normalise.numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalise a numeric vector — Normalise.numeric","text":"normalised numeric vector","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Normalise.numeric.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normalise a numeric vector — Normalise.numeric","text":"Normalisation specified using f_n f_n_para arguments. , f_n character string name normalisation function. example, f_n = \"n_minmax\" calls n_minmax() function. f_n_para list arguments f_n. means function can passed Normalise(), long first argument x, numeric vector, returns numeric vector length. See n_minmax() example. f_n_para required named list. e.g. define function f1(x, arg1, arg2) specify f_n = \"f1\", f_n_para = list(arg1 = val1, arg2 = val2), val1 val2 values assigned arguments arg1 arg2 respectively. See also vignette(\"normalise\") details.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Normalise.numeric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalise a numeric vector — Normalise.numeric","text":"","code":"# example vector x <- runif(10)  # normalise using distance to reference (5th data point) x_norm <- Normalise(x, f_n = \"n_dist2ref\", f_n_para = list(iref = 5))  # view side by side data.frame(x, x_norm) #>             x     x_norm #> 1  0.47815416  8.0596600 #> 2  0.30566035  4.4020977 #> 3  0.69262731 12.6073532 #> 4  0.61376736 10.9352052 #> 5  0.14521448  1.0000000 #> 6  0.72245226 13.2397621 #> 7  0.09805362  0.0000000 #> 8  0.85373857 16.0235598 #> 9  0.12444634  0.5596319 #> 10 0.36045055  5.5638701"},{"path":"https://bluefoxr.github.io/COINr/reference/Normalise.purse.html","id":null,"dir":"Reference","previous_headings":"","what":"Create normalised data sets in a purse of coins — Normalise.purse","title":"Create normalised data sets in a purse of coins — Normalise.purse","text":"creates normalised data sets coin purse. respects, works similar way normalising coin, reason please see Normalise.coin() documentation. however special case terms operating purse coins. , dealing time series data, often desirable normalise whole panel data set rather independently time point. makes resulting index aggregates comparable time. , global argument controls whether normalise coin independently normalise across data . respects, function behaves Normalise.coin().","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Normalise.purse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create normalised data sets in a purse of coins — Normalise.purse","text":"","code":"# S3 method for purse Normalise(   x,   dset,   global_specs = NULL,   indiv_specs = NULL,   directions = NULL,   global = TRUE,   write_to = NULL,   ... )"},{"path":"https://bluefoxr.github.io/COINr/reference/Normalise.purse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create normalised data sets in a purse of coins — Normalise.purse","text":"x purse object dset data set normalise coin global_specs Default specifications indiv_specs Individual specifications directions optional data frame containing following columns: iCode indicator code, corresponding column names data set Direction numeric vector entries either -1 1 directions specified, directions taken iMeta table coin, available. global Logical: TRUE, normalisation performed \"globally\" across coins, using e.g. max min indicator coin. effectively makes normalised scores comparable coins scaled using parameters. Otherwise FALSE, coins normalised individually. write_to Optional character string naming data set coin. Data written .$Data[[write_to]]. Default write_to == \"Normalised\". ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Normalise.purse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create normalised data sets in a purse of coins — Normalise.purse","text":"updated purse new normalised data sets added .$Data$Normalised coin","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Normalise.purse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create normalised data sets in a purse of coins — Normalise.purse","text":"specifications passed coin purse. means coin normalised using set specifications directions. need control individual coins, normalise coins individually.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Normalise.purse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create normalised data sets in a purse of coins — Normalise.purse","text":"","code":"# build example purse purse <- build_example_purse(up_to = \"new_coin\", quietly = TRUE)  # normalise raw data set purse <- Normalise(purse, dset = \"Raw\", global = TRUE) #> Written data set to .$Data$Normalised #> Written data set to .$Data$Normalised #> Written data set to .$Data$Normalised #> Written data set to .$Data$Normalised #> Written data set to .$Data$Normalised"},{"path":"https://bluefoxr.github.io/COINr/reference/Regen.coin.html","id":null,"dir":"Reference","previous_headings":"","what":"Regenerate a coin — Regen.coin","title":"Regenerate a coin — Regen.coin","text":"Regenerates .$Data entries coin rerunning construction functions according specifications .$Log. effectively regenerates results. Different variations coins can quickly achieved editing saved arguments .$Log regenerating.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Regen.coin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regenerate a coin — Regen.coin","text":"","code":"# S3 method for coin Regen(x, from = NULL, quietly = TRUE, ...)"},{"path":"https://bluefoxr.github.io/COINr/reference/Regen.coin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regenerate a coin — Regen.coin","text":"x coin class object Optional: construction function name. specified, regeneration begins function, rather re-running functions. quietly TRUE (default), messages suppressed building. ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Regen.coin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regenerate a coin — Regen.coin","text":"Updated coin object regenerated results (data sets).","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Regen.coin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Regenerate a coin — Regen.coin","text":"argument allows partial regeneration, starting specified function. can helpful speed regeneration cases. However, keep mind change .$Log argument function run point choose start running , affect results. Note sets weights passed regenerated COIN, anything .$Analysis removed recalculated. See also vignette(\"adjustments\") info regeneration.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Regen.coin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regenerate a coin — Regen.coin","text":"","code":"# build full example coin coin <- build_example_coin(quietly = TRUE)  # copy coin coin2 <- coin  # change to prank function (percentile ranks) # we don't need to specify any additional parameters (f_n_para) here coin2$Log$Normalise$global_specs <- list(f_n = \"n_prank\")  # regenerate coin2 <- Regen(coin2)  # compare index, sort by absolute rank difference compare_coins(coin, coin2, dset = \"Aggregated\", iCode = \"Index\",               sort_by = \"Abs.diff\", decreasing = TRUE) #>    uCode coin.1 coin.2 Diff Abs.diff #> 43   PRT     27     17   10       10 #> 29   LAO     48     39    9        9 #> 33   MLT     10     19   -9        9 #> 14   EST     22     16    6        6 #> 21   IDN     43     49   -6        6 #> 13   ESP     19     24   -5        5 #> 19   HRV     18     23   -5        5 #> 30   LTU     16     11    5        5 #> 35   MNG     44     48   -4        4 #> 17   GBR     15     12    3        3 #> 25   JPN     34     31    3        3 #> 32   LVA     23     20    3        3 #> 40   PAK     50     47    3        3 #> 3    BEL      5      7   -2        2 #> 4    BGD     46     44    2        2 #> 8    CHN     49     51   -2        2 #> 20   HUN     20     22   -2        2 #> 23   IRL     12     14   -2        2 #> 26   KAZ     47     45    2        2 #> 28   KOR     31     33   -2        2 #> 31   LUX      8     10   -2        2 #> 37   NLD      2      4   -2        2 #> 41   PHL     38     40   -2        2 #> 42   POL     26     28   -2        2 #> 47   SVK     24     26   -2        2 #> 48   SVN     11      9    2        2 #> 2    AUT      7      6    1        1 #> 5    BGR     30     29    1        1 #> 6    BRN     40     41   -1        1 #> 9    CYP     29     30   -1        1 #> 10   CZE     17     18   -1        1 #> 11   DEU      9      8    1        1 #> 12   DNK      3      2    1        1 #> 22   IND     45     46   -1        1 #> 24   ITA     28     27    1        1 #> 27   KHM     37     36    1        1 #> 34   MMR     41     42   -1        1 #> 36   MYS     39     38    1        1 #> 38   NOR      4      3    1        1 #> 39   NZL     33     34   -1        1 #> 45   RUS     51     50    1        1 #> 46   SGP     14     15   -1        1 #> 49   SWE      6      5    1        1 #> 50   THA     42     43   -1        1 #> 51   VNM     36     37   -1        1 #> 1    AUS     35     35    0        0 #> 7    CHE      1      1    0        0 #> 15   FIN     13     13    0        0 #> 16   FRA     21     21    0        0 #> 18   GRC     32     32    0        0 #> 44   ROU     25     25    0        0"},{"path":"https://bluefoxr.github.io/COINr/reference/Regen.html","id":null,"dir":"Reference","previous_headings":"","what":"Regenerate a coin or purse — Regen","title":"Regenerate a coin or purse — Regen","text":"Methods regenerating coins purses. Regeneration re-running functions used build coin/purse, using order parameters found .$Log list coin.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Regen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regenerate a coin or purse — Regen","text":"","code":"Regen(x, from = NULL, quietly = TRUE)"},{"path":"https://bluefoxr.github.io/COINr/reference/Regen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regenerate a coin or purse — Regen","text":"x coin purse object regenerated Optional: construction function name. specified, regeneration begins function, rather re-running functions. quietly TRUE (default), messages suppressed building.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Regen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regenerate a coin or purse — Regen","text":"regenerated object","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Regen.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Regenerate a coin or purse — Regen","text":"Please see individual method documentation: Regen.coin() Regen.purse() See also vignette(\"adjustments\"). function replaces now-defunct regen() COINr < v1.0.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Regen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regenerate a coin or purse — Regen","text":"","code":"# see individual method examples"},{"path":"https://bluefoxr.github.io/COINr/reference/Regen.purse.html","id":null,"dir":"Reference","previous_headings":"","what":"Regenerate a purse — Regen.purse","title":"Regenerate a purse — Regen.purse","text":"Regenerates .$Data entries coins rerunning construction functions according specifications .$Log, coin purse. effectively regenerates results.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Regen.purse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regenerate a purse — Regen.purse","text":"","code":"# S3 method for purse Regen(x, from = NULL, quietly = TRUE, ...)"},{"path":"https://bluefoxr.github.io/COINr/reference/Regen.purse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regenerate a purse — Regen.purse","text":"x purse class object Optional: construction function name. specified, regeneration begins function, rather re-running functions. quietly TRUE (default), messages suppressed building. ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Regen.purse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regenerate a purse — Regen.purse","text":"Updated purse object regenerated results.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Regen.purse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Regenerate a purse — Regen.purse","text":"argument allows partial regeneration, starting specified function. can helpful speed regeneration cases. However, keep mind change .$Log argument function run point choose start running , affect results. Note moment, regeneration purses partially supported. usually, normalisation step, necessary normalise across full panel data set (see global argument Normalise()). moment, purse regeneration performed regenerating coin individually, allow global normalisation done purse level. may fixed future releases. See also documentation Regen.coin() vignette(\"adjustments\").","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Regen.purse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regenerate a purse — Regen.purse","text":"","code":"# see examples from Regen.coin() and vignette(\"adjustments\")"},{"path":"https://bluefoxr.github.io/COINr/reference/SA_estimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate sensitivity indices — SA_estimate","title":"Estimate sensitivity indices — SA_estimate","text":"Post process sample obtain sensitivity indices. function takes univariate output generated result running Monte Carlo sample SA_sample() system. estimates sensitivity indices using sample.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/SA_estimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate sensitivity indices — SA_estimate","text":"","code":"SA_estimate(yy, N, d, Nboot = NULL)"},{"path":"https://bluefoxr.github.io/COINr/reference/SA_estimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate sensitivity indices — SA_estimate","text":"yy vector model output values, result \\(N(d+2)\\) Monte Carlo design. N number sample points per dimension. d dimensionality sample Nboot Number bootstrap draws estimates confidence intervals sensitivity indices. specified, bootstrapping applied.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/SA_estimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate sensitivity indices — SA_estimate","text":"list output variance, plus data frame first order total order sensitivity indices variable, well bootstrapped confidence intervals !.null(Nboot).","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/SA_estimate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate sensitivity indices — SA_estimate","text":"function built used inside get_sensitivity().","code":""},{"path":[]},{"path":"https://bluefoxr.github.io/COINr/reference/SA_estimate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate sensitivity indices — SA_estimate","text":"","code":"# This is a generic example rather than applied to a COIN (for reasons of speed)  # A simple test function testfunc <- function(x){ x[1] + 2*x[2] + 3*x[3] }  # First, generate a sample X <- SA_sample(500, 3)  # Run sample through test function to get corresponding output for each row y <- apply(X, 1, testfunc)  # Estimate sensitivity indices using sample SAinds <- SA_estimate(y, N = 500, d = 3, Nboot = 1000) SAinds$SensInd #>   Variable         Si       STi       Si_q5    Si_q95     STi_q5    STi_q95 #> 1       V1 0.03632379 0.0672327 -0.04925641 0.1086299 0.06107785 0.07348848 #> 2       V2 0.12897255 0.2654401 -0.01537692 0.2831646 0.24144805 0.29116440 #> 3       V3 0.51837666 0.6087730  0.28718323 0.7434606 0.55815962 0.66085024 # Notice that total order indices have narrower confidence intervals than first order."},{"path":"https://bluefoxr.github.io/COINr/reference/SA_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate sample for sensitivity analysis — SA_sample","title":"Generate sample for sensitivity analysis — SA_sample","text":"Generates input sample Monte Carlo estimation global sensitivity indices. Used get_sensitivity() function. total sample size \\(N(d+2)\\).","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/SA_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate sample for sensitivity analysis — SA_sample","text":"","code":"SA_sample(N, d)"},{"path":"https://bluefoxr.github.io/COINr/reference/SA_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate sample for sensitivity analysis — SA_sample","text":"N number sample points per dimension. d dimensionality sample","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/SA_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate sample for sensitivity analysis — SA_sample","text":"matrix \\(N(d+2)\\) rows d columns.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/SA_sample.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate sample for sensitivity analysis — SA_sample","text":"function generates Monte Carlo sample described e.g. Global Sensitivity Analysis: Primer book.","code":""},{"path":[]},{"path":"https://bluefoxr.github.io/COINr/reference/SA_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate sample for sensitivity analysis — SA_sample","text":"","code":"# sensitivity analysis sample for 3 dimensions with 100 points per dimension X <- SA_sample(100, 3)"},{"path":"https://bluefoxr.github.io/COINr/reference/Screen.coin.html","id":null,"dir":"Reference","previous_headings":"","what":"Screen units based on data availability — Screen.coin","title":"Screen units based on data availability — Screen.coin","text":"Screens units based data availability threshold presence zeros. Units can optionally \"forced\" included excluded, making exceptions data availability threshold.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Screen.coin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Screen units based on data availability — Screen.coin","text":"","code":"# S3 method for coin Screen(   x,   dset,   unit_screen,   dat_thresh = NULL,   nonzero_thresh = NULL,   Force = NULL,   out2 = \"coin\",   write_to = NULL,   ... )"},{"path":"https://bluefoxr.github.io/COINr/reference/Screen.coin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Screen units based on data availability — Screen.coin","text":"x coin dset data set checked/screened unit_screen Specifies whether screen units based data availability zero values. set \"byNA\", screens units data availability dat_thresh set \"byzeros\", screens units non-zero values nonzero_thresh set \"byNAandzeros\", screens units based either previous two criteria true. dat_thresh data availability threshold (>= 1 <= 0) used flagging low data screening units unit_screen != \"none\". Default 0.66. nonzero_thresh dat_thresh non-zero values. Defaults 0.05, .e. flag units less 5% non-zero values (equivalently 95% zero values). Force data frame additional countries force inclusion exclusion. Required columns uCode (unit code(s)) Include (logical: TRUE include FALSE exclude). Specifications override exclusion/inclusion based data rules. out2 output results. \"COIN\" (default COIN input), appends updated COIN, otherwise \"list\" outputs data frame. write_to specified, writes aggregated data .$Data[[write_to]]. Default write_to = \"Screened\". ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Screen.coin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Screen units based on data availability — Screen.coin","text":"updated coin data frames showing missing data .$Analysis, new data set .$Data$Screened. out2 = \"list\" wraps missing data stats screened data set list.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Screen.coin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Screen units based on data availability — Screen.coin","text":"two main criteria interest NA values, zeros. summary table gives percentages NA values unit, across indicators, percentage zero values (percentage non-NA values). unit flagged low data many zeros based thresholds. See also vignette(\"screening\").","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Screen.coin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Screen units based on data availability — Screen.coin","text":"","code":"# build example coin coin <- build_example_coin(up_to = \"new_coin\", quietly = TRUE)  # screen units from raw dset coin <- Screen(coin, dset = \"Raw\", unit_screen = \"byNA\",                dat_thresh = 0.85, write_to = \"Filtered_85pc\") #> Written data set to .$Data$Filtered_85pc  # some details about the coin by calling its print method coin #> -------------- #> A coin with... #> -------------- #> Input: #>   Units: 51 (AUS, AUT, BEL, ...) #>   Indicators: 49 (Goods, Services, FDI, ...) #>   Denominators: 4 (Area, Energy, GDP, ...) #>   Groups: 4 (GDP_group, GDPpc_group, Pop_group, ...) #>  #> Structure: #>   Level 1 Indicator: 49 indicators (FDI, ForPort, Goods, ...)  #>   Level 2 Pillar: 8 groups (ConEcFin, Instit, P2P, ...)  #>   Level 3 Sub-index: 2 groups (Conn, Sust)  #>   Level 4 Index: 1 groups (Index)  #>  #> Data sets: #>   Raw (51 units) #>   Filtered_85pc (48 units)"},{"path":"https://bluefoxr.github.io/COINr/reference/Screen.data.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Screen units based on data availability — Screen.data.frame","title":"Screen units based on data availability — Screen.data.frame","text":"Screens units (rows) based data availability threshold presence zeros. Units can optionally \"forced\" included excluded, making exceptions data availability threshold.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Screen.data.frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Screen units based on data availability — Screen.data.frame","text":"","code":"# S3 method for data.frame Screen(   x,   id_col = NULL,   unit_screen,   dat_thresh = NULL,   nonzero_thresh = NULL,   Force = NULL,   ... )"},{"path":"https://bluefoxr.github.io/COINr/reference/Screen.data.frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Screen units based on data availability — Screen.data.frame","text":"x data frame id_col Name column data frame used identifier, e.g. normally uCode indicator data sets used coins. must specified Force specified. unit_screen Specifies whether screen units based data availability zero values. set \"byNA\", screens units data availability dat_thresh set \"byzeros\", screens units non-zero values nonzero_thresh set \"byNAandzeros\", screens units based either previous two criteria true. dat_thresh data availability threshold (>= 1 <= 0) used flagging low data screening units unit_screen != \"none\". Default 0.66. nonzero_thresh dat_thresh non-zero values. Defaults 0.05, .e. flag units less 5% non-zero values (equivalently 95% zero values). Force data frame additional units force inclusion exclusion. Required columns uCode (unit code(s)) Include (logical: TRUE include FALSE exclude). Specifications override exclusion/inclusion based data rules. ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Screen.data.frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Screen units based on data availability — Screen.data.frame","text":"Missing data stats screened data list.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Screen.data.frame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Screen units based on data availability — Screen.data.frame","text":"two main criteria interest NA values, zeros. summary table gives percentages NA values unit, across indicators, percentage zero values (percentage non-NA values). unit flagged low data many zeros based thresholds. See also vignette(\"screening\").","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Screen.data.frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Screen units based on data availability — Screen.data.frame","text":"","code":"# example data iData <- ASEM_iData[40:51, c(\"uCode\", \"Research\", \"Pat\", \"CultServ\", \"CultGood\")]  # screen to 75% data availability (by row) l_scr <- Screen(iData, unit_screen = \"byNA\", dat_thresh = 0.75)  # summary of screening head(l_scr$DataSummary) #>    uCode N_missing N_zero N_miss_or_zero Dat_Avail Non_Zero LowData LowNonZero #> 40   KOR         1      0              1      0.75        1   FALSE      FALSE #> 41   LAO         3      0              3      0.25        1    TRUE      FALSE #> 42   MYS         0      0              0      1.00        1   FALSE      FALSE #> 43   MNG         0      0              0      1.00        1   FALSE      FALSE #> 44   MMR         2      0              2      0.50        1    TRUE      FALSE #> 45   NZL         0      0              0      1.00        1   FALSE      FALSE #>    LowDatOrZeroFlag Included #> 40            FALSE     TRUE #> 41             TRUE    FALSE #> 42            FALSE     TRUE #> 43            FALSE     TRUE #> 44             TRUE    FALSE #> 45            FALSE     TRUE"},{"path":"https://bluefoxr.github.io/COINr/reference/Screen.html","id":null,"dir":"Reference","previous_headings":"","what":"Screen units based on data availability — Screen","title":"Screen units based on data availability — Screen","text":"generic function screening units/rows based data availability. See method documentation details:","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Screen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Screen units based on data availability — Screen","text":"","code":"Screen(x, ...)"},{"path":"https://bluefoxr.github.io/COINr/reference/Screen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Screen units based on data availability — Screen","text":"x Object screened ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Screen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Screen units based on data availability — Screen","text":"object class x","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Screen.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Screen units based on data availability — Screen","text":"function replaces now-defunct checkData() COINr < v1.0. Screen.data.frame() Screen.coin() Screen.purse()","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Screen.purse.html","id":null,"dir":"Reference","previous_headings":"","what":"Screen units based on data availability — Screen.purse","title":"Screen units based on data availability — Screen.purse","text":"Screens units based data availability threshold presence zeros. Units can optionally \"forced\" included excluded, making exceptions data availability threshold.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Screen.purse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Screen units based on data availability — Screen.purse","text":"","code":"# S3 method for purse Screen(   x,   dset,   unit_screen,   dat_thresh = NULL,   nonzero_thresh = NULL,   Force = NULL,   write_to = NULL,   ... )"},{"path":"https://bluefoxr.github.io/COINr/reference/Screen.purse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Screen units based on data availability — Screen.purse","text":"x purse object dset data set checked/screened unit_screen Specifies whether screen units based data availability zero values. set \"byNA\", screens units data availability dat_thresh set \"byzeros\", screens units non-zero values nonzero_thresh set \"byNAandzeros\", screens units based either previous two criteria true. dat_thresh data availability threshold (>= 1 <= 0) used flagging low data screening units unit_screen != \"none\". Default 0.66. nonzero_thresh dat_thresh non-zero values. Defaults 0.05, .e. flag units less 5% non-zero values (equivalently 95% zero values). Force data frame additional countries force inclusion exclusion. Required columns uCode (unit code(s)) Include (logical: TRUE include FALSE exclude). Specifications override exclusion/inclusion based data rules. write_to specified, writes aggregated data .$Data[[write_to]]. Default write_to = \"Screened\". ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Screen.purse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Screen units based on data availability — Screen.purse","text":"updated purse coins screened updated.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Screen.purse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Screen units based on data availability — Screen.purse","text":"two main criteria interest NA values, zeros. summary table gives percentages NA values unit, across indicators, percentage zero values (percentage non-NA values). unit flagged low data many zeros based thresholds. See also vignette(\"screening\").","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Screen.purse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Screen units based on data availability — Screen.purse","text":"","code":"# see vignette(\"screening\") for an example."},{"path":"https://bluefoxr.github.io/COINr/reference/Treat.coin.html","id":null,"dir":"Reference","previous_headings":"","what":"Treat a data set in a coin for outliers — Treat.coin","title":"Treat a data set in a coin for outliers — Treat.coin","text":"Operates two-stage data treatment process data set specified dset, based two data treatment functions, pass/fail function detects outliers. method data treatment can either specified global_specs argument (applies specifications indicators specified data set), else (additionally) indiv_specs argument allows different methods applied indicator. See details. simpler function data treatment, see wrapper function qTreat().","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Treat.coin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Treat a data set in a coin for outliers — Treat.coin","text":"","code":"# S3 method for coin Treat(   x,   dset,   global_specs = NULL,   indiv_specs = NULL,   combine_treat = FALSE,   out2 = \"coin\",   write_to = NULL,   write2log = TRUE,   ... )"},{"path":"https://bluefoxr.github.io/COINr/reference/Treat.coin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Treat a data set in a coin for outliers — Treat.coin","text":"x coin dset named data set available .$Data global_specs list specifying treatment apply columns. applied columns, except specified indiv_specs argument. Alternatively, set \"none\" apply treatment. See details. indiv_specs list specifying individual treatment apply specific columns, overriding global_specs columns. See details. combine_treat default, f1 fails pass f_pass, f2 applied original x, rather treated output f1. combine_treat = TRUE, f2 instead applied output f1, two treatments combined. out2 type function output: either \"coin\" return updated coin, \"list\" return list treated data treatment details. write_to specified, writes aggregated data .$Data[[write_to]]. Default write_to = \"Treated\". write2log Logical: FALSE, arguments function written coin log, function invoked regenerating. Recommend keep TRUE unless good reason otherwise. ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Treat.coin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Treat a data set in a coin for outliers — Treat.coin","text":"updated coin new data set .Data$Treated added, plus analysis information .$Analysis$Treated.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Treat.coin.html","id":"global-specifications","dir":"Reference","previous_headings":"","what":"Global specifications","title":"Treat a data set in a coin for outliers — Treat.coin","text":"method data treatment applied indicators, use global_specs argument. argument takes structured list looks like :   entries list correspond arguments Treat.numeric(), meanings also described detail . brief, f1 name function apply first round data treatment, f1_para list additional parameters pass f1, f2 f2_para equivalently function name parameters second round data treatment, f_pass f_pass_para function additional arguments check existence outliers. default values global_specs follows:   shows default (.e. global_specs specified), indicator checked outliers check_SkewKurt() function, uses skew kurtosis thresholds parameters. , outliers exist, first function winsorise() applied, also uses skew kurtosis parameters, well maximum number winsorised points. Winsorisation function satisfy f_pass, log_CT() function invoked. change global specifications, supply whole list. , example, happy defaults want simply change maximum number Winsorised points, specify e.g. global_specs = list(f1_para = list(winmax = 3)). words, subset list can specified, long structure list correct.","code":"global_specs = list(f1 = .,                     f1_para = list(.),                     f2 = .,                     f2_para = list(.),                     f_pass = .,                     f_pass_para = list()                     ) global_specs = list(f1 = \"winsorise\",                      f1_para = list(na.rm = TRUE,                                     winmax = 5,                                     skew_thresh = 2,                                     kurt_thresh = 3.5,                                     force_win = FALSE),                      f2 = \"log_CT\",                      f2_para = list(na.rm = TRUE),                      f_pass = \"check_SkewKurt\",                      f_pass_para = list(na.rm = TRUE,                                         skew_thresh = 2,                                         kurt_thresh = 3.5))"},{"path":"https://bluefoxr.github.io/COINr/reference/Treat.coin.html","id":"individual-specifications","dir":"Reference","previous_headings":"","what":"Individual specifications","title":"Treat a data set in a coin for outliers — Treat.coin","text":"indiv_specs argument allows different specifications indicator. done wrapping multiple lists format list described global_specs one single list, named according column names x. example, date set indicators codes \"x1\", \"x2\" \"x3\", specify individual treatment follows:   list(.) specifications list format global_specs. indicators named indiv_specs treated using specifications global_specs (defaults specified). global_specs, subset global_specs list may specified entry. Additionally, special case, specifying list entry e.g. x1 = \"none\" apply data treatment indicator \"x1\". See vignette(\"treat\") examples individual treatment.","code":"indiv_specs = list(x1 = list(.),                    x2 = list(.)                    x3 = list(.))"},{"path":"https://bluefoxr.github.io/COINr/reference/Treat.coin.html","id":"function-methodology","dir":"Reference","previous_headings":"","what":"Function methodology","title":"Treat a data set in a coin for outliers — Treat.coin","text":"function set allow functions passed data treatment functions (f1 f2), well function passed outlier detection function f_pass, specified global_specs indiv_specs arguments. arrangement function inspired fairly standard data treatment process applied indicators, consists checking skew kurtosis, criteria met, applying Winsorisation specified limit. Winsorisation still bring skew kurtosis within limits, applying nonlinear transformation log Box-Cox. function generalises process using following general steps: Check variable passes fails using f_pass f_pass returns FALSE, apply f1, else return x unmodified Check using *f_pass f_pass still returns FALSE, apply f2 Return modified x well information. \"typical\" case described f1 Winsorisation function, f2 nonlinear transformation f_pass skew kurtosis check. Parameters can passed three functions named list, example specify maximum number points Winsorise, Box-Cox parameters, anything else. constraints : f1, f2 f_pass must follow format function(x, f_para), x numerical vector, f_para list function parameters passed function, specified f1_para f1 similarly functions. function parameters x, f_para can omitted. f1 f2 return either list .$x modified numerical vector, information attached list, , simply x output. f_pass must return logical value, TRUE indicates x passes criteria (therefore need () treatment), FALSE means fails meet criteria. See also vignette(\"treat\").","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Treat.coin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Treat a data set in a coin for outliers — Treat.coin","text":"","code":"# build example coin coin <- build_example_coin(up_to = \"new_coin\") #> iData checked and OK. #> iMeta checked and OK. #> Written data set to .$Data$Raw  # treat raw data set coin <- Treat(coin, dset = \"Raw\") #> Written data set to .$Data$Treated  # summary of treatment for each indicator head(coin$Analysis$Treated$Dets_Table) #>     iCode check_SkewKurt0.Pass check_SkewKurt0.Skew check_SkewKurt0.Kurt #> 1     LPI                 TRUE           -0.3042681           -0.6567514 #> 2 Flights                FALSE            2.1032872            4.5088794 #> 3    Ship                 TRUE           -0.5756680           -0.6814795 #> 4    Bord                FALSE            2.1482360            5.7914905 #> 5    Elec                FALSE            2.2252736            5.7910268 #> 6     Gas                FALSE            2.8294486           10.3346494 #>   winsorise.nwin check_SkewKurt1.Pass check_SkewKurt1.Skew check_SkewKurt1.Kurt #> 1             NA                   NA                   NA                   NA #> 2              1                 TRUE             1.900658             3.336065 #> 3             NA                   NA                   NA                   NA #> 4              1                 TRUE             1.899211             4.346298 #> 5              1                 TRUE             1.717744             2.586062 #> 6              1                 TRUE             1.602518             1.525576"},{"path":"https://bluefoxr.github.io/COINr/reference/Treat.data.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Treat a data frame for outliers — Treat.data.frame","title":"Treat a data frame for outliers — Treat.data.frame","text":"Operates two-stage data treatment process, based two data treatment functions, pass/fail function detects outliers. method data treatment can either specified global_specs argument (applies specifications columns x), else (additionally) indiv_specs argument allows different methods applied column. See details. simpler function data treatment, see wrapper function qTreat().","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Treat.data.frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Treat a data frame for outliers — Treat.data.frame","text":"","code":"# S3 method for data.frame Treat(x, global_specs = NULL, indiv_specs = NULL, combine_treat = FALSE, ...)"},{"path":"https://bluefoxr.github.io/COINr/reference/Treat.data.frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Treat a data frame for outliers — Treat.data.frame","text":"x data frame. Can numeric non-numeric columns. global_specs list specifying treatment apply columns. applied columns, except specified indiv_specs argument. Alternatively, set \"none\" apply treatment. See details. indiv_specs list specifying individual treatment apply specific columns, overriding global_specs columns. See details. combine_treat default, f1 fails pass f_pass, f2 applied original x, rather treated output f1. combine_treat = TRUE, f2 instead applied output f1, two treatments combined. ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Treat.data.frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Treat a data frame for outliers — Treat.data.frame","text":"treated data frame data","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Treat.data.frame.html","id":"global-specifications","dir":"Reference","previous_headings":"","what":"Global specifications","title":"Treat a data frame for outliers — Treat.data.frame","text":"method data treatment applied columns, use global_specs argument. argument takes structured list looks like :   entries list correspond arguments Treat.numeric(), meanings also described detail . brief, f1 name function apply first round data treatment, f1_para list additional parameters pass f1, f2 f2_para equivalently function name parameters second round data treatment, f_pass f_pass_para function additional arguments check existence outliers. default values global_specs follows:   shows default (.e. global_specs specified), column checked outliers check_SkewKurt() function, uses skew kurtosis thresholds parameters. , outliers exist, first function winsorise() applied, also uses skew kurtosis parameters, well maximum number winsorised points. Winsorisation function satisfy f_pass, log_CT() function invoked. change global specifications, supply whole list. , example, happy defaults want simply change maximum number Winsorised points, specify e.g. global_specs = list(f1_para = list(winmax = 3)). words, subset list can specified, long structure list correct.","code":"global_specs = list(f1 = .,                     f1_para = list(.),                     f2 = .,                     f2_para = list(.),                     f_pass = .,                     f_pass_para = list()                     ) global_specs = list(f1 = \"winsorise\",                      f1_para = list(na.rm = TRUE,                                     winmax = 5,                                     skew_thresh = 2,                                     kurt_thresh = 3.5,                                     force_win = FALSE),                      f2 = \"log_CT\",                      f2_para = list(na.rm = TRUE),                      f_pass = \"check_SkewKurt\",                      f_pass_para = list(na.rm = TRUE,                                         skew_thresh = 2,                                         kurt_thresh = 3.5))"},{"path":"https://bluefoxr.github.io/COINr/reference/Treat.data.frame.html","id":"individual-specifications","dir":"Reference","previous_headings":"","what":"Individual specifications","title":"Treat a data frame for outliers — Treat.data.frame","text":"indiv_specs argument allows different specifications column x. done wrapping multiple lists format list described global_specs one single list, named according column names x. example, x column names \"x1\", \"x2\" \"x3\", specify individual treatment follows:   list(.) specifications list format global_specs. columns named indiv_specs treated using specifications global_specs (defaults specified). global_specs, subset global_specs list may specified entry. Additionally, special case, specifying list entry e.g. x1 = \"none\" apply data treatment column \"x1\". See vignette(\"treat\") examples individual treatment.","code":"indiv_specs = list(x1 = list(.),                    x2 = list(.)                    x3 = list(.))"},{"path":"https://bluefoxr.github.io/COINr/reference/Treat.data.frame.html","id":"function-methodology","dir":"Reference","previous_headings":"","what":"Function methodology","title":"Treat a data frame for outliers — Treat.data.frame","text":"function set allow functions passed data treatment functions (f1 f2), well function passed outlier detection function f_pass, specified global_specs indiv_specs arguments. arrangement function inspired fairly standard data treatment process applied indicators, consists checking skew kurtosis, criteria met, applying Winsorisation specified limit. Winsorisation still bring skew kurtosis within limits, applying nonlinear transformation log Box-Cox. function generalises process using following general steps: Check variable passes fails using f_pass f_pass returns FALSE, apply f1, else return x unmodified Check using *f_pass f_pass still returns FALSE, apply f2 Return modified x well information. \"typical\" case described f1 Winsorisation function, f2 nonlinear transformation f_pass skew kurtosis check. Parameters can passed three functions named list, example specify maximum number points Winsorise, Box-Cox parameters, anything else. constraints : f1, f2 f_pass must follow format function(x, f_para), x numerical vector, f_para list function parameters passed function, specified f1_para f1 similarly functions. function parameters x, f_para can omitted. f1 f2 return either list .$x modified numerical vector, information attached list, , simply x output. f_pass must return logical value, TRUE indicates x passes criteria (therefore need () treatment), FALSE means fails meet criteria. See also vignette(\"treat\").","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Treat.data.frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Treat a data frame for outliers — Treat.data.frame","text":"","code":"# select three indicators df1 <- ASEM_iData[c(\"Flights\", \"Goods\", \"Services\")]  # treat the data frame using defaults l_treat <- Treat(df1)  # details of data treatment for each column l_treat$Dets_Table #>      iCode check_SkewKurt0.Pass check_SkewKurt0.Skew check_SkewKurt0.Kurt #> 1  Flights                FALSE             2.103287             4.508879 #> 2    Goods                FALSE             2.649973             8.266610 #> 3 Services                 TRUE             1.701085             2.375656 #>   winsorise.nwin check_SkewKurt1.Pass check_SkewKurt1.Skew check_SkewKurt1.Kurt #> 1              1                 TRUE             1.900658            3.3360647 #> 2              2                 TRUE             1.140608            0.1572047 #> 3             NA                   NA                   NA                   NA"},{"path":"https://bluefoxr.github.io/COINr/reference/Treat.html","id":null,"dir":"Reference","previous_headings":"","what":"Treat outliers — Treat","title":"Treat outliers — Treat","text":"Generic function treating outliers using two-step process. See individual method documentation:","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Treat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Treat outliers — Treat","text":"","code":"Treat(x, ...)"},{"path":"https://bluefoxr.github.io/COINr/reference/Treat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Treat outliers — Treat","text":"x Object treated ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Treat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Treat outliers — Treat","text":"Treated object plus details.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Treat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Treat outliers — Treat","text":"Treat.numeric() Treat.data.frame() Treat.coin() Treat.purse() See also vignette(\"treat\"). function replaces now-defunct treat() COINr < v1.0.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Treat.numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Treat a numeric vector for outliers — Treat.numeric","title":"Treat a numeric vector for outliers — Treat.numeric","text":"Operates two-stage data treatment process, based two data treatment functions, pass/fail function detects outliers. function set allow functions passed data treatment functions (f1 f2), well function passed outlier detection function f_pass.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Treat.numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Treat a numeric vector for outliers — Treat.numeric","text":"","code":"# S3 method for numeric Treat(   x,   f1,   f1_para = NULL,   f2 = NULL,   f2_para = NULL,   f_pass,   f_pass_para = NULL,   combine_treat = FALSE,   ... )"},{"path":"https://bluefoxr.github.io/COINr/reference/Treat.numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Treat a numeric vector for outliers — Treat.numeric","text":"x numeric vector. f1 First stage data treatment function e.g. string. f1_para First stage data treatment function parameters named list. f2 First stage data treatment function string. f2_para First stage data treatment function parameters named list. f_pass string specifying outlier detection function - see details. Default \"check_SkewKurt\" f_pass_para arguments pass f_pass(), named list. combine_treat default, f1 fails pass f_pass, f2 applied original x, rather treated output f1. combine_treat = TRUE, f2 instead applied output f1, two treatments combined. ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Treat.numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Treat a numeric vector for outliers — Treat.numeric","text":"treated vector data.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Treat.numeric.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Treat a numeric vector for outliers — Treat.numeric","text":"arrangement function inspired fairly standard data treatment process applied indicators, consists checking skew kurtosis, criteria met, applying Winsorisation specified limit. Winsorisation still bring skew kurtosis within limits, applying nonlinear transformation log Box-Cox. function generalises process using following general steps: Check variable passes fails using f_pass f_pass returns FALSE, apply f1, else return x unmodified Check using *f_pass f_pass still returns FALSE, apply f2 (default original x, see combine_treat parameter) Return modified x well information. \"typical\" case described f1 Winsorisation function, f2 nonlinear transformation f_pass skew kurtosis check. Parameters can passed three functions named list, example specify maximum number points Winsorise, Box-Cox parameters, anything else. constraints : f1, f2 f_pass must follow format function(x, f_para), x numerical vector, f_para list function parameters passed function, specified f1_para f1 similarly functions. function parameters x, f_para can omitted. f1 f2 return either list .$x modified numerical vector, information attached list, , simply x output. f_pass must return logical value, TRUE indicates x passes criteria (therefore need () treatment), FALSE means fails meet criteria. See also vignette(\"treat\").","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Treat.numeric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Treat a numeric vector for outliers — Treat.numeric","text":"","code":"# numbers between 1 and 10 x <- 1:10  # two outliers x <- c(x, 30, 100)  # check whether passes skew/kurt test check_SkewKurt(x) #> $Pass #> [1] FALSE #>  #> $Skew #> [1] 3.063241 #>  #> $Kurt #> [1] 9.741391 #>   # treat using winsorisation l_treat <- Treat(x, f1 = \"winsorise\", f1_para = list(winmax = 2),                  f_pass = \"check_SkewKurt\")  # plot original against treated plot(x, l_treat$x)"},{"path":"https://bluefoxr.github.io/COINr/reference/Treat.purse.html","id":null,"dir":"Reference","previous_headings":"","what":"Treat a purse of coins for outliers — Treat.purse","title":"Treat a purse of coins for outliers — Treat.purse","text":"function calls Treat.coin() coin purse. See documentation function details. See also vignette(\"treat\").","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Treat.purse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Treat a purse of coins for outliers — Treat.purse","text":"","code":"# S3 method for purse Treat(   x,   dset,   global_specs = NULL,   indiv_specs = NULL,   combine_treat = FALSE,   write_to = NULL,   ... )"},{"path":"https://bluefoxr.github.io/COINr/reference/Treat.purse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Treat a purse of coins for outliers — Treat.purse","text":"x purse object dset data set treat coin. global_specs Default specifications. See details Treat.coin(). indiv_specs Individual specifications. See details Treat.coin(). combine_treat default, f1 fails pass f_pass, f2 applied original x, rather treated output f1. combine_treat = TRUE, f2 instead applied output f1, two treatments combined. write_to specified, writes aggregated data .$Data[[write_to]]. Default write_to = \"Treated\". ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Treat.purse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Treat a purse of coins for outliers — Treat.purse","text":"updated purse new treated data sets added .$Data$Treated coin, plus analysis information .$Analysis$Treated","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/Treat.purse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Treat a purse of coins for outliers — Treat.purse","text":"","code":"# See `vignette(\"treat\")`."},{"path":"https://bluefoxr.github.io/COINr/reference/WorldDenoms.html","id":null,"dir":"Reference","previous_headings":"","what":"World denomination data — WorldDenoms","title":"World denomination data — WorldDenoms","text":"small selection common denominator indicators, includes GDP, Population, Area, GDP per capita income group. data sourced World Bank Feb 2021 (data typically 2019). Note intended example data, good idea use updated data World Bank needed. data set, country names altered slightly include accents - simply make portable distributions.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/WorldDenoms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"World denomination data — WorldDenoms","text":"","code":"WorldDenoms"},{"path":"https://bluefoxr.github.io/COINr/reference/WorldDenoms.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"World denomination data — WorldDenoms","text":"data frame 249 rows 7 variables.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/WorldDenoms.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"World denomination data — WorldDenoms","text":"https://data.worldbank.org/","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/a_amean.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted arithmetic mean — a_amean","title":"Weighted arithmetic mean — a_amean","text":"vector weights w relative since formula :","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/a_amean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weighted arithmetic mean — a_amean","text":"","code":"a_amean(x, w)"},{"path":"https://bluefoxr.github.io/COINr/reference/a_amean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weighted arithmetic mean — a_amean","text":"x numeric vector. w vector numeric weights length x.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/a_amean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weighted arithmetic mean — a_amean","text":"weighted mean scalar value","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/a_amean.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Weighted arithmetic mean — a_amean","text":"$$ y = 1(\\sum w) \\sum wx $$ x contains NAs, x values corresponding w values removed applying formula .","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/a_amean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weighted arithmetic mean — a_amean","text":"","code":"x <- c(1:10) w <- c(10:1) a_amean(x,w) #> [1] 4"},{"path":"https://bluefoxr.github.io/COINr/reference/a_copeland.html","id":null,"dir":"Reference","previous_headings":"","what":"Copeland scores — a_copeland","title":"Copeland scores — a_copeland","text":"Aggregates data frame indicator values single column using Copeland method. function calls outrankMatrix().","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/a_copeland.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copeland scores — a_copeland","text":"","code":"a_copeland(X, w = NULL)"},{"path":"https://bluefoxr.github.io/COINr/reference/a_copeland.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copeland scores — a_copeland","text":"X numeric data frame matrix indicator data, observations rows indicators columns. columns present (e.g. label columns). w numeric vector weights, length equal ncol(X). Weights relative re-scaled sum 1. w specified, defaults equal weights.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/a_copeland.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copeland scores — a_copeland","text":"Numeric vector Copeland scores.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/a_copeland.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Copeland scores — a_copeland","text":"outranking matrix transformed follows: values > 0.5 replaced 1 values < 0.5 replaced -1 values == 0.5 replaced 0 diagonal matrix zeros Copeland scores calculated row sums transformed matrix. function replaces now-defunct copeland() COINr < v1.0.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/a_copeland.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copeland scores — a_copeland","text":"","code":"# some example data ind_data <- COINr::ASEM_iData[12:16]  # aggregate with vector of weights outlist <- outrankMatrix(ind_data) #> No weights specified for outranking matrix, using equal weights."},{"path":"https://bluefoxr.github.io/COINr/reference/a_gmean.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted geometric mean — a_gmean","title":"Weighted geometric mean — a_gmean","text":"Weighted geometric mean vector. NA skipped default.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/a_gmean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weighted geometric mean — a_gmean","text":"","code":"a_gmean(x, w = NULL)"},{"path":"https://bluefoxr.github.io/COINr/reference/a_gmean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weighted geometric mean — a_gmean","text":"x numeric vector positive values. w vector weights, length equal length(x). Weights relative re-scaled sum 1. w specified, defaults equal weights.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/a_gmean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weighted geometric mean — a_gmean","text":"geometric mean, numeric value.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/a_gmean.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Weighted geometric mean — a_gmean","text":"function replaces now-defunct geoMean() COINr < v1.0.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/a_gmean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weighted geometric mean — a_gmean","text":"","code":"# a vector of values x <- 1:10 # a vector of weights w <- runif(10) # weighted geometric mean a_gmean(x,w) #> [1] 4.418769"},{"path":"https://bluefoxr.github.io/COINr/reference/a_hmean.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted harmonic mean — a_hmean","title":"Weighted harmonic mean — a_hmean","text":"Weighted harmonic mean vector. NA skipped default.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/a_hmean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weighted harmonic mean — a_hmean","text":"","code":"a_hmean(x, w = NULL)"},{"path":"https://bluefoxr.github.io/COINr/reference/a_hmean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weighted harmonic mean — a_hmean","text":"x numeric vector positive values. w vector weights, length equal length(x). Weights relative re-scaled sum 1. w specified, defaults equal weights.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/a_hmean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weighted harmonic mean — a_hmean","text":"Weighted harmonic mean, numeric value.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/a_hmean.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Weighted harmonic mean — a_hmean","text":"function replaces now-defunct harMean() COINr < v1.0.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/a_hmean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weighted harmonic mean — a_hmean","text":"","code":"# a vector of values x <- 1:10 # a vector of weights w <- runif(10) # weighted harmonic mean a_hmean(x,w) #> [1] 3.206529"},{"path":"https://bluefoxr.github.io/COINr/reference/approx_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolate time-indexed data frame — approx_df","title":"Interpolate time-indexed data frame — approx_df","text":"Given numeric data frame Y rows indexed time vector tt, interpolates time values specified vector tt_est. tt_est tt, create new rows data frame corresponding interpolated points.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/approx_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolate time-indexed data frame — approx_df","text":"","code":"approx_df(Y, tt, tt_est = NULL, ...)"},{"path":"https://bluefoxr.github.io/COINr/reference/approx_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolate time-indexed data frame — approx_df","text":"Y data frame numeric columns tt time vector length equal nrow(Y), indexing rows Y. tt_est time vector points interpolate Y. NULL, attempt interpolate points Y (may need adjust rule argument stats::approx() ). Note points specified tt_est interpolated. tt_est need subset tt. ... arguments pass stats::approx() x, y xout.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/approx_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpolate time-indexed data frame — approx_df","text":"list : .$tt vector time points, including time values interpolated points .$Y  corresponding interpolated data frame outputs sorted tt.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/approx_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Interpolate time-indexed data frame — approx_df","text":"wrapper stats::approx(), differences. first place, stats::approx() applied column Y, using tt time corresponding time vector indexing Y. Interpolated values generated points specified tt_est appended existing data (whereas stats::approx() return interpolated points nothing else). arguments stats::approx() can passed using ... argument.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/approx_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interpolate time-indexed data frame — approx_df","text":"","code":"# a time vector tt <- 2011:2020  # two random vectors with some missing values y1 <- runif(10) y2 <- runif(10) y1[2] <- y1[5] <- NA y2[3] <- y2[5] <- NA # make into df Y <- data.frame(y1, y2)  # interpolate for time = 2012 Y_int <- approx_df(Y, tt, 2012) Y_int$Y #>             y1        y2 #> 1  0.733758134 0.6326190 #> 2  0.367622882 0.4201245 #> 3  0.001487631        NA #> 4  0.167833743 0.6811826 #> 5           NA        NA #> 6  0.339224079 0.1369441 #> 7  0.943969837 0.3290721 #> 8  0.725674995 0.0950487 #> 9  0.281532244 0.3962644 #> 10 0.193314805 0.9778813  # notice Y_int$y2 is unchanged since at 2012 it did not have NA value stopifnot(identical(Y_int$Y$y2, y2))  # interpolate at value not in tt approx_df(Y, tt, 2015.5) #> $tt #>  [1] 2011.0 2012.0 2013.0 2014.0 2015.0 2015.5 2016.0 2017.0 2018.0 2019.0 #> [11] 2020.0 #>  #> $Y #>             y1        y2 #> 1  0.733758134 0.6326190 #> 2           NA 0.4201245 #> 3  0.001487631        NA #> 4  0.167833743 0.6811826 #> 5           NA        NA #> 6  0.296376495 0.2730037 #> 7  0.339224079 0.1369441 #> 8  0.943969837 0.3290721 #> 9  0.725674995 0.0950487 #> 10 0.281532244 0.3962644 #> 11 0.193314805 0.9778813 #>"},{"path":"https://bluefoxr.github.io/COINr/reference/boxcox.html","id":null,"dir":"Reference","previous_headings":"","what":"Box Cox transformation — boxcox","title":"Box Cox transformation — boxcox","text":"Simple Box Cox, optimisation lambda.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/boxcox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Box Cox transformation — boxcox","text":"","code":"boxcox(x, lambda, makepos = TRUE, na.rm = FALSE)"},{"path":"https://bluefoxr.github.io/COINr/reference/boxcox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Box Cox transformation — boxcox","text":"x vector column data transform lambda lambda parameter Box Cox transform makepos TRUE (default) makes values positive subtracting minimum adding 1. na.rm TRUE, NAs removed: relevant makepos = TRUE invokes min().","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/boxcox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Box Cox transformation — boxcox","text":"vector length length(x) transformed values.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/boxcox.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Box Cox transformation — boxcox","text":"function replaces now-defunct BoxCox() COINr < v1.0.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/boxcox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Box Cox transformation — boxcox","text":"","code":"# example data x <- runif(30) # Apply Box Cox xBox <- boxcox(x, lambda = 2) # plot one against the other plot(x, xBox)"},{"path":"https://bluefoxr.github.io/COINr/reference/build_example_coin.html","id":null,"dir":"Reference","previous_headings":"","what":"Build ASEM example coin — build_example_coin","title":"Build ASEM example coin — build_example_coin","text":"Shortcut function build ASEM example coin, using inbuilt example data. can useful testing also building reproducible examples. see underlying commands run edit(build_example_coin). See also vignette(\"coins\").","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/build_example_coin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build ASEM example coin — build_example_coin","text":"","code":"build_example_coin(up_to = NULL, quietly = FALSE)"},{"path":"https://bluefoxr.github.io/COINr/reference/build_example_coin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build ASEM example coin — build_example_coin","text":"up_to point build index. NULL, builds full index. Else specify building function (string) - index built including function. option mainly helping function examples. Example: up_to = \"Normalise\". quietly TRUE, suppresses messages.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/build_example_coin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build ASEM example coin — build_example_coin","text":"coin class object","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/build_example_coin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build ASEM example coin — build_example_coin","text":"function replaces now-defunct build_ASEM() COINr < v1.0.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/build_example_coin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build ASEM example coin — build_example_coin","text":"","code":"# build example coin up to data treatment step coin <- build_example_coin(up_to = \"Treat\") #> iData checked and OK. #> iMeta checked and OK. #> Written data set to .$Data$Raw #> Written data set to .$Data$Denominated #> Written data set to .$Data$Imputed #> Written data set to .$Data$Screened #> Written data set to .$Data$Treated coin #> -------------- #> A coin with... #> -------------- #> Input: #>   Units: 51 (AUS, AUT, BEL, ...) #>   Indicators: 49 (Goods, Services, FDI, ...) #>   Denominators: 4 (Area, Energy, GDP, ...) #>   Groups: 4 (GDP_group, GDPpc_group, Pop_group, ...) #>  #> Structure: #>   Level 1 Indicator: 49 indicators (FDI, ForPort, Goods, ...)  #>   Level 2 Pillar: 8 groups (ConEcFin, Instit, P2P, ...)  #>   Level 3 Sub-index: 2 groups (Conn, Sust)  #>   Level 4 Index: 1 groups (Index)  #>  #> Data sets: #>   Raw (51 units) #>   Denominated (51 units) #>   Imputed (51 units) #>   Screened (51 units) #>   Treated (51 units)"},{"path":"https://bluefoxr.github.io/COINr/reference/build_example_purse.html","id":null,"dir":"Reference","previous_headings":"","what":"Build example purse — build_example_purse","title":"Build example purse — build_example_purse","text":"Shortcut function build example purse. currently \"artificial\" example, takes ASEM data set used build_example_coin() replicates five years, adding artificial noise simulate year--year variation. done simply demonstrate functionality purses, point replaced real example. See also vignette(\"coins\").","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/build_example_purse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build example purse — build_example_purse","text":"","code":"build_example_purse(up_to = NULL, quietly = FALSE)"},{"path":"https://bluefoxr.github.io/COINr/reference/build_example_purse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build example purse — build_example_purse","text":"up_to point build index. NULL, builds full index. Else specify build_* function (string) - index built including function. option mainly helping function examples. Example: up_to = \"build_normalise\". quietly TRUE, suppresses messages.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/build_example_purse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build example purse — build_example_purse","text":"purse class object","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/build_example_purse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build example purse — build_example_purse","text":"","code":"# build example purse up to unit screening step purse <- build_example_purse(up_to = \"Screen\") #> iData checked and OK. #> iMeta checked and OK. #> Written data set to .$Data$Raw #> Written data set to .$Data$Raw #> Written data set to .$Data$Raw #> Written data set to .$Data$Raw #> Written data set to .$Data$Raw #> Written data set to .$Data$Screened #> Written data set to .$Data$Screened #> Written data set to .$Data$Screened #> Written data set to .$Data$Screened #> Written data set to .$Data$Screened purse #> ----------------------------- #> A purse with... 5 coins  #> ----------------------------- #>  #>  Time n_Units n_Inds n_dsets #>  2018      51     49       2 #>  2019      51     49       2 #>  2020      51     49       2 #>  2021      51     49       2 #>  2022      51     49       2 #>  #> ----------------------------------- #> Sample from first coin (2018): #> ----------------------------------- #>  #> Input: #>   Units: 51 (AUS, AUT, BEL, ...) #>   Indicators: 49 (Goods, Services, FDI, ...) #>   Denominators: 4 (Area, Energy, GDP, ...) #>   Groups: 4 (GDP_group, GDPpc_group, Pop_group, ...) #>  #> Structure: #>   Level 1 Indicator: 49 indicators (FDI, ForPort, Goods, ...)  #>   Level 2 Pillar: 8 groups (ConEcFin, Instit, P2P, ...)  #>   Level 3 Sub-index: 2 groups (Conn, Sust)  #>   Level 4 Index: 1 groups (Index)  #>  #> Data sets: #>   Raw (51 units) #>   Screened (46 units)"},{"path":"https://bluefoxr.github.io/COINr/reference/change_ind.html","id":null,"dir":"Reference","previous_headings":"","what":"Add and remove indicators — change_ind","title":"Add and remove indicators — change_ind","text":"shortcut function add remove indicators. make relevant changes recalculate index asked. Adding removing done relative current set indicators used calculating index results. indicators added must course present original iData iMeta input new_coin().","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/change_ind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add and remove indicators — change_ind","text":"","code":"change_ind(coin, add = NULL, drop = NULL, regen = FALSE)"},{"path":"https://bluefoxr.github.io/COINr/reference/change_ind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add and remove indicators — change_ind","text":"coin coin object add character vector indicator codes add (must present original input data) drop character vector indicator codes remove (must present original input data) regen Logical (default): TRUE, automatically regenerates results based new specs Otherwise, just updates .$Log parameters. latter might useful want Make changes re-running using Regen() function.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/change_ind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add and remove indicators — change_ind","text":"updated coin, regenerated results regen = TRUE.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/change_ind.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add and remove indicators — change_ind","text":"See also vignette(\"adjustments\"). function replaces now-defunct indChange() COINr < v1.0.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/change_ind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add and remove indicators — change_ind","text":"","code":"# build full example coin coin <- build_example_coin(quietly = TRUE)  # exclude two indicators and regenerate # remove two indicators and regenerate the coin coin_remove <- change_ind(coin, drop = c(\"LPI\", \"Forest\"), regen = TRUE) #> coin has been regenerated using new specs.  coin_remove #> -------------- #> A coin with... #> -------------- #> Input: #>   Units: 51 (AUS, AUT, BEL, ...) #>   Indicators: 47 (Goods, Services, FDI, ...) #>   Denominators: 4 (Area, Energy, GDP, ...) #>   Groups: 4 (GDP_group, GDPpc_group, Pop_group, ...) #>  #> Structure: #>   Level 1 Indicator: 47 indicators (FDI, ForPort, Goods, ...)  #>   Level 2 Pillar: 8 groups (ConEcFin, Instit, P2P, ...)  #>   Level 3 Sub-index: 2 groups (Conn, Sust)  #>   Level 4 Index: 1 groups (Index)  #>  #> Data sets: #>   Raw (51 units) #>   Denominated (51 units) #>   Imputed (51 units) #>   Screened (51 units) #>   Treated (51 units) #>   Normalised (51 units) #>   Aggregated (51 units)"},{"path":"https://bluefoxr.github.io/COINr/reference/check_SkewKurt.html","id":null,"dir":"Reference","previous_headings":"","what":"Check skew and kurtosis of a vector — check_SkewKurt","title":"Check skew and kurtosis of a vector — check_SkewKurt","text":"Logical test: abs(skewness) < skew_thresh kurtosis < kurt_thresh, returns TRUE, else FALSE","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/check_SkewKurt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check skew and kurtosis of a vector — check_SkewKurt","text":"","code":"check_SkewKurt(x, na.rm = FALSE, skew_thresh = 2, kurt_thresh = 3.5)"},{"path":"https://bluefoxr.github.io/COINr/reference/check_SkewKurt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check skew and kurtosis of a vector — check_SkewKurt","text":"x numeric vector. na.rm Set TRUE remove NA values, otherwise returns NA. skew_thresh threshold absolute skewness (positive). Default 2.25. kurt_thresh threshold kurtosis. Default 3.5.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/check_SkewKurt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check skew and kurtosis of a vector — check_SkewKurt","text":"list .$Pass Logical, TRUE pass, FALSE fail, .$Details sub-list skew kurtosis values.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/check_SkewKurt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check skew and kurtosis of a vector — check_SkewKurt","text":"","code":"set.seed(100) x <- runif(20) # this passes check_SkewKurt(x) #> $Pass #> [1] TRUE #>  #> $Skew #> [1] 0.1935009 #>  #> $Kurt #> [1] -0.7407903 #>  # if we add an outlier, doesn't pass check_SkewKurt(c(x, 1000)) #> $Pass #> [1] FALSE #>  #> $Skew #> [1] 4.582568 #>  #> $Kurt #> [1] 20.99995 #>"},{"path":"https://bluefoxr.github.io/COINr/reference/check_iData.html","id":null,"dir":"Reference","previous_headings":"","what":"Check iData — check_iData","title":"Check iData — check_iData","text":"Checks format iData input new_coin(). check must passed successfully build new coin.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/check_iData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check iData — check_iData","text":"","code":"check_iData(iData, quietly = FALSE)"},{"path":"https://bluefoxr.github.io/COINr/reference/check_iData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check iData — check_iData","text":"iData data frame indicator data. quietly Set TRUE suppress message input valid.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/check_iData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check iData — check_iData","text":"Message everything ok, else error messages.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/check_iData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check iData — check_iData","text":"restrictions iData extensive. data frame one required column uCode gives code assigned unit (alphanumeric, starting number). columns defined corresponding entries iMeta, following special exceptions: Time optional column allows panel data input, consisting e.g. multiple rows uCode: one Time value. can used split set panel data multiple coins (-called \"purse\") can input COINr functions. See new_coin() details. uName optional column specifies longer name unit. column included, unit codes (uCode) used unit names required. column names contain blank spaces.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/check_iData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check iData — check_iData","text":"","code":"check_iData(ASEM_iData) #> iData checked and OK."},{"path":"https://bluefoxr.github.io/COINr/reference/check_iMeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Check iMeta — check_iMeta","title":"Check iMeta — check_iMeta","text":"Checks format iMeta input new_coin(). performs series thorough checks make sure iMeta agrees specifications. also includes checks make sure structure makes sense, duplicates, things. iMeta must pass check build new coin.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/check_iMeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check iMeta — check_iMeta","text":"","code":"check_iMeta(iMeta, quietly = FALSE)"},{"path":"https://bluefoxr.github.io/COINr/reference/check_iMeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check iMeta — check_iMeta","text":"iMeta data frame indicator metadata. See details. quietly Set TRUE suppress message input valid.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/check_iMeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check iMeta — check_iMeta","text":"Message everything ok, else error messages.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/check_iMeta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check iMeta — check_iMeta","text":"Required columns iMeta : Level: Level aggregation, 1 indicator level, 2 level resulting aggregating indicators, 3 result aggregating level 2, . Set NA entries included index (groups, denominators, etc). iCode: Indicator code, alphanumeric. Must start number contain blank spaces. Parent: Group (iCode) indicator/aggregate belongs level immediately . entry also found iCode. Set NA highest (Index) level (parent), entries included index (groups, denominators, etc). Direction: Numeric, either -1 1 Weight: Numeric weight, rescaled sum 1 within aggregation group. Set NA entries included index (groups, denominators, etc). Type: type, corresponding iCode. Can either Indicator, Aggregate, Group, Denominator, . Optional columns recognised certain functions : iName: Name indicator: longer name used plotting functions. Unit: unit indicator, e.g. USD, thousands, score, etc. Used plots available. Target: target indicator. Used normalisation type distance--target. iMeta data frame essentially gives details columns found iData, well details additional data columns eventually created aggregating indicators. means entries iMeta must include columns iData, except three special column names: uCode, uName, Time. words, column names iData appear iMeta$iCode, except three special cases mentioned. iName column optionally can used give longer names indicator can used display plots. iMeta also specifies structure index, specifying parent indicator aggregate. Parent column must refer entries can found iCode. Try View(ASEM_iMeta) example works. Level \"vertical\" level hierarchy, 1 bottom level (indicators), successive level created aggregating level according specified groups. Direction set 1 higher values indicator result higher values index, -1 opposite case. Type column specifies type entry: Indicator used indicators level 1. Aggregate aggregates created aggregating indicators aggregates. Otherwise set Group variable used building index instead defining groups units. Set Denominator variable used scaling (denominating) indicators. Finally, set variable ignored passed . entries cause error. Note: function requires columns specified, extra columns can also added without causing errors.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/check_iMeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check iMeta — check_iMeta","text":"","code":"check_iMeta(ASEM_iMeta) #> iMeta checked and OK."},{"path":"https://bluefoxr.github.io/COINr/reference/compare_coins.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare two coins — compare_coins","title":"Compare two coins — compare_coins","text":"Compares two coin class objects using specified iCode (column data) specified data sets.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/compare_coins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare two coins — compare_coins","text":"","code":"compare_coins(   coin1,   coin2,   dset,   iCode,   also_get = NULL,   compare_by = \"ranks\",   sort_by = NULL,   decreasing = FALSE )"},{"path":"https://bluefoxr.github.io/COINr/reference/compare_coins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare two coins — compare_coins","text":"coin1 coin class object coin2 coin class object dset data set found .$Data. iCode name column found .$Data[[dset]]. also_get Optional metadata columns attach table: see get_data(). compare_by Either \"ranks\" produces comparison using ranks, else \"scores\", instead uses scores. Note scores may different methodology different one coin another, e.g. different normalisation methods. sort_by Optionally, column name output data frame sort rows . Can either \"coin.1\", \"coin.2\", \"Diff\", \"Abs.diff\" possibly column name imported using also_get. decreasing Argument pass order(): sort.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/compare_coins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare two coins — compare_coins","text":"data frame comparison information.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/compare_coins.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare two coins — compare_coins","text":"function replaces now-defunct compTable() COINr < v1.0.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/compare_coins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare two coins — compare_coins","text":"","code":"# build full example coin coin <- build_example_coin(quietly = TRUE)  # copy coin coin2 <- coin  # change to prank function (percentile ranks) # we don't need to specify any additional parameters (f_n_para) here coin2$Log$Normalise$global_specs <- list(f_n = \"n_prank\")  # regenerate coin2 <- Regen(coin2)  # compare index, sort by absolute rank difference compare_coins(coin, coin2, dset = \"Aggregated\", iCode = \"Index\",               sort_by = \"Abs.diff\", decreasing = TRUE) #>    uCode coin.1 coin.2 Diff Abs.diff #> 43   PRT     27     17   10       10 #> 29   LAO     48     39    9        9 #> 33   MLT     10     19   -9        9 #> 14   EST     22     16    6        6 #> 21   IDN     43     49   -6        6 #> 13   ESP     19     24   -5        5 #> 19   HRV     18     23   -5        5 #> 30   LTU     16     11    5        5 #> 35   MNG     44     48   -4        4 #> 17   GBR     15     12    3        3 #> 25   JPN     34     31    3        3 #> 32   LVA     23     20    3        3 #> 40   PAK     50     47    3        3 #> 3    BEL      5      7   -2        2 #> 4    BGD     46     44    2        2 #> 8    CHN     49     51   -2        2 #> 20   HUN     20     22   -2        2 #> 23   IRL     12     14   -2        2 #> 26   KAZ     47     45    2        2 #> 28   KOR     31     33   -2        2 #> 31   LUX      8     10   -2        2 #> 37   NLD      2      4   -2        2 #> 41   PHL     38     40   -2        2 #> 42   POL     26     28   -2        2 #> 47   SVK     24     26   -2        2 #> 48   SVN     11      9    2        2 #> 2    AUT      7      6    1        1 #> 5    BGR     30     29    1        1 #> 6    BRN     40     41   -1        1 #> 9    CYP     29     30   -1        1 #> 10   CZE     17     18   -1        1 #> 11   DEU      9      8    1        1 #> 12   DNK      3      2    1        1 #> 22   IND     45     46   -1        1 #> 24   ITA     28     27    1        1 #> 27   KHM     37     36    1        1 #> 34   MMR     41     42   -1        1 #> 36   MYS     39     38    1        1 #> 38   NOR      4      3    1        1 #> 39   NZL     33     34   -1        1 #> 45   RUS     51     50    1        1 #> 46   SGP     14     15   -1        1 #> 49   SWE      6      5    1        1 #> 50   THA     42     43   -1        1 #> 51   VNM     36     37   -1        1 #> 1    AUS     35     35    0        0 #> 7    CHE      1      1    0        0 #> 15   FIN     13     13    0        0 #> 16   FRA     21     21    0        0 #> 18   GRC     32     32    0        0 #> 44   ROU     25     25    0        0"},{"path":"https://bluefoxr.github.io/COINr/reference/compare_coins_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare multiple coins — compare_coins_multi","title":"Compare multiple coins — compare_coins_multi","text":"Given multiple coins list, generates rank comparison single indicator aggregate specified dset iCode arguments (passed get_data()). indicator aggregate targeted must available coins coins.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/compare_coins_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare multiple coins — compare_coins_multi","text":"","code":"compare_coins_multi(   coins,   dset,   iCode,   also_get = NULL,   tabtype = \"Values\",   ibase = 1,   sort_table = TRUE,   compare_by = \"ranks\" )"},{"path":"https://bluefoxr.github.io/COINr/reference/compare_coins_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare multiple coins — compare_coins_multi","text":"coins list coins. names provided, used tables returned function. dset name data set found .$Data. See get_data(). iCode column name data set targeted dset. See get_data(). also_get Optional metadata columns attach table: see get_data(). specified, results coin merged using uCodes within coin. specified, results merged additionally using metadata columns. means coins must share metadata columns returned result also_get. tabtype type table generate. One : \"Values\": returns data frame rank values coin provided, plus ISO3 column \"Diffs\": returns data frame rank differences base coin coin (see ibase) \"AbsDiffs\": \"Diffs\" absolute rank differences returned \"\": returns three previous rank tables, list data frames ibase index coin use base comparison (default first coin list) sort_table TRUE, sorts base COIN (ibase) (default). compare_by Either \"ranks\" produces comparison using ranks, else \"scores\", instead uses scores. Note scores may different methodology different one coin another, e.g. different normalisation methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/compare_coins_multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare multiple coins — compare_coins_multi","text":"Data frame unless tabtype = \"\", case list three data frames returned.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/compare_coins_multi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare multiple coins — compare_coins_multi","text":"default, ranks target indicator/aggregate coin merged using uCodes within coin. Optionally, specifying also_get (passed get_data()) additionally merge using metadata columns. means coins must share metadata columns returned result also_get. function replaces now-defunct compTableMulti() COINr < v1.0.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/compare_coins_multi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare multiple coins — compare_coins_multi","text":"","code":"# see vignette(\"adjustments\")"},{"path":"https://bluefoxr.github.io/COINr/reference/compare_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare two data frames — compare_df","title":"Compare two data frames — compare_df","text":"custom function comparing two data frames indicator data, see whether match , specified number significant figures. Specifically, intended compare two data frames, without regard row column ordering. Rows matched required matchcol argument. Hence, different e.g. .equal() requires rows ordered. COINr, typically matchcol uCode column, example.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/compare_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare two data frames — compare_df","text":"","code":"compare_df(df1, df2, matchcol, sigfigs = 5)"},{"path":"https://bluefoxr.github.io/COINr/reference/compare_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare two data frames — compare_df","text":"df1 data frame df2 Another data frame matchcol common column name used match row order. E.g. might uCode. sigfigs number significant figures use matching numerical columns","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/compare_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare two data frames — compare_df","text":"list comparison results. List contains: .$: overall summary: TRUE data frames according rules specified, otherwise FALSE. .$Details: details column data frame. row summarises column data frame, saying whether column equivalent, number differences, . case two data frames differing numbers columns rows, differing column names entries matchcol, .$Details simply contain message effect. .$Differences: list one entry every column contains different entries. Differences summarised data frame one row difference, reporting value df1 equivalent df2.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/compare_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare two data frames — compare_df","text":"function compares numerical non-numerical columns see match. Rows columns can order. function performs following checks: Checks two data frames size Checks column names , matching column entries Checks column column elements , sorting according matching column summarises column whether differences, also differences , . intended cross-check results. example, run something COINr want check indicator results external calculations. function replaces now-defunct compareDF() COINr < v1.0.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/compare_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare two data frames — compare_df","text":"","code":"# take a sample of indicator data (including the uCode column) data1 <- ASEM_iData[c(2,12:15)] # copy the data data2 <- data1 # make a change: replace one value in data2 by NA data2[1,2] <- NA # compare data frames compare_df(data1, data2, matchcol = \"uCode\") #> $Same #> [1] FALSE #>  #> $Details #>    Column TheSame                          Comment NDifferent #> 1   uCode    TRUE      Non-numerical and identical          0 #> 2     LPI   FALSE Numerical and different at 5 sf.          1 #> 3 Flights    TRUE Numerical and identical to 5 sf.          0 #> 4    Ship    TRUE Numerical and identical to 5 sf.          0 #> 5    Bord    TRUE Numerical and identical to 5 sf.          0 #>  #> $Differences #> $Differences$LPI #>   uCode      df1 df2 #> 1   AUT 4.097985  NA #>  #>"},{"path":"https://bluefoxr.github.io/COINr/reference/export_to_excel.coin.html","id":null,"dir":"Reference","previous_headings":"","what":"Export a coin to Excel — export_to_excel.coin","title":"Export a coin to Excel — export_to_excel.coin","text":"Exports contents coin Excel. writes data frames inside coin Excel, data frame separate tab. Tabs named according position coin object. can write data frames simply attaching coin object somewhere.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/export_to_excel.coin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export a coin to Excel — export_to_excel.coin","text":"","code":"# S3 method for coin export_to_excel(x, fname = \"coin_export.xlsx\", include_log = FALSE, ...)"},{"path":"https://bluefoxr.github.io/COINr/reference/export_to_excel.coin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export a coin to Excel — export_to_excel.coin","text":"x coin class object fname file name/path write , character string include_log Logical: TRUE, also writes data frames .$Log list inside coin. ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/export_to_excel.coin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export a coin to Excel — export_to_excel.coin","text":".xlsx file specified path","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/export_to_excel.coin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export a coin to Excel — export_to_excel.coin","text":"","code":"## Here we write a COIN to Excel, but this is done to a temporary directory ## to avoid \"polluting\" the working directory when running automatic tests. ## In a real case, set fname to a directory of your choice.  # build example coin up to data treatment step coin <- build_example_coin(up_to = \"Treat\") #> iData checked and OK. #> iMeta checked and OK. #> Written data set to .$Data$Raw #> Written data set to .$Data$Denominated #> Written data set to .$Data$Imputed #> Written data set to .$Data$Screened #> Written data set to .$Data$Treated  # write to Excel in temporary directory export_to_excel(coin, fname = paste0(tempdir(), \"\\\\ASEM_results.xlsx\"))  # spreadsheet is at: print(paste0(tempdir(), \"\\\\ASEM_results.xlsx\")) #> [1] \"/tmp/RtmpO6UDMx\\\\ASEM_results.xlsx\"  # now delete temporary file to keep things tidy in testing unlink(paste0(tempdir(),\"\\\\ASEM_results.xlsx\"))"},{"path":"https://bluefoxr.github.io/COINr/reference/export_to_excel.html","id":null,"dir":"Reference","previous_headings":"","what":"Export a coin or purse to Excel — export_to_excel","title":"Export a coin or purse to Excel — export_to_excel","text":"Writes coins purses Excel. See individual method documentation:","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/export_to_excel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export a coin or purse to Excel — export_to_excel","text":"","code":"export_to_excel(x, fname, ...)"},{"path":"https://bluefoxr.github.io/COINr/reference/export_to_excel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export a coin or purse to Excel — export_to_excel","text":"x coin purse fname file name write ... Arguments passed /methods","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/export_to_excel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export a coin or purse to Excel — export_to_excel","text":"Excel spreadsheet.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/export_to_excel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Export a coin or purse to Excel — export_to_excel","text":"function replaces now-defunct coin2Excel() COINr < v1.0. export_to_excel.coin() export_to_excel.purse()","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/export_to_excel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export a coin or purse to Excel — export_to_excel","text":"","code":"# see individual method documentation"},{"path":"https://bluefoxr.github.io/COINr/reference/export_to_excel.purse.html","id":null,"dir":"Reference","previous_headings":"","what":"Export a purse to Excel — export_to_excel.purse","title":"Export a purse to Excel — export_to_excel.purse","text":"Exports contents purse Excel. similar coin method export_to_excel.coin(), combines data sets various time points. also selectively writes metadata since may spread across multiple coins.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/export_to_excel.purse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export a purse to Excel — export_to_excel.purse","text":"","code":"# S3 method for purse export_to_excel(x, fname = \"coin_export.xlsx\", include_log = FALSE, ...)"},{"path":"https://bluefoxr.github.io/COINr/reference/export_to_excel.purse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export a purse to Excel — export_to_excel.purse","text":"x purse class object fname file name/path write , character string include_log Logical: TRUE, also writes data frames .$Log list inside coin. ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/export_to_excel.purse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export a purse to Excel — export_to_excel.purse","text":".xlsx file specified path","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/export_to_excel.purse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export a purse to Excel — export_to_excel.purse","text":"","code":"#"},{"path":"https://bluefoxr.github.io/COINr/reference/get_PCA.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform PCA on a coin — get_PCA","title":"Perform PCA on a coin — get_PCA","text":"Performs Principle Component Analysis (PCA) specified data set subset indicators aggregation groups. function two main outputs: output(s) stats::prcomp(), optionally weights resulting PCA. Therefore can used analysis tool /weighting tool. weighting aspect, please see details .","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_PCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform PCA on a coin — get_PCA","text":"","code":"get_PCA(   coin,   dset = \"Raw\",   iCodes = NULL,   Level = NULL,   by_groups = TRUE,   nowarnings = FALSE,   weights_to = NULL,   out2 = \"list\" )"},{"path":"https://bluefoxr.github.io/COINr/reference/get_PCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform PCA on a coin — get_PCA","text":"coin coin dset name data set .$Data use. iCodes optional character vector indicator codes subset indicator data, passed get_data() Level aggregation level take indicator data . Integer 1 (indicator level) N (top aggregation level, typically index). by_groups TRUE (default), performs PCA inside aggregation group inside specified level. FALSE, performs single PCA indicators/aggregates specified level. nowarnings FALSE (default), give warnings missing data found. Set TRUE suppress warnings. weights_to string name resulting set weights. specified, out2 = \"coin\", write new set \"PCA weights\" .$Meta$Weights list. experimental - see details. NULL, write weights (default). out2 input coin object, controls send output. \"coin\", sends results coin object, otherwise \"list\", outputs separate list (default).","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_PCA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform PCA on a coin — get_PCA","text":"out2 = \"coin\", results appended coin object. Specifically: list added .$Analysis containing PCA weights (loadings) first principle component, output stats::prcomp, aggregation group found targeted level. weights_to specified, new set PCA weights added .$Meta$Weights out2 = \"list\" outputs contained list.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_PCA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform PCA on a coin — get_PCA","text":"PCA must approached care understanding going . First, consider PCA excluding weighting component. PCA takes set data consisting variables (indicators) observations. rotates coordinate system new coordinate system, first axis (called first principal component (PC)) aligns direction maximum variance data set. amount variance explained first PC, next several PCs, can help understand whether data can explained simpler set variables. PCA often used dimensionality reduction modelling, example. context composite indicators, PCA can used first analysis tool. can check example, within aggregation group, can indicators mostly explained one PC? , gives little extra justification aggregating indicators information lost aggregation less. can also check entire set indicators. complications composite indicator, indicators grouped arranged hierarchy. means performing PCA, decide level perform , groupings use, . get_PCA() function, using by_groups argument, allows automatically apply PCA group required. output get_PCA() PCA object groups specified, can examined using existing tools R, see vignette(\"analysis\"). output get_PCA() set \"PCA weights\" weights_to argument specified. also need say words caution. First, constitutes \"PCA weights\" composite indicators well-defined. COINr, simple option adopted. , loadings first principal component taken weights. logic loadings maximise explained variance - implication use weights aggregation, maximise explained variance hence information passed indicators aggregate value. nice property composite indicator, one aims represent many indicators single composite. See doi:10.1016/j.envsoft.2021.105208  discussion . . weights result PCA number downsides. First, can often include negative weights can hard justify. Also PCA may arbitrarily flip axes (since variance point view direction important). quest maximum variance, PCA also weight strongest-correlating indicators highest, means indicators may neglected. short, often results unbalanced set weights. Moreover, PCA can performed one level time. considerations point fact: PCA analysis tool well-established, please use PCA weights care understanding going . function replaces now-defunct getPCA() COINr < v1.0.","code":""},{"path":[]},{"path":"https://bluefoxr.github.io/COINr/reference/get_PCA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform PCA on a coin — get_PCA","text":"","code":"# build example coin coin <- build_example_coin(up_to = \"new_coin\", quietly = TRUE)  # PCA on \"Sust\" group of indicators l_pca <- get_PCA(coin, dset = \"Raw\", iCodes = \"Sust\",                  out2 = \"list\", nowarnings = TRUE)  # Summary of results for one of the sub-groups summary(l_pca$PCAresults$Social$PCAres) #> Importance of components: #>                           PC1    PC2    PC3     PC4     PC5     PC6     PC7 #> Standard deviation     2.2042 1.1256 0.9788 0.78834 0.77153 0.56836 0.42463 #> Proportion of Variance 0.5398 0.1408 0.1065 0.06905 0.06614 0.03589 0.02003 #> Cumulative Proportion  0.5398 0.6806 0.7871 0.85611 0.92225 0.95814 0.97817 #>                            PC8     PC9 #> Standard deviation     0.36068 0.25760 #> Proportion of Variance 0.01445 0.00737 #> Cumulative Proportion  0.99263 1.00000"},{"path":"https://bluefoxr.github.io/COINr/reference/get_corr.html","id":null,"dir":"Reference","previous_headings":"","what":"Get correlations — get_corr","title":"Get correlations — get_corr","text":"Helper function getting correlations indicators aggregates. retrieves subsets correlation matrices different aggregation levels, different formats. default, return long-form data frame, unless make_long = FALSE. default, correlations p-value less 0.05 replaced NA. See pval argument adjust .","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_corr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get correlations — get_corr","text":"","code":"get_corr(   coin,   dset,   iCodes = NULL,   Levels = NULL,   ...,   cortype = \"pearson\",   pval = 0.05,   withparent = FALSE,   grouplev = NULL,   make_long = TRUE,   use_directions = FALSE )"},{"path":"https://bluefoxr.github.io/COINr/reference/get_corr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get correlations — get_corr","text":"coin coin class coin object dset name data set apply function , accessible .$Data. iCodes optional list character vectors first entry specifies indicator/aggregate codes correlate second entry (also specification indicator/aggregate codes). specified character vector coerced first entry list, .e. list(iCodes). Levels aggregation levels take two groups indicators . See get_data() details. Defaults indicator level. ... arguments passed get_data() (uCodes use_group). cortype type correlation calculate, either \"pearson\", \"spearman\", \"kendall\". pval significance level including correlations. Correlations \\(p > pval\\) returned NA. Default 0.05. Set 0 disable . withparent TRUE, aglev[1] != aglev[2], return correlations row parent. Alternatively, withparent = \"family\", return correlations parents, grandparents etc, highest level. cases data set must aggregated work. grouplev aggregation level group correlations aglev[1] == aglev[2]. Requires make_long = TRUE. make_long Logical: TRUE, returns correlations long format (default), else FALSE returns wide format. Note wide format requested, features specified grouplev withparent supported. use_directions Logical: TRUE extracted data adjusted using directions found inside coin (.e. \"Direction\" column input iMeta: indicators negative direction values multiplied -1 reverse direction correlation). set TRUE data set yet normalised. example, can useful set TRUE analyse correlations raw data, make sense analyse correlations normalised data already direction adjusted! reverse direction twice. words, use discretion.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_corr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get correlations — get_corr","text":"data frame pairwise correlation values wide long format (see make_long). Correlations \\(p > pval\\) returned NA.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_corr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get correlations — get_corr","text":"function allows obtain correlations subset indicators aggregates, data set present coin. Indicator selection performed using get_data(). Two different indicator sets can correlated specifying iCodes Levels vectors. correlation type can specified cortype argument, passed stats::cor(). withparent argument optionally return correlations correspond structure index. example, Levels = c(1,2) (.e. wish correlate indicators Level 1 aggregates Level 2), set withparent = TRUE, correlations indicator parent group returned (correlations indicators aggregates belong). can useful check whether correlations indicator/aggregate parent groups exceeds falls thresholds. Similarly, grouplev argument can used restrict correlations within groups corresponding index structure. Setting e.g. grouplev = 2 return correlations within groups defined Level 2. grouplev withparent options disabled make_long = FALSE. Note function can call correlations within data set (.e. one data set .$Data). function replaces now-defunct getCorr() COINr < v1.0.","code":""},{"path":[]},{"path":"https://bluefoxr.github.io/COINr/reference/get_corr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get correlations — get_corr","text":"","code":"# build example coin coin <- build_example_coin(up_to = \"new_coin\", quietly = TRUE)  # get correlations cmat <- get_corr(coin, dset = \"Raw\", iCodes = list(\"Environ\"),                  Levels = 1, make_long = FALSE)"},{"path":"https://bluefoxr.github.io/COINr/reference/get_corr_flags.html","id":null,"dir":"Reference","previous_headings":"","what":"Find highly-correlated indicators within groups — get_corr_flags","title":"Find highly-correlated indicators within groups — get_corr_flags","text":"returns data frame highly correlated indicators within aggregation group. level aggregation grouping can controlled grouplev argument.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_corr_flags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find highly-correlated indicators within groups — get_corr_flags","text":"","code":"get_corr_flags(   coin,   dset,   cor_thresh = 0.9,   thresh_type = \"high\",   cortype = \"pearson\",   grouplev = NULL,   roundto = 3,   use_directions = FALSE )"},{"path":"https://bluefoxr.github.io/COINr/reference/get_corr_flags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find highly-correlated indicators within groups — get_corr_flags","text":"coin coin class object dset name data set apply function , accessible .$Data. cor_thresh threshold flag high correlation. Default 0.9. thresh_type Either \"high\", flag correlations cor_thresh, \"low\", flag correlations cor_thresh. cortype type correlation, either \"pearson\" (default), \"spearman\" \"kendall\". See stats::cor. grouplev level group indicators . E.g. grouplev = 2 look high correlations indicators belong group Level 2. roundto Number decimal places round correlations . Default 3. Set NULL disable rounding. use_directions Logical: TRUE extracted data adjusted using directions found inside coin (.e. \"Direction\" column input iMeta. See comments argument get_corr().","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_corr_flags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find highly-correlated indicators within groups — get_corr_flags","text":"data frame one entry every indicator pair highly correlated within group, specified level. Pairs reported , .e. uses upper triangle correlation matrix.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_corr_flags.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find highly-correlated indicators within groups — get_corr_flags","text":"function motivated idea highly-correlated indicators within group may amount double counting, possibly redundancy framework. function replaces now-defunct hicorrSP() COINr < v1.0.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_corr_flags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find highly-correlated indicators within groups — get_corr_flags","text":"","code":"# build example coin coin <- build_example_coin(up_to = \"Normalise\", quietly = TRUE)  # get correlations between indicator over 0.75 within level 2 groups get_corr_flags(coin, dset = \"Normalised\", cor_thresh = 0.75,                thresh_type = \"high\", grouplev = 2) #>      Group Ind1      Ind2  Corr #> 113 Social  CPI FreePress 0.761 #> 116 Social  CPI      NGOs 0.768"},{"path":"https://bluefoxr.github.io/COINr/reference/get_cronbach.html","id":null,"dir":"Reference","previous_headings":"","what":"Cronbach's alpha — get_cronbach","title":"Cronbach's alpha — get_cronbach","text":"Calculates Cronbach's alpha, measure statistical reliability. Cronbach's alpha simple measure \"consistency\" data set, high value implies higher reliability/consistency. selection indicators via get_data() allows calculate measure group indicators aggregates.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_cronbach.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cronbach's alpha — get_cronbach","text":"","code":"get_cronbach(coin, dset, iCodes, Level, ..., use = \"pairwise.complete.obs\")"},{"path":"https://bluefoxr.github.io/COINr/reference/get_cronbach.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cronbach's alpha — get_cronbach","text":"coin coin data frame containing numerical columns data. dset name data set apply function , accessible .$Data. iCodes Indicator codes retrieve. NULL (default), returns iCodes found selected data set. See get_data(). Level level hierarchy extract data . See get_data(). ... arguments passed get_data(), explicitly specified . use Argument pass stats::cor calculate covariance matrix. Default \"pairwise.complete.obs\".","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_cronbach.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cronbach's alpha — get_cronbach","text":"Cronbach alpha numerical value.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_cronbach.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cronbach's alpha — get_cronbach","text":"function simply returns Cronbach's alpha. want lot details reliability, 'psych' package much detailed analysis. function replaces now-defunct getCronbach() COINr < v1.0.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_cronbach.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cronbach's alpha — get_cronbach","text":"","code":"# build example coin coin <- build_example_coin(up_to = \"new_coin\", quietly = TRUE)  # Cronbach's alpha for the \"P2P\" group get_cronbach(coin, dset = \"Raw\", iCodes = \"P2P\", Level = 1) #> [1] 0.05126659"},{"path":"https://bluefoxr.github.io/COINr/reference/get_data.coin.html","id":null,"dir":"Reference","previous_headings":"","what":"Get subsets of indicator data — get_data.coin","title":"Get subsets of indicator data — get_data.coin","text":"flexible function retrieving data coin, specified data set. Subsets data can returned based selection columns, using iCodes Level arguments, filtering rowwise using uCodes use_group arguments. also_get argument also allows unit metadata columns attached, names, groups, denominators.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_data.coin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get subsets of indicator data — get_data.coin","text":"","code":"# S3 method for coin get_data(   x,   dset,   iCodes = NULL,   Level = NULL,   uCodes = NULL,   use_group = NULL,   also_get = NULL,   ... )"},{"path":"https://bluefoxr.github.io/COINr/reference/get_data.coin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get subsets of indicator data — get_data.coin","text":"x coin class object dset name data set apply function , accessible .$Data. iCodes Optional indicator codes retrieve. NULL (default), returns iCodes found selected data set. Can also refer indicator groups. See details. Level Optionally, level hierarchy extract data . See details. uCodes Optional unit codes filter rows resulting data set. Can also used conjunction groups. See details. use_group Optional group filter rows data set. Specified list(Group_Var = Group), Group_Var Group_ column must present selected data set, Group specified group inside grouping variable. filters selected data include rows specified group. Can also used conjunction uCodes -- see details. also_get character vector specifying columns attach data set indicators aggregates. e.g. uName, groups, denominators columns labelled \"\" iMeta. columns stored .$Meta$Unit avoid repetition. Set also_get = \"\" attach columns, set also_get = \"none\" return numeric columns, .e. uCode column. ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_data.coin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get subsets of indicator data — get_data.coin","text":"data frame indicator data according specifications.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_data.coin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get subsets of indicator data — get_data.coin","text":"iCodes argument can used directly select named indicators, .e. setting iCodes = c(\"\", \"b\") select indicators \"\" \"b\", attaching extra columns specified also_get. However, using conjunction Level argument returns named groups indicators. example, setting iCodes = \"Group1\" (e.g. aggregation group Level 2) Level = 1 return indicators Level 1, belonging \"Group1\". Rows can also subsetted. uCodes argument can used select specified units way iCodes. Additionally, use_group argument filters specified groups. uCodes specified, use_group refers named group column, return units groups uCodes belong . useful putting unit context peers based grouping variable. Note want retrieve whole data set (column/row subsetting), use get_dset() function slightly faster.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_data.coin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get subsets of indicator data — get_data.coin","text":"","code":"# build full example coin coin <- build_example_coin(up_to = \"new_coin\", quietly = TRUE)  # get all indicators in \"Political group x <- get_data(coin, dset = \"Raw\", iCodes = \"Political\", Level = 1) head(x, 5) #>    uCode Embs IGOs   UNVote #> 31   AUS   82  196 38.46245 #> 1    AUT   88  227 42.63920 #> 2    BEL   84  248 43.00308 #> 32   BGD   52  145 38.60601 #> 3    BGR   67  209 42.95986  # see vignette(\"data_selection\") for more examples"},{"path":"https://bluefoxr.github.io/COINr/reference/get_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get subsets of indicator data — get_data","title":"Get subsets of indicator data — get_data","text":"helper function retrieve named data set coin purse objects. See individual method documentation:","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get subsets of indicator data — get_data","text":"","code":"get_data(x, ...)"},{"path":"https://bluefoxr.github.io/COINr/reference/get_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get subsets of indicator data — get_data","text":"x coin purse ... Arguments passed methods","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get subsets of indicator data — get_data","text":"Data frame indicator data, indexed also time input purse.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get subsets of indicator data — get_data","text":"get_data.coin() get_data.purse() function replaces now-defunct getIn() COINr < v1.0.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get subsets of indicator data — get_data","text":"","code":"# see individual method documentation"},{"path":"https://bluefoxr.github.io/COINr/reference/get_data.purse.html","id":null,"dir":"Reference","previous_headings":"","what":"Get subsets of indicator data — get_data.purse","title":"Get subsets of indicator data — get_data.purse","text":"retrieves data purse. functions similar way get_data.coin() additional Time argument allow selection based point(s) time.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_data.purse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get subsets of indicator data — get_data.purse","text":"","code":"# S3 method for purse get_data(   x,   dset,   iCodes = NULL,   Level = NULL,   uCodes = NULL,   use_group = NULL,   Time = NULL,   also_get = NULL,   ... )"},{"path":"https://bluefoxr.github.io/COINr/reference/get_data.purse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get subsets of indicator data — get_data.purse","text":"x purse class object dset name data set apply function , accessible .$Data. iCodes Optional indicator codes retrieve. NULL (default), returns iCodes found selected data set. Can also refer indicator groups. See details. Level Optionally, level hierarchy extract data . See details. uCodes Optional unit codes filter rows resulting data set. Can also used conjunction groups. See details. use_group Optional group filter rows data set. Specified list(Group_Var = Group), Group_Var Group_ column must present selected data set, Group specified group inside grouping variable. filters selected data include rows specified group. Can also used conjunction uCodes -- see details. Time Optional time index extract subset coins present purse. vector containing one entries x$Time NULL return (default). also_get character vector specifying columns attach data set indicators aggregates. e.g. uName, groups, denominators columns labelled \"\" iMeta. columns stored .$Meta$Unit avoid repetition. Set also_get = \"\" attach columns, set also_get = \"none\" return numeric columns, .e. uCode column. ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_data.purse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get subsets of indicator data — get_data.purse","text":"data frame indicator data indexed \"Time\" column.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_data.purse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get subsets of indicator data — get_data.purse","text":"Note ","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_data.purse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get subsets of indicator data — get_data.purse","text":"","code":"# build full example purse purse <- build_example_purse(up_to = \"new_coin\", quietly = TRUE)  # get specified indicators for specific years, for specified units get_data(purse, dset = \"Raw\",          iCodes = c(\"Lang\", \"Forest\"),          uCodes = c(\"AUT\", \"CHN\", \"DNK\"),          Time = c(2019, 2020)) #>     Time uCode       Lang   Forest #> 52  2019   AUT 14.9590871 4.510501 #> 86  2019   CHN  0.9909247 4.007399 #> 58  2019   DNK 19.5377677 6.626489 #> 103 2020   AUT 16.2053167 5.150510 #> 137 2020   CHN  1.2525769 4.322223 #> 109 2020   DNK 19.3664297 5.323871"},{"path":"https://bluefoxr.github.io/COINr/reference/get_data_avail.coin.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data availability of units — get_data_avail.coin","title":"Get data availability of units — get_data_avail.coin","text":"Returns list data frames: data availability unit (row) given data set, well percentage zeros. second data frame gives data availability aggregation (indicator) groups.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_data_avail.coin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data availability of units — get_data_avail.coin","text":"","code":"# S3 method for coin get_data_avail(x, dset, out2 = \"coin\", ...)"},{"path":"https://bluefoxr.github.io/COINr/reference/get_data_avail.coin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data availability of units — get_data_avail.coin","text":"x coin dset String indicating name data set .$Data. out2 Either \"coin\" output updated coin \"list\" output list. ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_data_avail.coin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data availability of units — get_data_avail.coin","text":"updated coin data availability tables written .$Analysis[[dset]], list data availability tables.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_data_avail.coin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get data availability of units — get_data_avail.coin","text":"function ignores non-numeric columns, returns data availability table numeric columns non-numeric columns appended beginning. See also vignettes: vignette(\"analysis\") vignette(\"imputation\").","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_data_avail.coin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data availability of units — get_data_avail.coin","text":"","code":"# build example coin coin <-  build_example_coin(up_to = \"new_coin\", quietly = TRUE)  # get data availability of Raw dset l_dat <- get_data_avail(coin, dset = \"Raw\", out2 = \"list\") head(l_dat$Summary, 5) #>    uCode N_missing N_zero N_miss_or_zero Dat_Avail  Non_Zero #> 31   AUS         0      3              3  1.000000 0.9387755 #> 1    AUT         0      2              2  1.000000 0.9591837 #> 2    BEL         0      2              2  1.000000 0.9591837 #> 32   BGD         6      1              7  0.877551 0.9767442 #> 3    BGR         0      0              0  1.000000 1.0000000"},{"path":"https://bluefoxr.github.io/COINr/reference/get_data_avail.data.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data availability of units — get_data_avail.data.frame","title":"Get data availability of units — get_data_avail.data.frame","text":"Returns data frame data availability unit (row), well percentage zeros. function ignores non-numeric columns, returns data availability table non-numeric columns appended beginning.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_data_avail.data.frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data availability of units — get_data_avail.data.frame","text":"","code":"# S3 method for data.frame get_data_avail(x, ...)"},{"path":"https://bluefoxr.github.io/COINr/reference/get_data_avail.data.frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data availability of units — get_data_avail.data.frame","text":"x data frame ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_data_avail.data.frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data availability of units — get_data_avail.data.frame","text":"data frame data availability statistics column x.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_data_avail.data.frame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get data availability of units — get_data_avail.data.frame","text":"See also vignettes: vignette(\"analysis\") vignette(\"imputation\").","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_data_avail.data.frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data availability of units — get_data_avail.data.frame","text":"","code":"# data availability of \"airquality\" data set get_data_avail(airquality) #>     N_missing N_zero N_miss_or_zero Dat_Avail Non_Zero #> 1           0      0              0 1.0000000        1 #> 2           0      0              0 1.0000000        1 #> 3           0      0              0 1.0000000        1 #> 4           0      0              0 1.0000000        1 #> 5           2      0              2 0.6666667        1 #> 6           1      0              1 0.8333333        1 #> 7           0      0              0 1.0000000        1 #> 8           0      0              0 1.0000000        1 #> 9           0      0              0 1.0000000        1 #> 10          1      0              1 0.8333333        1 #> 11          1      0              1 0.8333333        1 #> 12          0      0              0 1.0000000        1 #> 13          0      0              0 1.0000000        1 #> 14          0      0              0 1.0000000        1 #> 15          0      0              0 1.0000000        1 #> 16          0      0              0 1.0000000        1 #> 17          0      0              0 1.0000000        1 #> 18          0      0              0 1.0000000        1 #> 19          0      0              0 1.0000000        1 #> 20          0      0              0 1.0000000        1 #> 21          0      0              0 1.0000000        1 #> 22          0      0              0 1.0000000        1 #> 23          0      0              0 1.0000000        1 #> 24          0      0              0 1.0000000        1 #> 25          1      0              1 0.8333333        1 #> 26          1      0              1 0.8333333        1 #> 27          2      0              2 0.6666667        1 #> 28          0      0              0 1.0000000        1 #> 29          0      0              0 1.0000000        1 #> 30          0      0              0 1.0000000        1 #> 31          0      0              0 1.0000000        1 #> 32          1      0              1 0.8333333        1 #> 33          1      0              1 0.8333333        1 #> 34          1      0              1 0.8333333        1 #> 35          1      0              1 0.8333333        1 #> 36          1      0              1 0.8333333        1 #> 37          1      0              1 0.8333333        1 #> 38          0      0              0 1.0000000        1 #> 39          1      0              1 0.8333333        1 #> 40          0      0              0 1.0000000        1 #> 41          0      0              0 1.0000000        1 #> 42          1      0              1 0.8333333        1 #> 43          1      0              1 0.8333333        1 #> 44          0      0              0 1.0000000        1 #> 45          1      0              1 0.8333333        1 #> 46          1      0              1 0.8333333        1 #> 47          0      0              0 1.0000000        1 #> 48          0      0              0 1.0000000        1 #> 49          0      0              0 1.0000000        1 #> 50          0      0              0 1.0000000        1 #> 51          0      0              0 1.0000000        1 #> 52          1      0              1 0.8333333        1 #> 53          1      0              1 0.8333333        1 #> 54          1      0              1 0.8333333        1 #> 55          1      0              1 0.8333333        1 #> 56          1      0              1 0.8333333        1 #> 57          1      0              1 0.8333333        1 #> 58          1      0              1 0.8333333        1 #> 59          1      0              1 0.8333333        1 #> 60          1      0              1 0.8333333        1 #> 61          1      0              1 0.8333333        1 #> 62          0      0              0 1.0000000        1 #> 63          0      0              0 1.0000000        1 #> 64          0      0              0 1.0000000        1 #> 65          1      0              1 0.8333333        1 #> 66          0      0              0 1.0000000        1 #> 67          0      0              0 1.0000000        1 #> 68          0      0              0 1.0000000        1 #> 69          0      0              0 1.0000000        1 #> 70          0      0              0 1.0000000        1 #> 71          0      0              0 1.0000000        1 #> 72          1      0              1 0.8333333        1 #> 73          0      0              0 1.0000000        1 #> 74          0      0              0 1.0000000        1 #> 75          1      0              1 0.8333333        1 #> 76          0      0              0 1.0000000        1 #> 77          0      0              0 1.0000000        1 #> 78          0      0              0 1.0000000        1 #> 79          0      0              0 1.0000000        1 #> 80          0      0              0 1.0000000        1 #> 81          0      0              0 1.0000000        1 #> 82          0      0              0 1.0000000        1 #> 83          1      0              1 0.8333333        1 #> 84          1      0              1 0.8333333        1 #> 85          0      0              0 1.0000000        1 #> 86          0      0              0 1.0000000        1 #> 87          0      0              0 1.0000000        1 #> 88          0      0              0 1.0000000        1 #> 89          0      0              0 1.0000000        1 #> 90          0      0              0 1.0000000        1 #> 91          0      0              0 1.0000000        1 #> 92          0      0              0 1.0000000        1 #> 93          0      0              0 1.0000000        1 #> 94          0      0              0 1.0000000        1 #> 95          0      0              0 1.0000000        1 #> 96          1      0              1 0.8333333        1 #> 97          1      0              1 0.8333333        1 #> 98          1      0              1 0.8333333        1 #> 99          0      0              0 1.0000000        1 #> 100         0      0              0 1.0000000        1 #> 101         0      0              0 1.0000000        1 #> 102         1      0              1 0.8333333        1 #> 103         1      0              1 0.8333333        1 #> 104         0      0              0 1.0000000        1 #> 105         0      0              0 1.0000000        1 #> 106         0      0              0 1.0000000        1 #> 107         1      0              1 0.8333333        1 #> 108         0      0              0 1.0000000        1 #> 109         0      0              0 1.0000000        1 #> 110         0      0              0 1.0000000        1 #> 111         0      0              0 1.0000000        1 #> 112         0      0              0 1.0000000        1 #> 113         0      0              0 1.0000000        1 #> 114         0      0              0 1.0000000        1 #> 115         1      0              1 0.8333333        1 #> 116         0      0              0 1.0000000        1 #> 117         0      0              0 1.0000000        1 #> 118         0      0              0 1.0000000        1 #> 119         1      0              1 0.8333333        1 #> 120         0      0              0 1.0000000        1 #> 121         0      0              0 1.0000000        1 #> 122         0      0              0 1.0000000        1 #> 123         0      0              0 1.0000000        1 #> 124         0      0              0 1.0000000        1 #> 125         0      0              0 1.0000000        1 #> 126         0      0              0 1.0000000        1 #> 127         0      0              0 1.0000000        1 #> 128         0      0              0 1.0000000        1 #> 129         0      0              0 1.0000000        1 #> 130         0      0              0 1.0000000        1 #> 131         0      0              0 1.0000000        1 #> 132         0      0              0 1.0000000        1 #> 133         0      0              0 1.0000000        1 #> 134         0      0              0 1.0000000        1 #> 135         0      0              0 1.0000000        1 #> 136         0      0              0 1.0000000        1 #> 137         0      0              0 1.0000000        1 #> 138         0      0              0 1.0000000        1 #> 139         0      0              0 1.0000000        1 #> 140         0      0              0 1.0000000        1 #> 141         0      0              0 1.0000000        1 #> 142         0      0              0 1.0000000        1 #> 143         0      0              0 1.0000000        1 #> 144         0      0              0 1.0000000        1 #> 145         0      0              0 1.0000000        1 #> 146         0      0              0 1.0000000        1 #> 147         0      0              0 1.0000000        1 #> 148         0      0              0 1.0000000        1 #> 149         0      0              0 1.0000000        1 #> 150         1      0              1 0.8333333        1 #> 151         0      0              0 1.0000000        1 #> 152         0      0              0 1.0000000        1 #> 153         0      0              0 1.0000000        1"},{"path":"https://bluefoxr.github.io/COINr/reference/get_data_avail.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data availability of units — get_data_avail","title":"Get data availability of units — get_data_avail","text":"Generic function getting data availability unit (row).","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_data_avail.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data availability of units — get_data_avail","text":"","code":"get_data_avail(x, ...)"},{"path":"https://bluefoxr.github.io/COINr/reference/get_data_avail.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data availability of units — get_data_avail","text":"x Either coin data frame ... Arguments passed methods","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_data_avail.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get data availability of units — get_data_avail","text":"See method documentation: get_data_avail.data.frame() get_data_avail.coin() See also vignettes: vignette(\"analysis\") vignette(\"imputation\").","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_denom_corr.html","id":null,"dir":"Reference","previous_headings":"","what":"Correlations between indicators and denominators — get_denom_corr","title":"Correlations between indicators and denominators — get_denom_corr","text":"Get data frame containing correlations indicators denominators exceed given threshold. can useful whether denominate indicator may obvious. indicator strongly correlated denominator, may suggest denominate denominator.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_denom_corr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correlations between indicators and denominators — get_denom_corr","text":"","code":"get_denom_corr(   coin,   dset,   cor_thresh = 0.6,   cortype = \"pearson\",   nround = 2,   use_directions = FALSE )"},{"path":"https://bluefoxr.github.io/COINr/reference/get_denom_corr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correlations between indicators and denominators — get_denom_corr","text":"coin coin class object. dset name data set apply function , accessible .$Data. cor_thresh correlation threshold: absolute value correlations indicator-denominator pairs threshold flagged. cortype type correlation: passed method argument stats::cor. nround Optional number decimal places round correlation values . Default 2, set NULL disable. use_directions Logical: TRUE extracted data adjusted using directions found inside coin (.e. \"Direction\" column input iMeta. See comments argument get_corr().","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_denom_corr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correlations between indicators and denominators — get_denom_corr","text":"data frame pairwise correlations exceed threshold.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_denom_corr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correlations between indicators and denominators — get_denom_corr","text":"","code":"# build example coin coin <- build_example_coin(up_to = \"new_coin\", quietly = TRUE)  # get correlations >0.7 of any indicator with denominators get_denom_corr(coin, dset = \"Raw\", cor_thresh = 0.7) #>          Ind  Denom Corr #> 70  CultGood Energy 0.71 #> 119 CultGood    GDP 0.85 #> 52       FDI Energy 0.74 #> 101      FDI    GDP 0.85 #> 99     Goods    GDP 0.80 #> 102   PRemit    GDP 0.71 #> 116 Research    GDP 0.78 #> 100 Services    GDP 0.77 #> 66     StMob Energy 0.73 #> 115    StMob    GDP 0.84"},{"path":"https://bluefoxr.github.io/COINr/reference/get_dset.coin.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets a named data set and performs checks — get_dset.coin","title":"Gets a named data set and performs checks — get_dset.coin","text":"helper function retrieve named data set coin object. Also performs input checks time.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_dset.coin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets a named data set and performs checks — get_dset.coin","text":"","code":"# S3 method for coin get_dset(x, dset, also_get = NULL, ...)"},{"path":"https://bluefoxr.github.io/COINr/reference/get_dset.coin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets a named data set and performs checks — get_dset.coin","text":"x coin class object dset character string corresponding named data set within .$Data. E.g. \"Raw\". also_get character vector specifying columns attach data set indicators aggregates. e.g. uName, groups, denominators columns labelled \"\" iMeta. columns stored .$Meta$Unit avoid repetition. Set also_get = \"\" attach columns, set also_get = \"none\" return numeric columns, .e. uCode column. ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_dset.coin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets a named data set and performs checks — get_dset.coin","text":"Data frame indicator data.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_dset.coin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gets a named data set and performs checks — get_dset.coin","text":"also_get specified, return indicator columns uCode identifiers first column. Optionally, also_get can specified attach metadata columns, return numeric (indicator) columns identifiers. latter option might useful e.g. examining correlations.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_dset.coin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets a named data set and performs checks — get_dset.coin","text":"","code":"# build example coin, just up to raw dset for speed coin <- build_example_coin(up_to = \"new_coin\", quietly = TRUE)  # retrieve raw data set with added cols get_dset(coin, dset = \"Raw\", also_get = c(\"uName\", \"GDP_group\")) #>    uCode              uName GDP_group      LPI   Flights      Ship Bord #> 1    AUS          Australia        XL 3.793385  36.05498 14.004198    0 #> 2    AUT            Austria         L 4.097985  29.01725  0.000000   35 #> 3    BEL            Belgium         L 4.108538  31.88546 20.567121   48 #> 4    BGD         Bangladesh         M 2.663902   4.27955  9.698165   16 #> 5    BGR           Bulgaria         S 2.807685   9.23588  7.919366   18 #> 6    BRN  Brunei Darussalam         S 2.870492   2.01900  7.492593    2 #> 7    CHE        Switzerland         L 3.987158  51.78846  0.000000   41 #> 8    CHN              China        XL 3.661104 114.20080 21.171976   32 #> 9    CYP             Cyprus         S 2.999061   8.75467 11.689495    0 #> 10   CZE     Czech Republic         M 3.674309  15.30953  0.000000   35 #> 11   DEU            Germany        XL 4.225967 174.35880 20.501262  105 #> 12   DNK            Denmark         L 3.815794  32.77050 14.407080    3 #> 13   ESP              Spain        XL 3.727412 170.96280 19.328835   26 #> 14   EST            Estonia         S 3.363489   3.12946  9.171997    6 #> 15   FIN            Finland         M 3.920745  18.85806 10.044155   18 #> 16   FRA             France        XL 3.900953  97.63489 19.536115   75 #> 17   GBR     United Kingdom        XL 4.069669 210.82440 20.800425   13 #> 18   GRC             Greece         M 3.239516  34.83849 15.679508   12 #> 19   HRV            Croatia         S 3.160829   9.24529 12.440452   41 #> 20   HUN            Hungary         M 3.428968  13.01196  0.000000   28 #> 21   IDN          Indonesia        XL 2.984537  34.68020 12.209998    2 #> 22   IND              India        XL 3.420043  25.26430 16.522118   35 #> 23   IRL            Ireland         L 3.794886  34.17721 10.575193   12 #> 24   ITA              Italy        XL 3.755414 110.27550 18.383778   24 #> 25   JPN              Japan        XL 3.970464  69.00941 17.261338    0 #> 26   KAZ         Kazakhstan         M 2.751998   4.02303  0.000000   46 #> 27   KHM           Cambodia         S 2.800590   9.52120  9.017474   13 #> 28   KOR              Korea        XL 3.717126  69.84827 20.427418    1 #> 29   LAO            Lao PDR         S 2.067254   3.07440  0.000000   20 #> 30   LTU          Lithuania         S 3.631688   5.37919  9.234349   22 #> 31   LUX         Luxembourg         S 4.219409   4.84458  0.000000   12 #> 32   LVA             Latvia         S 3.327107   6.77976  7.850937   17 #> 33   MLT              Malta         S 3.069256   6.75251 17.060552    0 #> 34   MMR            Myanmar         M 2.458571   6.69500  9.182403    8 #> 35   MNG           Mongolia         S 2.506056   0.98951  0.000000    9 #> 36   MYS           Malaysia         L 3.426307  53.33988 20.551337    9 #> 37   NLD        Netherlands         L 4.187530  63.59241 20.541548   32 #> 38   NOR             Norway         L 3.732163  25.64994  9.287889   19 #> 39   NZL        New Zealand         M 3.388000  13.37242 11.910746    0 #> 40   PAK           Pakistan         M 2.923219   2.21146 15.319999   43 #> 41   PHL        Philippines         L 2.856259  19.43838 11.621228    0 #> 42   POL             Poland         L 3.425877  33.79735 14.815517   62 #> 43   PRT           Portugal         M 3.409367  40.46484 16.198871   11 #> 44   ROU            Romania         M 2.993120  18.79894 12.689838   24 #> 45   RUS Russian Federation        XL 2.570864  34.06447 15.811485  122 #> 46   SGP          Singapore         L 4.143632  67.86156 20.276872    2 #> 47   SVK           Slovakia         M 3.336895   2.07397  0.000000   25 #> 48   SVN           Slovenia         S 3.184508   1.51736 13.380177   20 #> 49   SWE             Sweden         L 4.204593  31.74444 15.578093   18 #> 50   THA           Thailand         L 3.255100  73.92221 14.506399   17 #> 51   VNM            Vietnam         M 2.976629  28.52418 16.548761   25 #>            Elec      Gas ConSpeed  Cov4G      Goods  Services    FDI     PRemit #> 1    0.00000000  1.14000     11.1  94.00  288.48930 108.66450 20.900 14.7103856 #> 2   35.36972983  0.27300     14.1  98.00  278.42640 108.12730  5.000  5.0690118 #> 3   26.53304667 36.10000     16.3  99.89  597.87230 216.31460  5.710 13.3545270 #> 4    1.33161667  0.14400       NA  65.00   56.24166  10.07891  3.010  7.4693891 #> 5   11.27758417  0.31200     15.5  56.73   42.82515  12.97674  1.350  1.0395414 #> 6    0.00000000  6.04000       NA  80.00    7.23391   2.11464  0.130  0.7604628 #> 7   68.77328717  3.05000     21.7  98.00  402.86490 207.36370 12.200  9.4893412 #> 8    6.43630583  9.46000      7.6  85.00 1713.61900 657.10900 75.600 26.5510247 #> 9    0.43936433  0.02900      6.9  60.00    8.76681  15.23712  1.230  0.4772705 #> 10  46.75817867  2.70000     16.9  98.70  274.13650  43.46382  3.880  4.6915576 #> 11 110.17956283 48.70000     15.3  95.70 1919.19400 578.42640 47.000 28.6815953 #> 12  20.10336500  0.41800     20.1  99.99  146.67710 113.67530  9.100  2.1877554 #> 13  24.17962333  3.29000     15.5  91.30  447.12290 197.19810 17.100 16.7522764 #> 14   9.49907183  0.06670     11.6 100.00   28.24110  10.22780  0.580  0.5888337 #> 15  24.41426050  0.38000     20.5  99.90  101.57500  53.80751  6.030  1.5102145 #> 16  78.52593033 29.90000     10.8  80.00  849.33030 471.29310 30.900 30.2099053 #> 17  25.78370767 42.50000     16.9  97.80  778.90520 518.22560 55.500 20.6965329 #> 18   2.43086017  0.13900      7.9  83.00   56.62702  38.17887  0.883  0.7630075 #> 19  19.52836200  0.42200      8.6  98.00   28.36795  17.35676  0.387  1.5624119 #> 20  20.54324117  0.41900     14.8  97.30  173.61590  39.11952  3.210  4.1655816 #> 21   0.00000200 22.30000      7.2   5.00  222.41860  54.06682 19.300  4.4459418 #> 22   1.33225167  0.75100      6.5   4.00  288.98060 294.28220 41.800 14.6034747 #> 23   3.39668933  2.17000     15.6  90.00  139.99370 338.09850  6.100  1.9605859 #> 24  49.32954433  4.22000      9.2  93.00  658.19810 202.53980 10.300 16.2027497 #> 25   0.00003600 34.50000     20.2  99.00  732.20780 351.42530 37.100 10.5489456 #> 26   3.08950333 12.70000       NA  65.50   55.04856  16.85995  4.990  2.5553953 #> 27   2.18452350  0.13500       NA  30.00   20.75014   5.79267  4.190  0.6288657 #> 28   0.00003600 12.50000     28.6  99.00  568.99200 200.84810 26.700  8.7110922 #> 29   2.04784200  0.00841       NA   5.00    8.95527   1.37855  1.750  0.1662127 #> 30   7.49402750  0.98000     14.6  91.00   42.12889  12.35732  0.965  1.1467629 #> 31   6.91123783  0.48200     11.6  96.00   30.97279 165.79100  7.990  2.8993036 #> 32   5.68129900  0.37700     16.6  90.00   28.29194   7.25574  0.444  1.0374761 #> 33   1.06719433  0.07190     12.8 100.00   13.27830  20.06847  0.179  0.2330044 #> 34   0.39678050 24.10000       NA   0.00   31.70398   6.24003  6.700  0.9065301 #> 35   1.52714167  0.02670       NA  90.00    7.81803   2.72198  2.100  0.3115324 #> 36   0.06733867 26.30000      8.9  71.00  278.03190  72.93042 21.900  7.3896926 #> 37  44.09012050 23.00000     17.4  99.00  770.39350 346.55110 13.900  4.8949538 #> 38  19.54137450 94.80000     23.5  99.00  142.60950  83.35802  4.570  2.2852030 #> 39   0.00000000  0.02260     14.7  88.00   48.20846  26.55097  1.850  2.3361618 #> 40   0.00301600  0.19500       NA  16.00   45.28752  11.00249  6.950  3.9638222 #> 41   0.00000000  0.68300      5.5  39.00  118.56180  55.21572  6.130  8.2693569 #> 42  26.34419950  3.68000     12.6 100.00  363.01320  82.74544 10.100  6.2945847 #> 43  10.12481567  0.57300     12.9  94.30  102.49150  43.77949  2.330  5.2309644 #> 44   8.26470100  0.37600     17.0  72.00  115.31850  31.05017  4.050  4.7341943 #> 45  14.18802800 19.80000     11.8  50.00  343.85040 122.55080 17.000  5.5610250 #> 46   0.00000200  9.43000     20.3 100.00  414.23890 304.71690 27.000  6.0574964 #> 47  18.81965283  4.63000     13.0  75.00  140.36600  16.24510  2.320  2.7675602 #> 48  21.65607267  0.44200     13.7  97.70   54.98977  11.79091  0.362  0.7759290 #> 49  42.47252133  1.69000     22.5  99.99  233.30670 132.10610  8.070  4.7452582 #> 50   2.25995317 24.50000     16.0  21.00  282.80140 108.01090 17.200  7.3177969 #> 51   3.52419900  0.77600      9.5   0.00  269.07660  30.53244 24.900  5.0849807 #>        ForPort Embs IGOs   UNVote CostImpEx Tariff TBTs TIRcon RTAs Visa  StMob #> 1   2188.31100   82  196 38.46245     364.0   1.17  205      0   14   68 268.00 #> 2    808.68320   88  227 42.63920       0.0   1.60 1144      1   30   80  69.80 #> 3   1574.30800   84  248 43.00308       0.0   1.60 1348      1   30   80  42.30 #> 4      8.48896   52  145 38.60601     595.0  10.53   NA      0   12   45  50.40 #> 5     15.50880   67  209 42.95986      52.0   1.60 1140      1   30   79  28.80 #> 6           NA   41   85 38.50109     140.0   0.50    2      0   15   90   3.50 #> 7   2615.08900   82  222 42.64127     150.0   0.00  300      1   33   80  49.80 #> 8   1541.03500  100  193 37.13661     255.5   3.54 1230      1   17   11 445.00 #> 9     40.76228   43  172 42.34705     100.0   1.60 1141      1   30   79  29.40 #> 10   107.71030   84  201 42.22506       0.0   1.60 1456      1   30   79  47.90 #> 11  6386.91800  100  309 42.62615      45.0   1.60 1163      1   30   82 233.00 #> 12  1021.27800   77  259 42.79140       0.0   1.60 1393      1   30   81  33.20 #> 13  2040.57100   89  280 43.10103       0.0   1.60 1212      1   30   81  51.00 #> 14    17.41899   46  194 42.87997       0.0   1.60 1153      1   30   79   5.99 #> 15   747.62680   74  269 42.74629      70.0   1.60 1215      1   30   81  22.00 #> 16  6745.32800  100  329 40.42295       0.0   1.60 1385      1   30   81 152.00 #> 17  8206.97800  100  285 39.40118      25.0   1.60 1187      1   30   81 326.00 #> 18   185.10480   83  216 42.69301      30.0   1.60 1140      1   30   80  48.60 #> 19    16.88908   62  197 42.74966       0.0   1.60 1179      1   30   78   5.05 #> 20    72.52570   79  212 42.53351       0.0   1.60 1173      1   30   79  26.20 #> 21   287.61530   83  175 38.10477     303.2   2.64  118      1   17   59  31.10 #> 22   270.28240   95  198 36.92131     226.7   6.32  117      1   15   51 120.00 #> 23  6908.41200   74  195 42.68568     150.0   1.60 1143      1   30   80  24.50 #> 24  3264.08700   93  288 42.99491       0.0   1.60 1171      1   30   81  97.00 #> 25  7449.99300   95  201 42.17231     161.0   1.35  805      0   14   84 133.00 #> 26    87.49439   62  117 38.72687     320.0   2.51   19      1    2   48  83.90 #> 27          NA   42   95 38.02232     220.0   9.77    3      0   15   61   4.43 #> 28  1195.63500   86  210 42.00012      38.0   7.68  839      1   46   85  83.80 #> 29          NA   41   82 37.63291     350.0   1.65    1      0   16   61   6.46 #> 30    31.03612   50  190 42.71283      28.0   1.60 1170      1   30   79  12.10 #> 31 10601.75000   37  190 42.98426       0.0   1.60 1140      1   30   80  12.70 #> 32    26.82834   48  184 42.70066      35.0   1.60 1170      1   30   79   8.79 #> 33   139.86780   28  169 42.56485      25.0   1.60 1140      1   30   80   1.77 #> 34     0.04805   52   87 35.75572     350.0     NA    2      0   17   17   5.81 #> 35     5.20507   40  107 39.05257     147.0     NA    7      1    1   21   8.48 #> 36   248.16150   74  177 38.28493     105.0   3.68  236      0   17   91 115.00 #> 37  4697.46400   89  265 42.80321       0.0   1.60 1754      1   30   80  69.30 #> 38  1632.78100   78  259 43.11114       0.0   1.02   81      1   31   81  22.60 #> 39   235.98580   44  149 42.32222     147.0   1.27  108      0   13   80  49.20 #> 40    13.38957   72  157 38.14939     992.0   9.99  112      1   11    1  30.30 #> 41   103.68870   66  158 37.68160     103.0   3.40  256      0   17   57  10.60 #> 42   218.88300   87  238 42.58490       0.0   1.60 1147      1   30   79  35.60 #> 43   327.18220   72  236 43.18605       0.0   1.60 1141      1   30   80  14.40 #> 44    35.20750   75  217 42.52487       0.0   1.60 1230      1   30   79  38.70 #> 45   304.70170   99  232 36.12970     244.5   3.43   85      1    2   17 135.00 #> 46  1487.02000   58  119 38.74750      77.0   0.00   57      0   19   92  19.30 #> 47    70.29841   62  201 43.10103       0.0   1.60 1187      1   30   79  40.90 #> 48    49.05213   43  197 43.10103       0.0   1.60 1250      1   30   79   3.60 #> 49  1463.55900   78  278 42.75153      40.0   1.60 1364      1   30   81  28.10 #> 50   220.11210   78  152 38.82629     140.0     NA  609      0   17   61  30.30 #> 51     0.00189   80  138 37.53063     322.0   2.86  114      0   19   31  53.40 #>    Research    Pat CultServ CultGood Tourist MigStock        Lang       Renew #> 1     46761  229.8  2.00098    6.807   8.263  5.66849 19.00543746  9.18050296 #> 2     14432  519.1  1.52758    8.932  28.121  1.30365 14.19041597 34.39499175 #> 3     20176  655.8  2.38787   12.698   7.481  1.32919 10.69085182  9.20164053 #> 4      2084     NA  0.01472       NA   0.125  5.08139  0.17744048 34.74706901 #> 5      1854   12.2  0.11991    0.880   8.252  0.69462  6.28997761 17.65007793 #> 6       229     NA       NA    0.364   0.219  0.14041  6.24168794  0.01493504 #> 7     30056 1315.7  1.15976   28.965   9.205  2.12634 13.63554873 25.29198368 #> 8     95919  927.8  2.88624   74.468  59.270  4.30982  0.73963574 12.41335257 #> 9      1337    7.4  0.13700    0.529   3.187  0.23838 12.32117982  9.94206602 #> 10     9190  112.6  0.32230    8.807   9.321  1.10637  7.72876772 14.82856195 #> 11    78353 2771.7  4.83603   47.161  35.555 10.92850 15.26134955 14.20625270 #> 12    15986  306.0  1.98816    4.912  10.781  0.54405 19.26996939 33.17027717 #> 13    39777  334.7       NA   11.759  75.315  3.34468  5.15846746 16.25409774 #> 14     1594   14.4  0.10275    0.745   3.147  0.32117 12.21152796 27.47683347 #> 15    10303  412.5  0.58878    1.858   2.789  0.46894 15.04353335 43.23526259 #> 16    56677 1469.0  7.01905   41.028  82.570  4.37339 11.50318182 13.49926232 #> 17    96337 1313.7  9.56996   35.139  35.814  8.91445 19.35213020  8.71168557 #> 18     8020   43.4  0.47483    1.626  24.799  1.06705 10.59013987 17.17004755 #> 19     2342   15.1  0.28331    0.737  13.809  0.54069 11.97641492 33.12746664 #> 20     5180  109.5  1.51071    2.614   5.302  0.84562  5.22493581 15.55936205 #> 21     2624   23.7  0.13405       NA  11.519  2.06821  0.03222059 36.87934810 #> 22    20234  437.6  3.29198    7.991  14.569  8.43759  3.77194295 36.02122257 #> 23     7451  140.6  0.52220    3.424  10.100  1.28606 19.46425530  9.08139901 #> 24    45825  513.0  0.57832   26.843  52.372  4.87039  6.40814649 16.51685058 #> 25    31184  583.5  2.20754   16.182  24.040  2.19471  0.03107851  6.29735708 #> 26     1026    3.6  0.05780    0.985   6.509  6.38381  7.20274577  1.55844291 #> 27      378     NA  0.00501       NA   5.012  0.93047  4.41049248 64.92377591 #> 28    20437  249.8  1.79800       NA  17.242  2.06535  2.13461064  2.70770280 #> 29      175     NA       NA       NA   3.315  1.12532  0.16638354 59.31586075 #> 30     1482    7.5  0.06532    1.281   2.296  0.57490 10.50042321 28.96117925 #> 31     1206   66.2  8.04500    0.636   1.054  0.29738 21.48526056  9.03131366 #> 32      794    1.5  0.03320    0.735   1.793  0.47182 12.00784247 38.09801717 #> 33      347    4.7  2.46272    0.369   1.966  0.11826 16.91195826  5.35500475 #> 34      299     NA  0.08905       NA   2.907  2.57501  0.01884848 61.52781165 #> 35      293    0.3  0.00266    0.046   0.404  0.08170  2.25185464  3.42973729 #> 36     8080   64.2  1.15292    7.555  26.757  4.00744  6.66895073  5.19444259 #> 37    33445  641.2  2.42317   19.159  15.828  1.68457 18.15321190  5.88946308 #> 38    11696  168.1  1.66163    2.981   5.960  0.66093 15.09626505 57.77200160 #> 39     7731   46.5  0.34615    1.213   3.370  1.48606 16.68013129 30.78917555 #> 40     7122    7.2  0.03553    1.256   0.966  4.09286  1.71805798 46.47632492 #> 41     1361   11.3  0.29555    3.185   5.967  1.40403 10.89425114 27.45154445 #> 42    13008  179.3  1.44714   11.912  17.471  4.24078  9.10344746 11.91148821 #> 43    10943   46.1  0.53946    2.616  11.223  1.75075  6.93615852 27.15729839 #> 44     4173   42.6  0.14490    2.387  10.223  3.32536  7.05215979 23.69779403 #> 45    16182  141.5  1.44633    8.379  24.571  7.65393  5.92039782  3.30422835 #> 46    11411  270.5  0.92780   14.507  12.914  2.47645 12.57967365  0.70863530 #> 47     2741   44.2  0.08820    2.407   2.027  0.49825  8.23424298 13.40916822 #> 48     2653   30.8  0.20211    1.212   3.032  0.18037 14.10243000 20.87739614 #> 49    23514  661.5  0.90896    6.014   6.782  1.03933 18.16742472 53.24776980 #> 50     5317   53.6  0.08969    6.661  32.530  4.13663  0.15905946 22.86307013 #> 51     3618     NA       NA       NA  10.013  1.16007  0.08500231 34.99856984 #>     PrimEner        CO2    MatCon     Forest Poverty Palma TertGrad FreePress #> 1  123.01003 15.3701378 38.381073  6.3295294     0.3  1.40 29.78425        22 #> 2   84.92785  6.8737132 15.763616  3.0382810     0.7  1.11 13.08167        22 #> 3  113.76871  8.3281599 15.884942  5.7098277     0.0  0.96 31.70948        12 #> 4   74.74533  0.4591420  2.577148  5.2605370    19.6  1.26       NA        62 #> 5  151.98183  5.8716159 18.704688  1.5483901     1.5  1.49 24.47098        42 #> 6  113.44995 22.1247012 23.331756  3.2269754      NA    NA       NA        76 #> 7   53.47854  4.3115630 13.520983  0.9916749     0.0  1.20 36.94929        13 #> 8  175.31089  7.5439076 23.647067  3.7251454     1.4  2.10  3.57765        87 #> 9   77.69450  5.2603520 24.426326  1.7662068     0.0  1.40 25.54672        23 #> 10 134.44935  9.1659784 17.115225  4.9847983     0.0  0.92 19.34180        21 #> 11  86.76327  8.8893704 15.015616  2.3703489     0.0  1.10 24.74205        20 #> 12  63.75411  5.9357125 16.651923  5.3043935     0.2  1.04 30.38373        12 #> 13  79.00655  5.0338245 11.998735  6.9265991     1.0  1.46 29.29108        28 #> 14 169.38370 14.8488192 32.980617  9.4062132     0.5  1.26 37.60498        16 #> 15 159.24526  8.6607212 24.605785  8.5039377     0.0  0.95 22.50554        12 #> 16  97.46473  4.5720882 11.827461  3.7879808     0.0  1.31 17.66307        26 #> 17  72.59383  6.4974405  8.495755  5.4662193     0.2  1.25 29.33262        25 #> 18  88.19577  6.1803373 11.624611  1.8997660     1.5  1.55 22.92907        44 #> 19  94.25010  3.9738049  9.791906  1.7280976     0.7  1.22 18.25773        41 #> 20  95.79304  4.2655750 16.923169  5.8471809     0.5  1.13 20.67309        44 #> 21  88.36380  1.8193633  7.190287 10.6347954     7.2  1.81  8.48301        49 #> 22 118.26344  1.7300004  5.337525  3.3552538    21.2  1.48  9.13629        43 #> 23  56.06685  7.3781178 13.938004  3.5608942     0.5  1.25 26.83780        18 #> 24  71.12753  5.2708668 10.904800  2.0543587      NA  1.42 14.35266        31 #> 25  92.99299  9.5387061  9.381838  1.4232737      NA  1.22 29.87681        27 #> 26 188.00931 14.3623897 28.212457  0.4801006     0.1  0.92       NA        85 #> 27 133.44976  0.4377600  4.882918 22.8067646      NA  1.16       NA        70 #> 28 158.23984 11.5703454 15.904725  3.0383172     0.3    NA 24.35774        34 #> 29        NA  0.2972009 10.606696 13.1990072    22.7  1.68       NA        85 #> 30  90.93856  4.3780901 14.803791  8.0974972     0.7  1.43 33.09735        21 #> 31  73.25911 17.3621214 28.154633  4.5446296     0.2  1.40 34.27727        14 #> 32  97.98307  3.4981929 16.002621 10.3812689     0.7  1.44 27.79356        26 #> 33  55.99671  5.4915248 16.261072  2.9263320     0.0    NA 13.28486        23 #> 34  77.95974  0.4166004  3.300184  6.3602604     6.4    NA       NA        73 #> 35 161.97873  7.1273263 33.493893  2.9419658     0.2  1.23 23.71332        37 #> 36 122.65287  8.0329916 18.856906 17.2735413      NA  2.62 16.36954        69 #> 37  94.71582  9.9201381 14.304186  1.8284548     0.0  0.99 28.86907        11 #> 38  88.23266  9.2709451 21.150196  3.1175512     0.2  0.88 26.65009         8 #> 39 132.29055  7.6865758 24.861794  6.0694910      NA    NA 26.00903        19 #> 40 105.86127  0.8962641  4.432336  0.3263907     6.1  1.18  8.75331        65 #> 41  72.31282  1.0554568  3.972959  4.4737686     8.3  2.17 16.99506        44 #> 42 101.58949  7.5171516 17.682962  5.8058431     0.0  1.23 23.70020        34 #> 43  78.17923  4.3315540 11.090858 31.8455434     0.5  1.50 18.18253        17 #> 44  80.93064  3.5161537 11.469474  2.4348105     0.0  0.96 13.01408        38 #> 45 192.45083 11.8575278 16.362004  5.3007501     0.0  2.02  2.00915        83 #> 46  63.77904 10.3063319 33.369013  5.9836906      NA    NA 28.21053        67 #> 47 107.86727  5.6615813 10.910721  5.0249404     0.7  0.88 18.92215        26 #> 48 113.88117  6.2136868 13.770686  2.0597113     0.0  0.88 18.82353        23 #> 49 112.44515  4.4781822 17.027679  8.5016067     0.5  0.93 22.99885        11 #> 50 132.60433  4.6218600 12.304692  6.7611565     0.0  1.65 13.12545        77 #> 51 130.35543  1.8035657 13.594893 12.7836337     2.6  1.64       NA        84 #>      TolMin NGOs CPI    FemLab WomParl PubDebt  PrivDebt     GDPGrow   RDExp #> 1  3.600000  311  77 0.8592661 28.6667   37.64 202.50016  0.34888036 2.20207 #> 2  4.800000  301  75 0.8872138 30.6011   86.19 141.28513  2.18677558 3.07181 #> 3  4.600000 1824  75 0.8699724 38.0000  106.05 225.72427  1.36616464 2.45668 #> 4  8.400000   16  28 0.5414029 20.2857   31.67  40.81502  6.16478747      NA #> 5  5.100000   28  43 0.8927631 19.1667   26.30 116.98938  4.32022261 0.95657 #> 6  5.600000    1  62        NA  9.0909    2.81        NA  0.02851029      NA #> 7  3.600000  741  85 0.8936418 32.5000   45.66 237.77122 -0.01982295 2.96635 #> 8  7.600000  117  41 0.8359555 23.7030   42.92 193.43419  6.30396712 2.06558 #> 9  6.000000   19  57 0.8633334 17.8571  108.87 345.59967  0.00000000 0.45585 #> 10 5.100000   55  57 0.8119483 20.0000   40.31  73.21357  4.04300124 1.94865 #> 11 4.900000  986  81 0.8844910 36.9841   70.99 105.91991  1.79471020 2.87749 #> 12 4.400000  208  88 0.9270000 37.4302   45.53 223.23741  1.50309097 3.01387 #> 13 5.800000  341  57 0.8631487 39.1429   99.26 165.79129  2.85707386 1.21961 #> 14 7.536316   21  71 0.9000751 26.7327    9.74 126.58231  4.87884628 1.49502 #> 15 1.500000  118  85 0.9651910 42.0000   62.51 181.23815  2.33629470 2.90474 #> 16 7.000000 1071  70 0.8953486 25.8232   96.14 188.68200  1.42667764 2.23135 #> 17 6.400000 1582  82 0.8697419 30.0000   88.98 169.14574  1.12929130 1.70304 #> 18 5.100000  102  48 0.7784910 18.3333  176.94 124.65858  1.49779228 0.95673 #> 19 5.500000   30  49 0.8664952 19.8675   86.67 130.34435  3.99021292 0.85439 #> 20 4.500000   62  45 0.8249007 10.0503   75.33  92.51395  4.33844641 1.37762 #> 21 7.200000   32  37 0.6149829 19.8214   27.30  40.83840  3.92307260 0.08466 #> 22 8.300000  167  40 0.3455764 11.8081   69.07  55.03717  5.42924312 0.62740 #> 23 1.100000   64  74 0.8078358 22.1519   78.68 299.06965  6.49733804 1.51368 #> 24 4.800000  498  50 0.7364464 30.9524  132.71 115.32313  1.62982757 1.33488 #> 25 3.400000  252  73 0.7796105  9.2632  247.98 158.42065  1.88001976 3.28363 #> 26 7.900000    5  31 0.9010363 27.1028   21.89  52.65279  2.59552272 0.16944 #> 27 6.600000    0  21 0.8788125 20.3252   32.54  68.15849  5.19299957 0.11827 #> 28 2.600000  145  54 0.7311271 17.0000   37.89 193.24990  2.62122194 4.22816 #> 29 6.406549    1  29 1.0274716 27.5168   61.86  19.86313  5.33713473      NA #> 30 4.100000   16  59 0.9398145 21.2766   42.78  63.30250  5.31639215 1.04246 #> 31 2.800000   66  82 0.8341093 28.3333   21.45 421.38527 -0.67739873 1.28773 #> 32 8.300000   18  58 0.9234106 16.0000   34.94  96.90818  5.56194830 0.62550 #> 33 3.600000   14  56 0.6323963 12.5000   63.96 190.06811  4.14990811 0.76923 #> 34 9.800000    1  30        NA 10.1617   34.34  21.86631  5.40145516      NA #> 35 3.500000    3  36 0.8351940 17.1053      NA  85.61135  4.22356684 0.15501 #> 36 6.200000  113  47 0.6499864 10.3604   57.39 145.18617  4.43836861 1.29813 #> 37 4.500000  731  82 0.8748585 38.0000   65.12 231.32965  2.54478724 2.01329 #> 38 3.400000  160  85 0.9480041 39.6450   27.94 252.12094  0.99831301 1.93301 #> 39 3.300000   54  89 0.8854174 34.1667   29.95 174.09862  0.86445133 1.15236 #> 40 9.700000   25  32 0.2970086 20.5882   63.57  19.67393  3.65519604 0.24554 #> 41 8.200000  104  34 0.6490328 29.4521   34.79  56.33445  5.05974739 0.13839 #> 42 5.900000   50  60 0.8201792 28.0435   51.28  86.22427  4.53454572 1.00337 #> 43 2.200000   81  63 0.9104053 34.7826  128.98 184.73320  2.99637372 1.27885 #> 44 6.500000   30  48 0.7703541 20.6687   39.30  28.38030  7.57933150 0.48765 #> 45 8.500000   82  29 0.8649159 15.7778   16.42  70.67039  0.00000000 1.13202 #> 46 2.300000  139  84 0.7977098 23.7624  104.68 165.48938  3.52678166 2.19754 #> 47 6.600000   24  50 0.8132671 20.0000   52.91  92.63818  3.22730973 1.17845 #> 48 4.500000   31  61 0.9055214 36.6667   83.15  88.14863  4.91413516 2.21174 #> 49 1.800000  299  84 0.9490853 43.5530   43.40 207.22266  0.81838277 3.26285 #> 50 8.200000   98  37 0.8148830  4.8583   42.72 130.82868  3.64110272 0.62720 #> 51 5.700000    8  35 0.9194402 26.7206   58.25 123.81487  5.72587785 0.37404 #>    NEET #> 1   8.7 #> 2   6.5 #> 3   9.3 #> 4  27.4 #> 5  15.3 #> 6  17.2 #> 7   6.5 #> 8    NA #> 9  16.1 #> 10  6.3 #> 11  6.3 #> 12  7.0 #> 13 13.3 #> 14  9.4 #> 15  9.4 #> 16 11.5 #> 17 10.3 #> 18 15.3 #> 19 15.4 #> 20 11.0 #> 21 21.5 #> 22 27.9 #> 23 10.9 #> 24 20.0 #> 25  3.5 #> 26  9.5 #> 27 12.7 #> 28   NA #> 29 42.1 #> 30  9.2 #> 31  5.9 #> 32 10.3 #> 33  8.0 #> 34 17.4 #> 35 19.8 #> 36 12.8 #> 37  4.0 #> 38  4.6 #> 39 11.8 #> 40 30.4 #> 41 21.7 #> 42  9.5 #> 43  9.3 #> 44 15.2 #> 45 12.4 #> 46  4.0 #> 47 12.1 #> 48  6.5 #> 49  6.2 #> 50 15.0 #> 51  0.6"},{"path":"https://bluefoxr.github.io/COINr/reference/get_dset.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets a named data set and performs checks — get_dset","title":"Gets a named data set and performs checks — get_dset","text":"helper function retrieve named data set coin purse objects. See individual documentation :","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_dset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets a named data set and performs checks — get_dset","text":"","code":"get_dset(x, dset, ...)"},{"path":"https://bluefoxr.github.io/COINr/reference/get_dset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets a named data set and performs checks — get_dset","text":"x coin purse dset character string corresponding named data set within .$Data. E.g. \"Raw\". ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_dset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets a named data set and performs checks — get_dset","text":"Data frame indicator data, indexed also time input purse.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_dset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gets a named data set and performs checks — get_dset","text":"get_dset.coin() get_dset.purse()","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_dset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets a named data set and performs checks — get_dset","text":"","code":"# see examples for methods"},{"path":"https://bluefoxr.github.io/COINr/reference/get_dset.purse.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets a named data set and performs checks — get_dset.purse","title":"Gets a named data set and performs checks — get_dset.purse","text":"helper function retrieve named data set purse object. Retrieves specified data set coin purse joins together single data frame using rbind(), indexed Time column.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_dset.purse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets a named data set and performs checks — get_dset.purse","text":"","code":"# S3 method for purse get_dset(x, dset, Time = NULL, also_get = NULL, ...)"},{"path":"https://bluefoxr.github.io/COINr/reference/get_dset.purse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets a named data set and performs checks — get_dset.purse","text":"x purse class object dset character string corresponding named data set within coin .$Data. E.g. \"Raw\". Time Optional time index extract subset coins present purse. vector containing one entries x$Time NULL return (default). also_get character vector specifying columns attach data set indicators aggregates. e.g. uName, groups, denominators columns labelled \"\" iMeta. columns stored .$Meta$Unit avoid repetition. Set also_get = \"\" attach columns, set also_get = \"none\" return numeric columns, .e. uCode column. ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_dset.purse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets a named data set and performs checks — get_dset.purse","text":"Data frame indicator data.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_dset.purse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets a named data set and performs checks — get_dset.purse","text":"","code":"# build example purse purse <- build_example_purse(up_to = \"new_coin\", quietly = TRUE)  # get raw data set df1 <- get_dset(purse, dset = \"Raw\")"},{"path":"https://bluefoxr.github.io/COINr/reference/get_eff_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Get effective weights — get_eff_weights","title":"Get effective weights — get_eff_weights","text":"Calculates \"effective weight\" indicator aggregate index level. effective weight calculated final weight component index, due just weight, also weights aggregation involved , plus number indicators/aggregates group. effective weight one way understanding final contribution indicator index. See also vignette(\"weights\").","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_eff_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get effective weights — get_eff_weights","text":"","code":"get_eff_weights(coin, out2 = \"df\")"},{"path":"https://bluefoxr.github.io/COINr/reference/get_eff_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get effective weights — get_eff_weights","text":"coin coin class object out2 Either \"coin\" \"df\"","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_eff_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get effective weights — get_eff_weights","text":"Either iMeta data frame effective weights added column, updated coin effective weights added .$Meta$Ind.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_eff_weights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get effective weights — get_eff_weights","text":"function replaces now-defunct effectiveWeight() COINr < v1.0.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_eff_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get effective weights — get_eff_weights","text":"","code":"# build example coin coin <- build_example_coin(up_to = \"new_coin\", quietly = TRUE)  # get effective weights as data frame w_eff <- get_eff_weights(coin, out2 = \"df\")  head(w_eff) #>       iCode Level Weight  EffWeight #> 9     Goods     1      1 0.02000000 #> 10 Services     1      1 0.02000000 #> 11      FDI     1      1 0.02000000 #> 12   PRemit     1      1 0.02000000 #> 13  ForPort     1      1 0.02000000 #> 31    Renew     1      1 0.03333333"},{"path":"https://bluefoxr.github.io/COINr/reference/get_noisy_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Noisy replications of weights — get_noisy_weights","title":"Noisy replications of weights — get_noisy_weights","text":"Given data frame weights, function returns multiple replicates weights, added noise. intended use uncertainty sensitivity analysis.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_noisy_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Noisy replications of weights — get_noisy_weights","text":"","code":"get_noisy_weights(w, noise_specs, Nrep)"},{"path":"https://bluefoxr.github.io/COINr/reference/get_noisy_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Noisy replications of weights — get_noisy_weights","text":"w data frame weights, format found .$Meta$Weights. noise_specs data frame columns: Level: aggregation level apply noise NoiseFactor: size perturbation: setting e.g. 0.2 perturbs +/- 20% nominal values. Nrep number weight replications generate.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_noisy_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Noisy replications of weights — get_noisy_weights","text":"list Nrep sets weights (data frames).","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_noisy_weights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Noisy replications of weights — get_noisy_weights","text":"Weights expected data frame format columns Level, iCode Weight, used iMeta. Note NAs allowed anywhere data frame. Noise added using noise_specs argument, specified data frame columns Level NoiseFactor. aggregation level refers number aggregation level target NoiseFactor refers size perturbation. e.g. row Level = 1 NoiseFactor = 0.2, allow weights aggregation level 1 deviate +/- 20% nominal values (values w). function replaces now-defunct noisyWeights() COINr < v1.0.","code":""},{"path":[]},{"path":"https://bluefoxr.github.io/COINr/reference/get_noisy_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Noisy replications of weights — get_noisy_weights","text":"","code":"# build example coin coin <- build_example_coin(up_to = \"new_coin\", quietly = TRUE)  # get nominal weights w_nom <- coin$Meta$Weights$Original  # build data frame specifying the levels to apply the noise at # here we vary at levels 2 and 3 noise_specs = data.frame(Level = c(2,3),                          NoiseFactor = c(0.25, 0.25))  # get 100 replications noisy_wts <- get_noisy_weights(w = w_nom, noise_specs = noise_specs, Nrep = 100)  # examine one of the noisy weight sets, last few rows tail(noisy_wts[[1]]) #>       iCode Level    Weight #> 55  Environ     2 0.8357101 #> 56   Social     2 1.1351508 #> 57 SusEcFin     2 1.1909768 #> 58     Conn     3 1.0245484 #> 59     Sust     3 0.8888619 #> 60    Index     4 1.0000000"},{"path":"https://bluefoxr.github.io/COINr/reference/get_opt_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Weight optimisation — get_opt_weights","title":"Weight optimisation — get_opt_weights","text":"function provides optimised weights agree pre-specified vector \"target importances\".","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_opt_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weight optimisation — get_opt_weights","text":"","code":"get_opt_weights(   coin,   itarg = NULL,   dset,   Level,   cortype = \"pearson\",   optype = \"balance\",   toler = NULL,   maxiter = NULL,   weights_to = NULL,   out2 = \"list\" )"},{"path":"https://bluefoxr.github.io/COINr/reference/get_opt_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weight optimisation — get_opt_weights","text":"coin coin object itarg vector (relative) target importances. example, c(1,2,1) specify second indicator twice \"important\" two. dset Name aggregated data set found coin$Data results calling Aggregate(). Level aggregation level apply weight adjustment . can one level. cortype type correlation use - can either \"pearson\", \"spearman\" \"kendall\". See stats::cor. optype optimisation type. Either \"balance\", aims balance correlations according vector \"importances\" specified itarg (default), \"infomax\" aims maximise overall correlations. toler Tolerance convergence. Defaults 0.1 (decrease accuracy, increase convergence problems). maxiter Maximum number iterations. Default 500. weights_to Name write optimised weight set , out2 = \"coin\". out2 output results. \"coin\" (default coin input), appends updated coin, creating new list weights .$Parameters$Weights. Otherwise \"list\" outputs list (default).","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_opt_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weight optimisation — get_opt_weights","text":"out2 = \"coin\" returns updated coin object new set weights .$Meta$Weights, plus details optimisation .$Analysis. Else out2 = \"list\" outputs (new weights plus details optimisation) wrapped list.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_opt_weights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Weight optimisation — get_opt_weights","text":"linear version weight optimisation proposed paper: doi:10.1016/j.ecolind.2017.03.056 . Weights optimised agree pre-specified vector \"importances\". optimised weights returned back coin. See vignette(\"weights\") details usage function explanation underlying method. Note function calculates correlations without considering statistical significance. function replaces now-defunct weightOpt() COINr < v1.0.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_opt_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weight optimisation — get_opt_weights","text":"","code":"# build example coin coin <- build_example_coin(quietly = TRUE)  # check correlations between level 3 and index get_corr(coin, dset = \"Aggregated\", Levels = c(3, 4)) #>    Var1 Var2 Correlation #> 1 Index Conn   0.9397805 #> 2 Index Sust   0.8382873  # optimise weights at level 3 l_opt <- get_opt_weights(coin, itarg = \"equal\", dset = \"Aggregated\",                         Level = 3, weights_to = \"OptLev3\", out2 = \"list\") #> iterating... objective function = -7.11287670895252 #> iterating... objective function = -6.75731482891423 #> iterating... objective function = -7.5563175412706 #> iterating... objective function = -8.21181051402935 #> iterating... objective function = -10.0802172796095 #> iterating... objective function = -13.3043247136273 #> iterating... objective function = -8.7011048855954 #> iterating... objective function = -7.93721550859392 #> iterating... objective function = -9.92111795779074 #> iterating... objective function = -8.57337082557942 #> iterating... objective function = -13.0490317878554 #> iterating... objective function = -10.1205749624737 #> iterating... objective function = -11.4698196057753 #> iterating... objective function = -11.5046209642509 #> iterating... objective function = -12.938292451273 #> Optimisation successful!  # view results tail(l_opt$WeightsOpt) #>       iCode Level    Weight #> 55  Environ     2 1.0000000 #> 56   Social     2 1.0000000 #> 57 SusEcFin     2 1.0000000 #> 58     Conn     3 0.3902439 #> 59     Sust     3 0.6097561 #> 60    Index     4 1.0000000  l_opt$CorrResultsNorm #>   Desired  Obtained OptWeight #> 1     0.5 0.5015505 0.3902439 #> 2     0.5 0.4984495 0.6097561"},{"path":"https://bluefoxr.github.io/COINr/reference/get_pvals.html","id":null,"dir":"Reference","previous_headings":"","what":"P-values for correlations in a data frame or matrix — get_pvals","title":"P-values for correlations in a data frame or matrix — get_pvals","text":"stripped version \"cor.mtest()\" function \"corrplot\" package. uses stats::cor.test() function calculate pairwise p-values. Unlike corrplot version, calculates p-values, confidence intervals. Credit corrplot code, replicate avoid depending package single function.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_pvals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"P-values for correlations in a data frame or matrix — get_pvals","text":"","code":"get_pvals(X, ...)"},{"path":"https://bluefoxr.github.io/COINr/reference/get_pvals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"P-values for correlations in a data frame or matrix — get_pvals","text":"X numeric matrix data frame ... Additional arguments passed function cor.test(), e.g. conf.level = 0.95.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_pvals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"P-values for correlations in a data frame or matrix — get_pvals","text":"Matrix p-values","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_pvals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"P-values for correlations in a data frame or matrix — get_pvals","text":"","code":"# a matrix of random numbers, 3 cols x <- matrix(runif(30), 10, 3)  # get correlations between cols cor(x) #>            [,1]       [,2]       [,3] #> [1,]  1.0000000 -0.4518163 -0.5778409 #> [2,] -0.4518163  1.0000000  0.4333702 #> [3,] -0.5778409  0.4333702  1.0000000  # get p values of correlations between cols get_pvals(x) #>            [,1]      [,2]       [,3] #> [1,] 0.00000000 0.1899003 0.08019865 #> [2,] 0.18990031 0.0000000 0.21087999 #> [3,] 0.08019865 0.2108800 0.00000000"},{"path":"https://bluefoxr.github.io/COINr/reference/get_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Results summary tables — get_results","title":"Results summary tables — get_results","text":"Generates fast results tables, either attached coin data frame.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Results summary tables — get_results","text":"","code":"get_results(   coin,   dset,   tab_type = \"Summ\",   also_get = NULL,   use = \"scores\",   order_by = NULL,   nround = 2,   use_group = NULL,   out2 = \"df\" )"},{"path":"https://bluefoxr.github.io/COINr/reference/get_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Results summary tables — get_results","text":"coin coin object, data frame indicator data dset Name data set .$Data tab_type type table generate. Either \"Summ\" (single indicator plus rank), \"Aggs\" (aggregated scores/ranks indicator level), \"Full\" (scores/ranks plus group, denominator columns). also_get Names columns attach table. use Either \"scores\" (default), \"ranks\", \"groupranks\". latter, use_group must specified. order_by code indicator aggregate sort table . specified, defaults highest aggregate level, .e. index cases. use_group specified, rows also sorted specified group. nround number decimal places round numerical values . Defaults 2. use_group optional grouping variable. specified, results table includes group column, use = \"groupranks\", ranks returned respect groups column. out2 \"df\", outputs data frame (tibble). Else \"coin\" attaches .$Results updated coin.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Results summary tables — get_results","text":"out2 = \"df\", results table returned data frame. out2 = \"coin\", function returns updated coin results table attached .$Results.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_results.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Results summary tables — get_results","text":"Although results available coin .$Data, format makes difficult quickly present results. function generates results tables suitable immediate presentation, .e. sorted index indicators, including relevant columns. Scores also rounded default, option present scores ranks. See also vignette(\"results\") info. function replaces now-defunct getResults() COINr < v1.0.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Results summary tables — get_results","text":"","code":"# build full example coin coin <- build_example_coin(quietly = TRUE)  # get results table df_results <- get_results(coin, dset = \"Aggregated\", tab_type = \"Aggs\")  head(df_results) #>   uCode Rank Index  Conn  Sust Physical ConEcFin Political Instit   P2P Environ #> 1   CHE    1 68.38 62.79 73.98    63.41    32.87     74.78  85.94 56.93   77.21 #> 2   NLD    2 64.82 61.94 67.70    64.87    46.62     84.55  71.74 41.92   58.73 #> 3   DNK    3 64.80 57.10 72.51    50.52    30.43     78.13  75.35 51.04   69.83 #> 4   NOR    4 64.47 57.44 71.50    58.18    25.70     80.03  89.46 33.80   70.90 #> 5   BEL    5 63.54 63.99 63.09    71.97    48.22     80.84  75.60 43.32   53.01 #> 6   SWE    6 63.00 53.87 72.12    51.51    23.87     80.98  74.51 38.50   66.37 #>   Social SusEcFin #> 1  87.85    56.88 #> 2  86.58    57.78 #> 3  86.40    61.29 #> 4  87.00    56.59 #> 5  86.17    50.09 #> 6  87.74    62.27"},{"path":"https://bluefoxr.github.io/COINr/reference/get_sensitivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Sensitivity and uncertainty analysis of a coin — get_sensitivity","title":"Sensitivity and uncertainty analysis of a coin — get_sensitivity","text":"function performs global sensitivity uncertainty analysis coin. must specify parameters coin vary, alternatives/distributions parameters.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_sensitivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sensitivity and uncertainty analysis of a coin — get_sensitivity","text":"","code":"get_sensitivity(   coin,   SA_specs,   N,   SA_type = \"UA\",   dset,   iCode,   Nboot = NULL,   quietly = FALSE )"},{"path":"https://bluefoxr.github.io/COINr/reference/get_sensitivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sensitivity and uncertainty analysis of a coin — get_sensitivity","text":"coin coin SA_specs Specifications input uncertainties N number regenerations SA_type type analysis run. \"UA\" runs uncertainty analysis. \"SA\" runs sensitivity analysis (anyway includes uncertainty analysis). dset data set extract target variable (passed get_data()). iCode variable within dset use target variable (passed get_data()). Nboot Number bootstrap samples take estimating confidence intervals sensitivity indices. quietly Set TRUE suppress progress messages.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_sensitivity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sensitivity and uncertainty analysis of a coin — get_sensitivity","text":"Sensitivity analysis results list, containing: .$Scores data frame row unit, columns scores replication. .$Ranks .$Scores unit ranks .$RankStats summary statistics ranks unit .$Para list containing parameter values run .$Nominal nominal scores ranks unit (.e. original COIN) .$Sensitivity (SA_type = \"SA\") sensitivity indices parameter. Also confidence intervals Nboot specified. information time elapsed, average time, parameters perturbed. Depending setting store_results, may also contain list Methods list COINs replication.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_sensitivity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sensitivity and uncertainty analysis of a coin — get_sensitivity","text":"COINr implements flexible variance-based global sensitivity analysis approach, allows almost assumption varied, long distribution alternative values can described. Variance-based \"sensitivity indices\" estimated using Monte Carlo design (running composite indicator many times particular combination input values). follows methodology described doi:10.1111/j.1467-985X.2005.00350.x . understand function works, please see vignette(\"sensitivity\"). , briefly recap main input arguments. First, can select whether run uncertainty analysis SA_type = \"UA\" sensitivity analysis SA_type = \"SA\". number replications (regenerations coin) specified N. Keep mind total number replications N uncertainty analysis N*(d + 2) sensitivity analysis due experimental design used. run either types analysis, must specify parts coin vary distributions/alternatives done using SA_specs, structured list. See vignette(\"sensitivity\") details examples. also need specify target sensitivity analysis. indicator aggregate can found one data sets coin, specified using dset iCode arguments. Finally, SA_type = \"SA\", advisable set Nboot e.g. 100 , number bootstrap samples take estimating confidence intervals sensitivity indices. perform extra regenerations coin, setting higher number much impact computational time. function replaces now-defunct sensitivity() COINr < v1.0.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_sensitivity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sensitivity and uncertainty analysis of a coin — get_sensitivity","text":"","code":"# for examples, see `vignette(\"sensitivity\")` # (this is because package examples are run automatically and this function can # take a few minutes to run at realistic settings)"},{"path":"https://bluefoxr.github.io/COINr/reference/get_stats.coin.html","id":null,"dir":"Reference","previous_headings":"","what":"Statistics of indicators — get_stats.coin","title":"Statistics of indicators — get_stats.coin","text":"Given coin specified data set (dset), returns table statistics entries column.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_stats.coin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Statistics of indicators — get_stats.coin","text":"","code":"# S3 method for coin get_stats(   x,   dset,   t_skew = 2,   t_kurt = 3.5,   t_avail = 0.65,   t_zero = 0.5,   t_unq = 0.5,   nsignif = 3,   out2 = \"df\",   ... )"},{"path":"https://bluefoxr.github.io/COINr/reference/get_stats.coin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Statistics of indicators — get_stats.coin","text":"x coin dset data set present .$Data t_skew Absolute skewness threshold. See details. t_kurt Kurtosis threshold. See details. t_avail Data availability threshold. See details. t_zero threshold 0 1 flagging indicators high proportion zeroes. See details. t_unq threshold 0 1 flagging indicators low proportion unique values. See details.plot nsignif Number significant figures round output table . out2 Either \"df\" (default) output data frame indicator statistics, \"coin\" output updated coin data frame attached .$Analysis. ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_stats.coin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Statistics of indicators — get_stats.coin","text":"Either data frame updated coin - see out2.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_stats.coin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Statistics of indicators — get_stats.coin","text":"statistics (columns output table) follows (entries correspond column): Min: minimum Max: maximum Mean: (arirthmetic) mean Median: median Std: standard deviation Skew: skew Kurt: kurtosis N.Avail: number non-NA values N.NonZero: number non-zero values N.Unique: number unique values Frc.Avail: fraction non-NA values Frc.NonZero: fraction non-zero values Frc.Unique: fraction unique values Flag.Avail: data availability flag - columns Frc.Avail < t_avail flagged \"LOW\", else \"ok\". Flag.NonZero: flag columns high proportion zeros. columns Frc.NonZero < t_zero flagged \"LOW\", otherwise \"ok\". Flag.Unique: unique value flag - columns Frc.Unique < t_unq flagged \"LOW\", otherwise \"ok\". Flag.SkewKurt: skew kurtosis flag indication possible outliers. columns abs(Skew) > t_skew Kurt > t_kurt flagged \"\", otherwise \"ok\". aim table, among things, check basic statistics column/indicator, identify possible issues indicator. example, low data availability, high proportion zeros /low proportion unique values. , combination skew kurtosis (.e. Flag.SkewKurt column) simple test possible outliers, may require treatment using Treat(). table can returned either coin standalone data frame - see out2. See also vignette(\"analysis\").","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_stats.coin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Statistics of indicators — get_stats.coin","text":"","code":"# build example coin coin <-  build_example_coin(up_to = \"new_coin\", quietly = TRUE)  # get table of indicator statistics for raw data set get_stats(coin, dset = \"Raw\", out2 = \"df\") #>        iCode       Min      Max     Mean   Median      Std    Skew    Kurt #> 1        LPI   2.07000     4.23 3.41e+00    3.420 5.38e-01 -0.3040 -0.6570 #> 2    Flights   0.99000   211.00 3.86e+01   25.600 4.67e+01  2.1000  4.5100 #> 3       Ship   0.00000    21.20 1.20e+01   12.700 6.84e+00 -0.5760 -0.6810 #> 4       Bord   0.00000   122.00 2.36e+01   18.000 2.48e+01  2.1500  5.7900 #> 5       Elec   0.00000   110.00 1.62e+01    6.910 2.27e+01  2.2300  5.7900 #> 6        Gas   0.00841    94.80 1.00e+01    1.140 1.75e+01  2.8300 10.3000 #> 7   ConSpeed   5.50000    28.60 1.43e+01   14.600 5.11e+00  0.4620  0.1870 #> 8      Cov4G   0.00000   100.00 7.56e+01   91.000 3.21e+01 -1.3700  0.5420 #> 9      Goods   7.23000  1920.00 2.90e+02  143.000 3.88e+02  2.6500  8.2700 #> 10  Services   1.38000   657.00 1.29e+02   54.100 1.61e+02  1.7000  2.3800 #> 11       FDI   0.13000    75.60 1.25e+01    6.100 1.58e+01  2.1000  4.8900 #> 12    PRemit   0.16600    30.20 6.56e+00    4.690 7.37e+00  1.8100  2.9400 #> 13   ForPort   0.00189 10600.00 1.58e+03  259.000 2.59e+03  2.0200  3.3000 #> 14      Embs  28.00000   100.00 7.09e+01   75.000 2.01e+01 -0.3680 -0.9930 #> 15      IGOs  82.00000   329.00 1.98e+02  197.000 5.86e+01 -0.0635 -0.2490 #> 16    UNVote  35.80000    43.20 4.09e+01   42.500 2.38e+00 -0.6750 -1.2000 #> 17 CostImpEx   0.00000   992.00 1.25e+02   45.000 1.82e+02  2.6900  9.8400 #> 18    Tariff   0.00000    10.50 2.46e+00    1.600 2.38e+00  2.4500  5.4100 #> 19      TBTs   1.00000  1750.00 7.95e+02 1140.000 5.50e+02 -0.3960 -1.5500 #> 20    TIRcon   0.00000     1.00 7.45e-01    1.000 4.40e-01 -1.1600 -0.6850 #> 21      RTAs   1.00000    46.00 2.39e+01   30.000 9.38e+00 -0.6780  0.1330 #> 22      Visa   1.00000    92.00 6.92e+01   79.000 2.22e+01 -1.7600  2.1700 #> 23     StMob   1.77000   445.00 6.41e+01   33.200 8.66e+01  2.7300  8.3100 #> 24  Research 175.00000 96300.00 1.63e+04 7730.000 2.31e+04  2.2200  4.8100 #> 25       Pat   0.30000  2770.00 3.34e+02  113.000 5.27e+02  2.8500 10.1000 #> 26  CultServ   0.00266     9.57 1.45e+00    0.578 2.09e+00  2.4700  6.3900 #> 27  CultGood   0.04600    74.50 1.00e+01    3.300 1.50e+01  2.6100  7.7400 #> 28   Tourist   0.12500    82.60 1.51e+01    9.200 1.84e+01  2.1900  4.9000 #> 29  MigStock   0.08170    10.90 2.48e+00    1.400 2.53e+00  1.5400  2.0600 #> 30      Lang   0.01880    21.50 9.31e+00    9.100 6.35e+00  0.0934 -1.0800 #> 31     Renew   0.01490    64.90 2.27e+01   17.200 1.72e+01  0.8220 -0.0661 #> 32  PrimEner  53.50000   192.00 1.06e+02   96.600 3.54e+01  0.7500 -0.1470 #> 33       CO2   0.29700    22.10 6.71e+00    5.940 4.55e+00  1.1100  1.8300 #> 34    MatCon   2.58000    38.40 1.60e+01   15.000 8.21e+00  0.7590  0.4240 #> 35    Forest   0.32600    31.80 5.95e+00    4.980 5.63e+00  2.7100  9.3500 #> 36   Poverty   0.00000    22.70 2.44e+00    0.400 5.51e+00  2.9200  7.8800 #> 37     Palma   0.88000     2.62 1.34e+00    1.250 3.75e-01  1.3300  2.3000 #> 38  TertGrad   2.01000    37.60 2.19e+01   23.300 8.52e+00 -0.3830 -0.3030 #> 39 FreePress   8.00000    87.00 3.84e+01   28.000 2.44e+01  0.7540 -0.7800 #> 40    TolMin   1.10000     9.80 5.39e+00    5.100 2.15e+00  0.0633 -0.6600 #> 41      NGOs   0.00000  1820.00 2.20e+02   66.000 3.87e+02  2.7900  7.9200 #> 42       CPI  21.00000    89.00 5.74e+01   57.000 1.98e+01  0.0203 -1.2500 #> 43    FemLab   0.29700     1.03 8.18e-01    0.863 1.41e-01 -2.0600  5.0200 #> 44   WomParl   4.86000    43.60 2.44e+01   23.700 9.72e+00  0.0859 -0.7890 #> 45   PubDebt   2.81000   248.00 6.30e+01   52.100 4.37e+01  2.0000  5.9700 #> 46  PrivDebt  19.70000   421.00 1.40e+02  128.000 8.49e+01  0.9570  1.4300 #> 47   GDPGrow  -0.67700     7.58 3.22e+00    3.530 2.04e+00 -0.0516 -0.9300 #> 48     RDExp   0.08470     4.23 1.50e+00    1.290 1.02e+00  0.6100 -0.2760 #> 49      NEET   0.60000    42.10 1.26e+01   10.900 7.74e+00  1.6000  3.6300 #>    N.Avail N.NonZero N.Unique N.Same Frc.Avail Frc.NonZero Frc.Unique Frc.Same #> 1       51        51       51      1     1.000       1.000     1.0000   0.0196 #> 2       51        51       51      1     1.000       1.000     1.0000   0.0196 #> 3       51        42       43      9     1.000       0.824     0.8430   0.1760 #> 4       51        45       30      6     1.000       0.882     0.5880   0.1180 #> 5       51        47       46      4     1.000       0.922     0.9020   0.0784 #> 6       51        51       51      1     1.000       1.000     1.0000   0.0196 #> 7       43        43       40      2     0.843       1.000     0.9300   0.0465 #> 8       51        49       37      4     1.000       0.961     0.7250   0.0784 #> 9       51        51       51      1     1.000       1.000     1.0000   0.0196 #> 10      51        51       51      1     1.000       1.000     1.0000   0.0196 #> 11      51        51       51      1     1.000       1.000     1.0000   0.0196 #> 12      51        51       51      1     1.000       1.000     1.0000   0.0196 #> 13      48        48       48      1     0.941       1.000     1.0000   0.0208 #> 14      51        51       33      4     1.000       1.000     0.6470   0.0784 #> 15      51        51       46      3     1.000       1.000     0.9020   0.0588 #> 16      51        51       49      3     1.000       1.000     0.9610   0.0588 #> 17      51        33       29     18     1.000       0.647     0.5690   0.3530 #> 18      48        46       20     28     0.941       0.958     0.4170   0.5830 #> 19      50        50       42      4     0.980       1.000     0.8400   0.0800 #> 20      51        38        2     38     1.000       0.745     0.0392   0.7450 #> 21      51        51       14     28     1.000       1.000     0.2750   0.5490 #> 22      51        51       22     11     1.000       1.000     0.4310   0.2160 #> 23      51        51       50      2     1.000       1.000     0.9800   0.0392 #> 24      51        51       51      1     1.000       1.000     1.0000   0.0196 #> 25      45        45       45      1     0.882       1.000     1.0000   0.0222 #> 26      47        47       47      1     0.922       1.000     1.0000   0.0213 #> 27      44        44       44      1     0.863       1.000     1.0000   0.0227 #> 28      51        51       51      1     1.000       1.000     1.0000   0.0196 #> 29      51        51       51      1     1.000       1.000     1.0000   0.0196 #> 30      51        51       51      1     1.000       1.000     1.0000   0.0196 #> 31      51        51       51      1     1.000       1.000     1.0000   0.0196 #> 32      50        50       50      1     0.980       1.000     1.0000   0.0200 #> 33      51        51       51      1     1.000       1.000     1.0000   0.0196 #> 34      51        51       51      1     1.000       1.000     1.0000   0.0196 #> 35      51        51       51      1     1.000       1.000     1.0000   0.0196 #> 36      44        30       17     14     0.863       0.682     0.3860   0.3180 #> 37      45        45       35      3     0.882       1.000     0.7780   0.0667 #> 38      44        44       44      1     0.863       1.000     1.0000   0.0227 #> 39      51        51       38      3     1.000       1.000     0.7450   0.0588 #> 40      51        51       42      3     1.000       1.000     0.8240   0.0588 #> 41      51        50       47      3     1.000       0.980     0.9220   0.0588 #> 42      51        51       39      3     1.000       1.000     0.7650   0.0588 #> 43      49        49       49      1     0.961       1.000     1.0000   0.0204 #> 44      51        51       49      2     1.000       1.000     0.9610   0.0392 #> 45      50        50       50      1     0.980       1.000     1.0000   0.0200 #> 46      50        50       50      1     0.980       1.000     1.0000   0.0200 #> 47      51        49       50      2     1.000       0.961     0.9800   0.0392 #> 48      47        47       47      1     0.922       1.000     1.0000   0.0213 #> 49      49        49       40      3     0.961       1.000     0.8160   0.0612 #>    Flag.Avail Flag.NonZero Flag.Unique Flag.SkewKurt #> 1          ok           ok          ok            ok #> 2          ok           ok          ok           OUT #> 3          ok           ok          ok            ok #> 4          ok           ok          ok           OUT #> 5          ok           ok          ok           OUT #> 6          ok           ok          ok           OUT #> 7          ok           ok          ok            ok #> 8          ok           ok          ok            ok #> 9          ok           ok          ok           OUT #> 10         ok           ok          ok            ok #> 11         ok           ok          ok           OUT #> 12         ok           ok          ok            ok #> 13         ok           ok          ok            ok #> 14         ok           ok          ok            ok #> 15         ok           ok          ok            ok #> 16         ok           ok          ok            ok #> 17         ok           ok          ok           OUT #> 18         ok           ok         LOW           OUT #> 19         ok           ok          ok            ok #> 20         ok           ok         LOW            ok #> 21         ok           ok         LOW            ok #> 22         ok           ok         LOW            ok #> 23         ok           ok          ok           OUT #> 24         ok           ok          ok           OUT #> 25         ok           ok          ok           OUT #> 26         ok           ok          ok           OUT #> 27         ok           ok          ok           OUT #> 28         ok           ok          ok           OUT #> 29         ok           ok          ok            ok #> 30         ok           ok          ok            ok #> 31         ok           ok          ok            ok #> 32         ok           ok          ok            ok #> 33         ok           ok          ok            ok #> 34         ok           ok          ok            ok #> 35         ok           ok          ok           OUT #> 36         ok           ok         LOW           OUT #> 37         ok           ok          ok            ok #> 38         ok           ok          ok            ok #> 39         ok           ok          ok            ok #> 40         ok           ok          ok            ok #> 41         ok           ok          ok           OUT #> 42         ok           ok          ok            ok #> 43         ok           ok          ok           OUT #> 44         ok           ok          ok            ok #> 45         ok           ok          ok            ok #> 46         ok           ok          ok            ok #> 47         ok           ok          ok            ok #> 48         ok           ok          ok            ok #> 49         ok           ok          ok            ok"},{"path":"https://bluefoxr.github.io/COINr/reference/get_stats.data.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Statistics of columns — get_stats.data.frame","title":"Statistics of columns — get_stats.data.frame","text":"Takes data frame returns table statistics entries column.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_stats.data.frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Statistics of columns — get_stats.data.frame","text":"","code":"# S3 method for data.frame get_stats(   x,   t_skew = 2,   t_kurt = 3.5,   t_avail = 0.65,   t_zero = 0.5,   t_unq = 0.5,   nsignif = 3,   ... )"},{"path":"https://bluefoxr.github.io/COINr/reference/get_stats.data.frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Statistics of columns — get_stats.data.frame","text":"x data frame numeric columns. t_skew Absolute skewness threshold. See details. t_kurt Kurtosis threshold. See details. t_avail Data availability threshold. See details. t_zero threshold 0 1 flagging indicators high proportion zeroes. See details. t_unq threshold 0 1 flagging indicators low proportion unique values. See details. nsignif Number significant figures round output table . ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_stats.data.frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Statistics of columns — get_stats.data.frame","text":"data frame statistics column","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_stats.data.frame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Statistics of columns — get_stats.data.frame","text":"statistics (columns output table) follows (entries correspond column): Min: minimum Max: maximum Mean: (arirthmetic) mean Median: median Std: standard deviation Skew: skew Kurt: kurtosis N.Avail: number non-NA values N.NonZero: number non-zero values N.Unique: number unique values Frc.Avail: fraction non-NA values Frc.NonZero: fraction non-zero values Frc.Unique: fraction unique values Flag.Avail: data availability flag - columns Frc.Avail < t_avail flagged \"LOW\", else \"ok\". Flag.NonZero: flag columns high proportion zeros. columns Frc.NonZero < t_zero flagged \"LOW\", otherwise \"ok\". Flag.Unique: unique value flag - columns Frc.Unique < t_unq flagged \"LOW\", otherwise \"ok\". Flag.SkewKurt: skew kurtosis flag indication possible outliers. columns abs(Skew) > t_skew Kurt > t_kurt flagged \"\", otherwise \"ok\". aim table, among things, check basic statistics column/indicator, identify possible issues indicator. example, low data availability, high proportion zeros /low proportion unique values. , combination skew kurtosis (.e. Flag.SkewKurt column) simple test possible outliers, may require treatment using Treat(). See also vignette(\"analysis\").","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_stats.data.frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Statistics of columns — get_stats.data.frame","text":"","code":"# stats of mtcars get_stats(mtcars) #>    iCode   Min    Max    Mean Median     Std   Skew   Kurt N.Avail N.NonZero #> 1    mpg 10.40  33.90  20.100  19.20   6.030  0.672 -0.022      32        32 #> 2    cyl  4.00   8.00   6.190   6.00   1.790 -0.192 -1.760      32        32 #> 3   disp 71.10 472.00 231.000 196.00 124.000  0.420 -1.070      32        32 #> 4     hp 52.00 335.00 147.000 123.00  68.600  0.799  0.275      32        32 #> 5   drat  2.76   4.93   3.600   3.70   0.535  0.293 -0.450      32        32 #> 6     wt  1.51   5.42   3.220   3.32   0.978  0.466  0.417      32        32 #> 7   qsec 14.50  22.90  17.800  17.70   1.790  0.406  0.865      32        32 #> 8     vs  0.00   1.00   0.438   0.00   0.504  0.265 -2.060      32        14 #> 9     am  0.00   1.00   0.406   0.00   0.499  0.401 -1.970      32        13 #> 10  gear  3.00   5.00   3.690   4.00   0.738  0.582 -0.895      32        32 #> 11  carb  1.00   8.00   2.810   2.00   1.620  1.160  2.020      32        32 #>    N.Unique N.Same Frc.Avail Frc.NonZero Frc.Unique Frc.Same Flag.Avail #> 1        25      2         1       1.000     0.7810   0.0625         ok #> 2         3     14         1       1.000     0.0938   0.4380         ok #> 3        27      3         1       1.000     0.8440   0.0938         ok #> 4        22      3         1       1.000     0.6880   0.0938         ok #> 5        22      3         1       1.000     0.6880   0.0938         ok #> 6        29      3         1       1.000     0.9060   0.0938         ok #> 7        30      2         1       1.000     0.9380   0.0625         ok #> 8         2     18         1       0.438     0.0625   0.5620         ok #> 9         2     19         1       0.406     0.0625   0.5940         ok #> 10        3     15         1       1.000     0.0938   0.4690         ok #> 11        6     10         1       1.000     0.1880   0.3120         ok #>    Flag.NonZero Flag.Unique Flag.SkewKurt #> 1            ok          ok            ok #> 2            ok         LOW            ok #> 3            ok          ok            ok #> 4            ok          ok            ok #> 5            ok          ok            ok #> 6            ok          ok            ok #> 7            ok          ok            ok #> 8           LOW         LOW            ok #> 9           LOW         LOW            ok #> 10           ok         LOW            ok #> 11           ok         LOW            ok"},{"path":"https://bluefoxr.github.io/COINr/reference/get_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Statistics of columns/indicators — get_stats","title":"Statistics of columns/indicators — get_stats","text":"Generic function reports various statistics data frame coin. See method documentation:","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Statistics of columns/indicators — get_stats","text":"","code":"get_stats(x, ...)"},{"path":"https://bluefoxr.github.io/COINr/reference/get_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Statistics of columns/indicators — get_stats","text":"x Object (data frame coin) ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Statistics of columns/indicators — get_stats","text":"data frame statistics column","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_stats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Statistics of columns/indicators — get_stats","text":"get_stats.data.frame() get_stats.coin() See also vignette(\"analysis\"). function replaces now-defunct getStats() COINr < v1.0.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Statistics of columns/indicators — get_stats","text":"","code":"# see individual method documentation"},{"path":"https://bluefoxr.github.io/COINr/reference/get_str_weak.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate strengths and weaknesses for a specified unit — get_str_weak","title":"Generate strengths and weaknesses for a specified unit — get_str_weak","text":"Generates table strengths weaknesses selected unit, based ranks, ranks within specified grouping variable.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_str_weak.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate strengths and weaknesses for a specified unit — get_str_weak","text":"","code":"get_str_weak(   coin,   dset,   usel = NULL,   topN = 5,   bottomN = 5,   withcodes = TRUE,   use_group = NULL,   unq_discard = NULL,   min_discard = TRUE,   report_level = NULL,   with_units = TRUE,   adjust_direction = NULL )"},{"path":"https://bluefoxr.github.io/COINr/reference/get_str_weak.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate strengths and weaknesses for a specified unit — get_str_weak","text":"coin coin dset data set extract indicator data , use strengths weaknesses. usel selected unit code topN top N indicators report bottomN bottom N indicators report withcodes TRUE (default), also includes column indicator codes. Setting FALSE may useful generating reports, codes helpful. use_group optional grouping variable use reporting -group ranks. Specifying report ranks selected unit within group use_group belongs. unq_discard Optional parameter handling discrete indicators. indicators may binary variables type \"yes = 1\", \"= 0\". may picked strengths weaknesses, may wanted highlighted, since e.g. maybe half units zero one. argument takes number 0 1 specifying unique value threshold ignoring indicators strengths. E.g. setting prc_unq_discard = 0.2 ensure indicators least 20% unique values highlighted strengths weaknesses. Set NULL disable (default). min_discard TRUE (default), discards strengths correspond minimum rank given indicator. See details. report_level Aggregation level report parent codes . example, setting report_level = 2 (default) add column strengths weaknesses tables reports aggregation group level 2, reported indicator belongs. with_units TRUE (default), includes indicator units output tables. adjust_direction TRUE, adjust directions indicators according \"Direction\" column IndMeta. default, TRUE dset = \"Raw\", FALSE otherwise.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_str_weak.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate strengths and weaknesses for a specified unit — get_str_weak","text":"list containing data frame .$Strengths, data frame .$Weaknesses. data frame columns indicator code, name, rank value (selected unit).","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_str_weak.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate strengths and weaknesses for a specified unit — get_str_weak","text":"currently works indicator level. Indicators NA values selected unit ignored. Strengths weaknesses mean topN-ranked indicators selected unit. Effectively, takes rank selected unit indicator, sorts ranks, takes top N highest lowest. function must used little care: indicators adjusted directions use, otherwise weakness might counted strength, vice versa. Use adjust_direction parameter help . useful parameter unq_discard, also filters indicators low number unique values, based specified threshold. Also min_discard filters indicators minimum rank. best way use function play around settings little bit. reason practice, indicators different distributions can sometimes lead unexpected outcomes. example indicator 50% zero values, rest non-zero (unique). Using sport ranking system, units zero values receive rank equal number units divided two. might counted \"strength\" units overall low scores. zero value can hardly called strength. min_discard function can help . Problems mainly arise e.g. generating large number country profiles. function replaces now-defunct getStrengthNWeak() COINr < v1.0.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_str_weak.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate strengths and weaknesses for a specified unit — get_str_weak","text":"","code":"# build example coin coin <- build_example_coin(up_to = \"new_coin\", quietly = TRUE)  # get strengths and weaknesses for ESP get_str_weak(coin, dset = \"Raw\", usel = \"ESP\") #> $Strengths #>        Code                                     Name    Pillar Rank Value #> 1 CostImpEx                    Cost to export/import    Instit    1   0.0 #> 2    TIRcon              Signatory of TIR Convention    Instit    1   1.0 #> 3   Tourist     Tourist arrivals at national borders       P2P    2  75.3 #> 4   Flights International flights passenger capacity  Physical    3 171.0 #> 5    UNVote                      UN voting alignment Political    3  43.1 #>               Unit #> 1      Current USD #> 2 (1 (yes)/0 (no)) #> 3 Number of people #> 4   Thousand seats #> 5            Score #>  #> $Weaknesses #>      Code                                                         Name   Pillar #> 1    NEET Proportion of youth not in education, employment or training SusEcFin #> 2    Lang                                       Common languages users      P2P #> 3  Forest                                              Net forest loss  Environ #> 4    TBTs                                  Technical barriers to trade   Instit #> 5 PubDebt                           Public debt as a percentage of GDP SusEcFin #>   Rank   Value                                     Unit #> 1   33   13.30                                  Percent #> 2   38    5.16                                    Score #> 3   40    6.93                                  Percent #> 4   40 1210.00 Number of measures (initiated, in force) #> 5   43   99.30                                  Percent #>"},{"path":"https://bluefoxr.github.io/COINr/reference/get_trends.html","id":null,"dir":"Reference","previous_headings":"","what":"Get time trends — get_trends","title":"Get time trends — get_trends","text":"Get time trends purse object. function extracts panel data set purse, calculates trends indicator/unit pair using specified function f_trend. example, f_trend = \"CAGR\", extracts time series indicator/unit pair passes CAGR().","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_trends.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get time trends — get_trends","text":"","code":"get_trends(   purse,   dset,   uCodes = NULL,   iCodes = NULL,   Time = NULL,   use_latest = NULL,   f_trend = \"CAGR\",   interp_at = NULL,   adjust_directions = FALSE )"},{"path":"https://bluefoxr.github.io/COINr/reference/get_trends.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get time trends — get_trends","text":"purse purse object dset Name data set extract, passed get_data.purse() uCodes Optional subset unit codes extract, passed get_data.purse() iCodes Optional subset indicator/aggregate codes extract, passed get_data.purse() Time Optional vector time points extract, passed get_data.purse() use_latest positive integer specifies use latest \"n\" data points. specified, overrides Time. e.g. use_latest = 5, use latest five observations, working backwards latest non-NA point. f_trend Function returns metric describing trend time series. See details. interp_at Option linearly interpolate missing data points time series. Must specified vector time values apply interpolation. interp_at = \"\", attempt interpolate every time point. Uses linear interpolation - note NAs outside range observed values estimated, .e. extrapolate beyond range data. See approx_df(). adjust_directions Logical: TRUE, trend metrics adjusted according indicator/aggregate directions input iMeta (.e. corresponding direction -1, metric multiplied -1).","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_trends.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get time trends — get_trends","text":"data frame long format, trend metrics indicator/unit pair, plus data availability statistics.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_trends.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get time trends — get_trends","text":"function requires purse object input. data set selected using get_data(), subset data set can analysed using uCodes, iCodes Time arguments. latter useful especially subset time series analysed. function f_trend function , given time series, returns trend metric. must follow specific format. must course available call, must arguments y x, respectively vector values vector indexing values time. See prc_change() CAGR() examples. function must return single value (vector multiple entries, list). function can return either numeric character values.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_trends.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get time trends — get_trends","text":"","code":"#"},{"path":"https://bluefoxr.github.io/COINr/reference/get_unit_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate unit summary table — get_unit_summary","title":"Generate unit summary table — get_unit_summary","text":"Generates summary table single unit. mostly useful unit reports.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_unit_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate unit summary table — get_unit_summary","text":"","code":"get_unit_summary(coin, usel, Levels, dset = \"Aggregated\", nround = 2)"},{"path":"https://bluefoxr.github.io/COINr/reference/get_unit_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate unit summary table — get_unit_summary","text":"coin coin usel selected unit code Levels aggregation levels display results . dset data set within coin extract scores ranks nround Number decimals round scores , default 2. Set NULL disable rounding.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_unit_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate unit summary table — get_unit_summary","text":"summary table data frame, containing scores ranks specified indicators/aggregates.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_unit_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate unit summary table — get_unit_summary","text":"returns scores ranks indicator/aggregate specified aglevs. orders table highest aggregation levels first. means index level included, first. function replaces now-defunct getUnitSummary() COINr < v1.0.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/get_unit_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate unit summary table — get_unit_summary","text":"","code":"# build full example coin coin <- build_example_coin(quietly = TRUE)  # summary of scores for IND at levels 4, 3 and 2 get_unit_summary(coin, usel = \"IND\", Levels = c(4,3,2), dset = \"Aggregated\") #>         Code                         Name Score Rank #> 1      Index     Sustainable Connectivity 39.79   45 #> 2       Conn                 Connectivity 28.60   44 #> 3       Sust               Sustainability 50.99   43 #> 4   Physical                     Physical 18.78   48 #> 5   ConEcFin Economic and Financial (Con)  6.38   49 #> 6  Political                    Political 51.90   33 #> 7     Instit                Institutional 59.84   37 #> 8        P2P             People to People  6.07   47 #> 9    Environ                Environmental 75.34    6 #> 10    Social                       Social 22.74   51 #> 11  SusEcFin Economic and Financial (Sus) 54.88   36"},{"path":"https://bluefoxr.github.io/COINr/reference/i_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute by mean — i_mean","title":"Impute by mean — i_mean","text":"Replaces NAs numeric vector mean non-NA values.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/i_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute by mean — i_mean","text":"","code":"i_mean(x)"},{"path":"https://bluefoxr.github.io/COINr/reference/i_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute by mean — i_mean","text":"x numeric vector","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/i_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute by mean — i_mean","text":"numeric vector","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/i_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute by mean — i_mean","text":"","code":"x <- c(1,2,3,4, NA) i_mean(x) #> [1] 1.0 2.0 3.0 4.0 2.5"},{"path":"https://bluefoxr.github.io/COINr/reference/i_mean_grp.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute by group mean — i_mean_grp","title":"Impute by group mean — i_mean_grp","text":"Replaces NAs numeric vector grouped arithmetic means non-NA values. Groups defined f argument.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/i_mean_grp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute by group mean — i_mean_grp","text":"","code":"i_mean_grp(x, f, skip_f_na = TRUE)"},{"path":"https://bluefoxr.github.io/COINr/reference/i_mean_grp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute by group mean — i_mean_grp","text":"x numeric vector f grouping variable, length x, specifies group value x belongs . coerced factor. skip_f_na TRUE, work around NAs f (corresponding values x excluded imputation returned unaltered). Else FALSE, cause error.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/i_mean_grp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute by group mean — i_mean_grp","text":"numeric vector","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/i_mean_grp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute by group mean — i_mean_grp","text":"","code":"x <- c(NA, runif(10), NA) f <- c(rep(\"a\", 6), rep(\"b\", 6)) i_mean_grp(x, f) #>  [1] 0.4564603 0.1497639 0.1511259 0.6441252 0.6677410 0.6695454 0.2101826 #>  [8] 0.1899729 0.4772996 0.7766469 0.7732800 0.4854764"},{"path":"https://bluefoxr.github.io/COINr/reference/i_median.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute by median — i_median","title":"Impute by median — i_median","text":"Replaces NAs numeric vector median non-NA values.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/i_median.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute by median — i_median","text":"","code":"i_median(x)"},{"path":"https://bluefoxr.github.io/COINr/reference/i_median.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute by median — i_median","text":"x numeric vector","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/i_median.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute by median — i_median","text":"numeric vector","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/i_median.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute by median — i_median","text":"","code":"x <- c(1,2,3,4, NA) i_median(x) #> [1] 1.0 2.0 3.0 4.0 2.5"},{"path":"https://bluefoxr.github.io/COINr/reference/i_median_grp.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute by group median — i_median_grp","title":"Impute by group median — i_median_grp","text":"Replaces NAs numeric vector grouped medians non-NA values. Groups defined f argument.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/i_median_grp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute by group median — i_median_grp","text":"","code":"i_median_grp(x, f)"},{"path":"https://bluefoxr.github.io/COINr/reference/i_median_grp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute by group median — i_median_grp","text":"x numeric vector f grouping variable, length x, specifies group value x belongs . coerced factor.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/i_median_grp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute by group median — i_median_grp","text":"numeric vector","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/i_median_grp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute by group median — i_median_grp","text":"","code":"x <- c(NA, runif(10), NA) f <- c(rep(\"a\", 6), rep(\"b\", 6)) i_median_grp(x, f) #>  [1] 0.52659494 0.52562715 0.97964470 0.98923273 0.52659494 0.09680426 #>  [7] 0.56856717 0.14015188 0.59003401 0.93166719 0.19964817 0.56856717"},{"path":"https://bluefoxr.github.io/COINr/reference/icodes_to_inames.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert iCodes to iNames — icodes_to_inames","title":"Convert iCodes to iNames — icodes_to_inames","text":"Convert iCodes iNames","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/icodes_to_inames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert iCodes to iNames — icodes_to_inames","text":"","code":"icodes_to_inames(coin, iCodes)"},{"path":"https://bluefoxr.github.io/COINr/reference/icodes_to_inames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert iCodes to iNames — icodes_to_inames","text":"coin coin iCodes vector iCodes","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/icodes_to_inames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert iCodes to iNames — icodes_to_inames","text":"Vector iNames","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/import_COIN_tool.html","id":null,"dir":"Reference","previous_headings":"","what":"Import data directly from COIN Tool — import_coin_tool","title":"Import data directly from COIN Tool — import_coin_tool","text":"COIN Tool Excel-based tool building composite indicators. function provides direct interface reading COIN Tool input deck converting COINr. need provide COIN Tool file, \"Database\" sheet properly compiled.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/import_COIN_tool.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import data directly from COIN Tool — import_coin_tool","text":"","code":"import_coin_tool(fname, makecodes = FALSE, oldtool = FALSE, out2 = \"list\")"},{"path":"https://bluefoxr.github.io/COINr/reference/import_COIN_tool.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import data directly from COIN Tool — import_coin_tool","text":"fname file name path read, e.g. \"C:/Documents/COINToolFile.xlsx\". makecodes Logical: TRUE, generate short indicator codes based indicator names, otherwise FALSE, use COIN Tool indicator codes \"Ind.01\", etc. Currently indicators, aggregation groups. oldtool Logical: TRUE, compatible old COIN Tool (pre-release, early 2019 earlier). minor differences elements found. out2 Either \"list\" (default) output list iData iMeta entries (input new_coin()), else \"coin\" output coin.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/import_COIN_tool.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import data directly from COIN Tool — import_coin_tool","text":"Either list coin, depending out2","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/import_COIN_tool.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import data directly from COIN Tool — import_coin_tool","text":"function replaces now-defunct COINToolIn() COINr < v1.0.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/import_COIN_tool.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import data directly from COIN Tool — import_coin_tool","text":"","code":"if (FALSE) { ## This example downloads a COIN Tool spreadsheet containing example data, ## saves it to a temporary directory, unzips, and reads into R. Finally it ## assembles it into a COIN.  # Make temp zip filename in temporary directory tmpz <- tempfile(fileext = \".zip\") # Download an example COIN Tool file to temporary directory # NOTE: the download.file() command may need its \"method\" option set to a # specific value depending on the platform you run this on. You can also # choose to download/unzip this file manually. download.file(\"https://knowledge4policy.ec.europa.eu/sites/default/ files/coin_tool_v1_lite_exampledata.zip\", tmpz) # Unzip CTpath <- unzip(tmpz, exdir = tempdir()) # Read COIN Tool into R l <- import_coin_tool(CTpath, makecodes = TRUE) }"},{"path":"https://bluefoxr.github.io/COINr/reference/impute_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute panel data — impute_panel","title":"Impute panel data — impute_panel","text":"Given data frame panel data, time-index column time_col unit ID column unit_col, imputes columns using entry latest available time point.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/impute_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute panel data — impute_panel","text":"","code":"impute_panel(   iData,   time_col = NULL,   unit_col = NULL,   cols = NULL,   max_time = NULL )"},{"path":"https://bluefoxr.github.io/COINr/reference/impute_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute panel data — impute_panel","text":"iData data frame indicator data, containing time index column time_col, unit code column unit_col, numerical columns imputed. time_col name column found iData used time index column. Must point numeric column. unit_col name column found iData used unit code/ID column. Must point character column. cols Optionally, character vector names columns impute. NULL (default), columns apart time_col unit_col imputed possible. max_time maximum number time points look backwards impute . E.g. max_time = 1, NA found time \\(t\\), look replacement value \\(t-1\\) time points . default, searches time points available.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/impute_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute panel data — impute_panel","text":"list containing: .$iData_imp: iData format data frame missing data imputed using previous time points (possible). .$DataT: data frame format iData, entry shows time point data point came .","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/impute_panel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Impute panel data — impute_panel","text":"presumes multiple observations unit code, .e. one per time point. searches missing values target year, replaces equivalent points previous time points. replace using recently available point.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/impute_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute panel data — impute_panel","text":"","code":"# Copy example panel data iData_p <- ASEM_iData_p  # we introduce two NAs: one for NZ in 2022 in LPI indicator iData_p$LPI[iData_p$uCode == \"NZ\" & iData_p$Time == 2022] <-  NA # one for AT, also in 2022, but for Flights indicator iData_p$Flights[iData_p$uCode == \"AT\" & iData_p$Time == 2022] <- NA  # impute: target only the two columns where NAs introduced l_imp <- impute_panel(iData_p, cols = c(\"LPI\", \"Flights\")) # get imputed df iData_imp <- l_imp$iData_imp  # check the output is what we expect: both NAs introduced should now have 2021 values iData_imp$LPI[iData_imp$uCode == \"NZ\" & iData_imp$Time == 2022] ==   ASEM_iData_p$LPI[ASEM_iData_p$uCode == \"NZ\" & ASEM_iData_p$Time == 2021] #> logical(0)  iData_imp$Flights[iData_imp$uCode == \"AT\" & iData_imp$Time == 2022] ==   ASEM_iData_p$Flights[ASEM_iData_p$uCode == \"AT\" & ASEM_iData_p$Time == 2021] #> logical(0)"},{"path":"https://bluefoxr.github.io/COINr/reference/is.coin.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if object is coin class — is.coin","title":"Check if object is coin class — is.coin","text":"Check object coin class","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/is.coin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if object is coin class — is.coin","text":"","code":"is.coin(x)"},{"path":"https://bluefoxr.github.io/COINr/reference/is.coin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if object is coin class — is.coin","text":"x object checked.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/is.coin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if object is coin class — is.coin","text":"Logical","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/is.purse.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if object is purse class — is.purse","title":"Check if object is purse class — is.purse","text":"Check object purse class","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/is.purse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if object is purse class — is.purse","text":"","code":"is.purse(x)"},{"path":"https://bluefoxr.github.io/COINr/reference/is.purse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if object is purse class — is.purse","text":"x object checked.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/is.purse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if object is purse class — is.purse","text":"Logical","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/kurt.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate kurtosis — kurt","title":"Calculate kurtosis — kurt","text":"Calculates kurtosis values numeric vector. uses definition kurtosis \"kurtosis()\" function e1071 package, type == 2, equivalent definition kurtosis used Excel.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/kurt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate kurtosis — kurt","text":"","code":"kurt(x, na.rm = FALSE)"},{"path":"https://bluefoxr.github.io/COINr/reference/kurt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate kurtosis — kurt","text":"x numeric vector. na.rm Set TRUE remove NA values, otherwise returns NA.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/kurt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate kurtosis — kurt","text":"kurtosis value (scalar).","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/kurt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate kurtosis — kurt","text":"","code":"x <- runif(20) kurt(x) #> [1] -1.488466"},{"path":"https://bluefoxr.github.io/COINr/reference/log_CT.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-transform a vector — log_CT","title":"Log-transform a vector — log_CT","text":"Performs log transform numeric vector.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/log_CT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-transform a vector — log_CT","text":"","code":"log_CT(x, na.rm = FALSE)"},{"path":"https://bluefoxr.github.io/COINr/reference/log_CT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-transform a vector — log_CT","text":"x numeric vector. na.rm Set TRUE remove NA values, otherwise returns NA.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/log_CT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log-transform a vector — log_CT","text":"log-transformed vector data, treatment details wrapped list.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/log_CT.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Log-transform a vector — log_CT","text":"Specifically, performs modified \"COIN Tool log\" transform: log(x-min(x) + ), <- 0.01*(max(x)-min(x)).","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/log_CT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log-transform a vector — log_CT","text":"","code":"x <- runif(20) log_CT(x) #> $x #>  [1] -0.6681907 -0.1184511 -0.4325236 -4.7335717 -1.5590959 -0.4148121 #>  [7] -0.1699390 -1.2475760 -2.4914565 -0.1374938 -3.3558296 -0.3627144 #> [13] -0.5260884 -0.3740855 -0.8693052 -1.0538399 -3.1902726 -0.1204197 #> [19] -0.8079876 -0.9659410 #>  #> $treated #>  [1] \"log_CT\" \"log_CT\" \"log_CT\" \"log_CT\" \"log_CT\" \"log_CT\" \"log_CT\" \"log_CT\" #>  [9] \"log_CT\" \"log_CT\" \"log_CT\" \"log_CT\" \"log_CT\" \"log_CT\" \"log_CT\" \"log_CT\" #> [17] \"log_CT\" \"log_CT\" \"log_CT\" \"log_CT\" #>"},{"path":"https://bluefoxr.github.io/COINr/reference/log_CT_orig.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-transform a vector — log_CT_orig","title":"Log-transform a vector — log_CT_orig","text":"Performs log transform numeric vector.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/log_CT_orig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-transform a vector — log_CT_orig","text":"","code":"log_CT_orig(x, na.rm = FALSE)"},{"path":"https://bluefoxr.github.io/COINr/reference/log_CT_orig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-transform a vector — log_CT_orig","text":"x numeric vector. na.rm Set TRUE remove NA values, otherwise returns NA.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/log_CT_orig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log-transform a vector — log_CT_orig","text":"log-transformed vector data, treatment details wrapped list.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/log_CT_orig.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Log-transform a vector — log_CT_orig","text":"Specifically, performs \"COIN Tool log\" transform: log(x-min(x) + 1).","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/log_CT_orig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log-transform a vector — log_CT_orig","text":"","code":"x <- runif(20) log_CT_orig(x) #> $x #>  [1] 0.26106880 0.13377197 0.04872626 0.56382726 0.41675020 0.61501995 #>  [7] 0.60405120 0.61016402 0.57866577 0.26823977 0.63328451 0.50755923 #> [13] 0.49378267 0.02664096 0.12658061 0.38604158 0.27812172 0.00000000 #> [19] 0.49880842 0.57556918 #>  #> $treated #>  [1] \"log_CT_orig\" \"log_CT_orig\" \"log_CT_orig\" \"log_CT_orig\" \"log_CT_orig\" #>  [6] \"log_CT_orig\" \"log_CT_orig\" \"log_CT_orig\" \"log_CT_orig\" \"log_CT_orig\" #> [11] \"log_CT_orig\" \"log_CT_orig\" \"log_CT_orig\" \"log_CT_orig\" \"log_CT_orig\" #> [16] \"log_CT_orig\" \"log_CT_orig\" \"log_CT_orig\" \"log_CT_orig\" \"log_CT_orig\" #>"},{"path":"https://bluefoxr.github.io/COINr/reference/log_CT_plus.html","id":null,"dir":"Reference","previous_headings":"","what":"Log transform a vector (skew corrected) — log_CT_plus","title":"Log transform a vector (skew corrected) — log_CT_plus","text":"Performs log transform numeric vector, consideration direction skew. aim reduce absolute value skew, regardless direction.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/log_CT_plus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log transform a vector (skew corrected) — log_CT_plus","text":"","code":"log_CT_plus(x, na.rm = FALSE)"},{"path":"https://bluefoxr.github.io/COINr/reference/log_CT_plus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log transform a vector (skew corrected) — log_CT_plus","text":"x numeric vector na.rm Set TRUE remove NA values, otherwise returns NA.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/log_CT_plus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log transform a vector (skew corrected) — log_CT_plus","text":"log-transformed vector data, treatment details wrapped list.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/log_CT_plus.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Log transform a vector (skew corrected) — log_CT_plus","text":"Specifically: skew x positive, performs modified \"COIN Tool log\" transform: log(x-min(x) + ), <- 0.01*(max(x)-min(x)). skew x negative, performs equivalent transformation -log(xmax + - x).","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/log_CT_plus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log transform a vector (skew corrected) — log_CT_plus","text":"","code":"x <- runif(20) log_CT(x) #> $x #>  [1] -2.33322431 -1.10205672 -2.11657261 -0.05067424 -2.09356526 -0.69439126 #>  [7] -0.61638357 -0.12902507 -0.52536746 -0.82439783 -1.58766094 -2.49398977 #> [13] -0.91471655 -0.30103037 -0.10457294 -1.16292732 -1.35864733 -1.14340081 #> [19] -1.37426862 -4.66579476 #>  #> $treated #>  [1] \"log_CT\" \"log_CT\" \"log_CT\" \"log_CT\" \"log_CT\" \"log_CT\" \"log_CT\" \"log_CT\" #>  [9] \"log_CT\" \"log_CT\" \"log_CT\" \"log_CT\" \"log_CT\" \"log_CT\" \"log_CT\" \"log_CT\" #> [17] \"log_CT\" \"log_CT\" \"log_CT\" \"log_CT\" #>"},{"path":"https://bluefoxr.github.io/COINr/reference/log_GII.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-transform a vector — log_GII","title":"Log-transform a vector — log_GII","text":"Performs log transform numeric vector. function currently recommended - see comments .","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/log_GII.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-transform a vector — log_GII","text":"","code":"log_GII(x, na.rm = FALSE)"},{"path":"https://bluefoxr.github.io/COINr/reference/log_GII.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-transform a vector — log_GII","text":"x numeric vector. na.rm Set TRUE remove NA values, otherwise returns NA.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/log_GII.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log-transform a vector — log_GII","text":"log-transformed vector data.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/log_GII.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Log-transform a vector — log_GII","text":"Specifically, performs \"GII log\" transform, encoded GII2020 spreadsheet. Note transformation currently recommended seems quite volatile can flip direction indicator. maximum value indicator less one, reverses direction.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/log_GII.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log-transform a vector — log_GII","text":"","code":"x <- runif(20) log_GII(x) #> $x #>  [1] 0.91046969 0.14909131 0.53485780 0.34260067 0.70459850 0.53606807 #>  [7] 0.93217485 0.94375907 0.80970037 0.56567287 0.69001231 0.41359769 #> [13] 0.40231717 0.01197623 0.23306886 0.21793723 0.80899358 0.54132597 #> [19] 0.22344710 0.33578517 #>  #> $treated #>  [1] \"log_GII\" \"log_GII\" \"log_GII\" \"log_GII\" \"log_GII\" \"log_GII\" \"log_GII\" #>  [8] \"log_GII\" \"log_GII\" \"log_GII\" \"log_GII\" \"log_GII\" \"log_GII\" \"log_GII\" #> [15] \"log_GII\" \"log_GII\" \"log_GII\" \"log_GII\" \"log_GII\" \"log_GII\" #>"},{"path":"https://bluefoxr.github.io/COINr/reference/n_borda.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalise using Borda scores — n_borda","title":"Normalise using Borda scores — n_borda","text":"Calculates Borda scores rank(x) - 1.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_borda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalise using Borda scores — n_borda","text":"","code":"n_borda(x, ties.method = \"min\")"},{"path":"https://bluefoxr.github.io/COINr/reference/n_borda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalise using Borda scores — n_borda","text":"x numeric vector ties.method argument passed base::rank() - see details.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_borda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalise using Borda scores — n_borda","text":"Numeric vector","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_borda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalise using Borda scores — n_borda","text":"","code":"x <- runif(20) n_borda(x) #>  [1] 13 14  5 10 11 19 17 16 12  4  7  8  9  3 18  2  0  6 15  1"},{"path":"https://bluefoxr.github.io/COINr/reference/n_dist2max.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalise as distance to maximum value — n_dist2max","title":"Normalise as distance to maximum value — n_dist2max","text":"measure distance maximum value, maximum value highest-scoring value. formula used :","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_dist2max.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalise as distance to maximum value — n_dist2max","text":"","code":"n_dist2max(x)"},{"path":"https://bluefoxr.github.io/COINr/reference/n_dist2max.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalise as distance to maximum value — n_dist2max","text":"x numeric vector","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_dist2max.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalise as distance to maximum value — n_dist2max","text":"Numeric vector","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_dist2max.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normalise as distance to maximum value — n_dist2max","text":"$$ 1 - (x_{max} - x)/(x_{max} - x_{min}) $$ means closer value maximum, higher score . Scores range 0 1.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_dist2max.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalise as distance to maximum value — n_dist2max","text":"","code":"x <- runif(20) n_dist2max(x) #>  [1] 0.00000000 0.29614326 0.38625088 0.86992765 0.16770452 0.49225948 #>  [7] 0.37314663 0.18037182 1.00000000 0.01529551 0.97864163 0.77294056 #> [13] 0.49070972 0.38631307 0.09333637 0.34905571 0.78214635 0.63651794 #> [19] 0.79081408 0.80977681"},{"path":"https://bluefoxr.github.io/COINr/reference/n_dist2ref.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalise as distance to reference value — n_dist2ref","title":"Normalise as distance to reference value — n_dist2ref","text":"measure distance specific value found x, specified iref. formula :","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_dist2ref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalise as distance to reference value — n_dist2ref","text":"","code":"n_dist2ref(x, iref, cap_max = FALSE)"},{"path":"https://bluefoxr.github.io/COINr/reference/n_dist2ref.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalise as distance to reference value — n_dist2ref","text":"x numeric vector iref integer indexes x specify reference value. reference value x[iref]. cap_max TRUE, value x exceeds x[iref] assigned score 1, otherwise score greater 1.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_dist2ref.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalise as distance to reference value — n_dist2ref","text":"Numeric vector","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_dist2ref.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normalise as distance to reference value — n_dist2ref","text":"$$ 1 - (x_{ref} - x)/(x_{ref} - x_{min}) $$ Values exceeding x_ref can optionally capped 1 cap_max = TRUE.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_dist2ref.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalise as distance to reference value — n_dist2ref","text":"","code":"x <- runif(20) n_dist2ref(x, 5) #>  [1] 0.27841584 2.42241487 3.81885237 3.56913552 1.00000000 2.17113635 #>  [7] 1.10393114 0.04832999 0.52985615 1.37422701 2.66312582 1.90842788 #> [13] 0.38014453 5.24113261 0.04198017 3.31997734 0.00000000 0.70332643 #> [19] 2.76743487 2.85026090"},{"path":"https://bluefoxr.github.io/COINr/reference/n_dist2targ.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalise as distance to target — n_dist2targ","title":"Normalise as distance to target — n_dist2targ","text":"measure distance value x specified target can high low target depending direction. See details .","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_dist2targ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalise as distance to target — n_dist2targ","text":"","code":"n_dist2targ(x, targ, direction = 1, cap_max = FALSE)"},{"path":"https://bluefoxr.github.io/COINr/reference/n_dist2targ.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalise as distance to target — n_dist2targ","text":"x numeric vector targ target value direction Either 1 (default) -1. former case, indicator assumed \"positive\" target higher end range. latter, indicator \"negative\" target typically low end range. cap_max TRUE, value x exceeds targ assigned score 1, otherwise score greater 1.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_dist2targ.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalise as distance to target — n_dist2targ","text":"Numeric vector","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_dist2targ.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normalise as distance to target — n_dist2targ","text":"direction = 1, formula : $$ \\frac{x - x_{min}}{x_{targ} - x_{min}} $$ else direction = -1: $$ \\frac{x_{max} - x}{x_{max} - x_{targ}} $$ Values surpassing x_targ either case can optionally capped 1 cap_max = TRUE.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_dist2targ.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalise as distance to target — n_dist2targ","text":"","code":"x <- runif(20) n_dist2targ(x, 0.8, cap_max = TRUE) #>  [1] 1.00000000 0.74879057 0.25307822 0.77315357 0.34568274 0.82982648 #>  [7] 0.94903502 0.36775076 0.71309979 0.11968551 1.00000000 0.79871352 #> [13] 0.52660878 0.67532767 0.43462806 0.08749205 1.00000000 0.00000000 #> [19] 0.54956375 0.32225213"},{"path":"https://bluefoxr.github.io/COINr/reference/n_fracmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalise as fraction of max value — n_fracmax","title":"Normalise as fraction of max value — n_fracmax","text":"ratio value x max(x).","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_fracmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalise as fraction of max value — n_fracmax","text":"","code":"n_fracmax(x)"},{"path":"https://bluefoxr.github.io/COINr/reference/n_fracmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalise as fraction of max value — n_fracmax","text":"x numeric vector","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_fracmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalise as fraction of max value — n_fracmax","text":"Numeric vector","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_fracmax.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normalise as fraction of max value — n_fracmax","text":"$$ x / x_{max} $$","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_fracmax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalise as fraction of max value — n_fracmax","text":"","code":"x <- runif(20) n_fracmax(x) #>  [1] 0.09984128 0.49843601 0.78661835 0.30029104 0.56632329 0.80909147 #>  [7] 0.71026144 0.89335584 0.74599727 0.07794426 1.00000000 0.44003248 #> [13] 0.95707559 0.19692764 0.48659092 0.27753959 0.68561449 0.26421969 #> [19] 0.82413666 0.97875220"},{"path":"https://bluefoxr.github.io/COINr/reference/n_goalposts.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalise using goalpost method — n_goalposts","title":"Normalise using goalpost method — n_goalposts","text":"distance value x lower \"goalpost\" upper one. Goalposts specified gposts = c(l, u, ), l lower bound, u upper bound, scaling parameter.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_goalposts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalise using goalpost method — n_goalposts","text":"","code":"n_goalposts(x, gposts, direction = 1, trunc2posts = TRUE)"},{"path":"https://bluefoxr.github.io/COINr/reference/n_goalposts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalise using goalpost method — n_goalposts","text":"x numeric vector gposts numeric vector c(l, u, ), l lower bound, u upper bound, scaling parameter. direction Either 1 -1. Set -1 flip goalposts. trunc2posts TRUE (default) truncate values fall outside goalposts.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_goalposts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalise using goalpost method — n_goalposts","text":"Numeric vector","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_goalposts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normalise using goalpost method — n_goalposts","text":"Specify direction = -1 \"flip\" goalposts. may necessary depending goalposts defined.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_goalposts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalise using goalpost method — n_goalposts","text":"","code":"x <- runif(20) n_goalposts(x, gposts = c(0.2, 0.8, 1)) #>  [1] 0.76298886 0.92139200 0.48219393 0.00000000 1.00000000 0.54577846 #>  [7] 0.95306119 0.00000000 0.21259513 0.36130688 0.05102127 0.00000000 #> [13] 0.00000000 0.45518383 0.00000000 0.57359181 0.90803366 0.61173242 #> [19] 0.26797898 0.14103319"},{"path":"https://bluefoxr.github.io/COINr/reference/n_minmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Minmax a vector — n_minmax","title":"Minmax a vector — n_minmax","text":"Scales vector using min-max method.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_minmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minmax a vector — n_minmax","text":"","code":"n_minmax(x, l_u = c(0, 100))"},{"path":"https://bluefoxr.github.io/COINr/reference/n_minmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minmax a vector — n_minmax","text":"x numeric vector l_u vector c(l, u), l lower bound u upper bound. x scaled exactly onto interval.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_minmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minmax a vector — n_minmax","text":"Normalised vector","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_minmax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Minmax a vector — n_minmax","text":"","code":"x <- runif(20) n_minmax(x) #>  [1]  60.042225  98.415556  15.673871  90.052049  59.448373  14.894315 #>  [7]   0.000000  36.459429   1.343748  15.697439 100.000000  70.352285 #> [13]   4.859091  65.817457  35.175096  97.496475  10.971742  68.074050 #> [19]  29.144718  14.836815"},{"path":"https://bluefoxr.github.io/COINr/reference/n_prank.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalise using percentile ranks — n_prank","title":"Normalise using percentile ranks — n_prank","text":"Calculates percentile ranks numeric vector using \"sport\" ranking. Ranks calculated base::rank() converted percentile ranks. ties.method can changed - directly passed base::rank().","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_prank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalise using percentile ranks — n_prank","text":"","code":"n_prank(x, ties.method = \"min\")"},{"path":"https://bluefoxr.github.io/COINr/reference/n_prank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalise using percentile ranks — n_prank","text":"x numeric vector ties.method argument passed base::rank() - see details.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_prank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalise using percentile ranks — n_prank","text":"Numeric vector","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_prank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalise using percentile ranks — n_prank","text":"","code":"x <- runif(20) n_prank(x) #>  [1] 0.47368421 0.63157895 0.94736842 0.31578947 0.89473684 0.00000000 #>  [7] 0.52631579 0.73684211 0.15789474 0.78947368 0.57894737 1.00000000 #> [13] 0.05263158 0.10526316 0.42105263 0.68421053 0.84210526 0.26315789 #> [19] 0.21052632 0.36842105"},{"path":"https://bluefoxr.github.io/COINr/reference/n_rank.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalise using ranks — n_rank","title":"Normalise using ranks — n_rank","text":"simply wrapper base::rank(). Higher scores give higher ranks.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_rank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalise using ranks — n_rank","text":"","code":"n_rank(x, ties.method = \"min\")"},{"path":"https://bluefoxr.github.io/COINr/reference/n_rank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalise using ranks — n_rank","text":"x numeric vector ties.method argument passed base::rank() - see details.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_rank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalise using ranks — n_rank","text":"Numeric vector","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_rank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalise using ranks — n_rank","text":"","code":"x <- runif(20) n_rank(x) #>  [1]  5 11 15 18 10 19 13  4 17  6  9  7  2 20 14  1  3 16 12  8"},{"path":"https://bluefoxr.github.io/COINr/reference/n_scaled.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale a vector — n_scaled","title":"Scale a vector — n_scaled","text":"Scales vector normalisation using method applied GII2020 indicators. x_scaled <- (x-l)/(u-l) * 100. Note minmax transformation (see n_minmax()). linear transformation shift u scaling factor u-l.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_scaled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale a vector — n_scaled","text":"","code":"n_scaled(x, npara = c(0, 100))"},{"path":"https://bluefoxr.github.io/COINr/reference/n_scaled.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale a vector — n_scaled","text":"x numeric vector npara Parameters vector c(l, u). See description.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_scaled.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale a vector — n_scaled","text":"Scaled vector","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_scaled.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scale a vector — n_scaled","text":"","code":"x <- runif(20) n_scaled(x, npara = c(1,10)) #>  [1] -2.812936 -5.678007 -5.799516 -1.923987 -4.807270 -0.234024 -1.280476 #>  [8] -5.942219 -2.259781 -3.616938 -1.075691 -5.078862 -9.998687 -2.396153 #> [15] -9.169559 -4.093493 -3.962985 -9.369637 -5.601245 -7.062526"},{"path":"https://bluefoxr.github.io/COINr/reference/n_zscore.html","id":null,"dir":"Reference","previous_headings":"","what":"Z-score a vector — n_zscore","title":"Z-score a vector — n_zscore","text":"Standardises vector x scaling mean standard deviation specified m_sd.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_zscore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Z-score a vector — n_zscore","text":"","code":"n_zscore(x, m_sd = c(0, 1))"},{"path":"https://bluefoxr.github.io/COINr/reference/n_zscore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Z-score a vector — n_zscore","text":"x numeric vector m_sd vector c(m, sd), m desired mean sd target standard deviation.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_zscore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Z-score a vector — n_zscore","text":"Numeric vector","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/n_zscore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Z-score a vector — n_zscore","text":"","code":"x <- runif(20) n_zscore(x) #>  [1] -0.71528894 -0.36267770  1.24935035 -1.00205795 -0.04833463  0.92720139 #>  [7]  1.29845629  1.65875215 -1.05090987 -0.83855147  0.42469840 -0.06553602 #> [13] -0.85233001 -0.80248528 -1.36978425  0.11052067  1.15352241 -1.51367578 #> [19]  0.87877544  0.92035478"},{"path":"https://bluefoxr.github.io/COINr/reference/names_to_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate short codes from long names — names_to_codes","title":"Generate short codes from long names — names_to_codes","text":"Given character vector long names (probably spaces), generates short codes. Intended use importing COIN Tool.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/names_to_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate short codes from long names — names_to_codes","text":"","code":"names_to_codes(cvec, maxword = 2, maxlet = 4)"},{"path":"https://bluefoxr.github.io/COINr/reference/names_to_codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate short codes from long names — names_to_codes","text":"cvec character vector names maxword maximum number words use building short name (default 2) maxlet number letters take word (default 4)","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/names_to_codes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate short codes from long names — names_to_codes","text":"corresponding character vector, short codes, duplicates.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/names_to_codes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate short codes from long names — names_to_codes","text":"function replaces now-defunct names2Codes() COINr < v1.0.","code":""},{"path":[]},{"path":"https://bluefoxr.github.io/COINr/reference/names_to_codes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate short codes from long names — names_to_codes","text":"","code":"# get names from example data iNames <- ASEM_iMeta$iName  # convert to codes names_to_codes(iNames) #>  [1] \"LogiPerf\"   \"InteFlig\"   \"LineShip\"   \"BordCros\"   \"TradElec\"   #>  [6] \"TradGas\"    \"AverConn\"   \"PopuCove\"   \"TradGood\"   \"TradServ\"   #> [11] \"ForeDire\"   \"PersRemi\"   \"ForePort\"   \"EmbaNetw\"   \"PartInte\"   #> [16] \"VotiAlig\"   \"CostExpo\"   \"MeanTari\"   \"TechBarr\"   \"SignConv\"   #> [21] \"RegiTrad\"   \"VisaVisa\"   \"InteStud\"   \"ReseOutp\"   \"PateWith\"   #> [26] \"TradCult\"   \"TradCult_1\" \"TourArri\"   \"MigrStoc\"   \"CommLang\"   #> [31] \"ReneEner\"   \"PrimEner\"   \"EmisCapi\"   \"DomeMate\"   \"ForeLoss\"   #> [36] \"PopuLivi\"   \"PalmInde\"   \"TertGrad\"   \"FreePres\"   \"ToleMino\"   #> [41] \"PresInte\"   \"CorrPerc\"   \"FemaLabo\"   \"WomeNati\"   \"PublDebt\"   #> [46] \"PrivDebt\"   \"CapiGrow\"   \"R&ExPerc\"   \"PropYout\"   \"Phys\"       #> [51] \"EconFina\"   \"Poli\"       \"Inst\"       \"PeopPeop\"   \"Envi\"       #> [56] \"Soci\"       \"EconFina_1\" \"Conn\"       \"Sust\"       \"SustConn\"   #> [61] \"Grou\"       \"CapiGrou\"   \"PopuGrou\"   \"EuroAsia\"   \"LandArea\"   #> [66] \"EnerCons\"   \"GDP\"        \"Popu\""},{"path":"https://bluefoxr.github.io/COINr/reference/new_coin.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new coin — new_coin","title":"Create a new coin — new_coin","text":"Creates new \"coin\" class object, \"purse\" class object (time-indexed collection coins). purse class object created panel data supplied. Coins purses main object classes used COINr, although number functions also support classes data frames vectors.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/new_coin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new coin — new_coin","text":"","code":"new_coin(   iData,   iMeta,   exclude = NULL,   split_to = NULL,   level_names = NULL,   quietly = FALSE )"},{"path":"https://bluefoxr.github.io/COINr/reference/new_coin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new coin — new_coin","text":"iData indicator data metadata unit iMeta Indicator metadata exclude Optional character vector indicator codes (iCodes) exclude coin(s). split_to used split panel data multiple coins, -called \"purse\". either \"\", subset entries iData$Time. See Details. level_names Optional character vector names levels. Must length equal number levels hierarchy (max(iMeta$Level, na.rm = TRUE)). quietly TRUE, suppresses messages","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/new_coin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new coin — new_coin","text":"\"coin\" object \"purse\" object.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/new_coin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a new coin — new_coin","text":"coin object fundamentally created passing two data frames new_coin(): iData specifies data points unit indicator, well optional variables; iMeta specifies details indicator/variable found iData, including type, name, position index, units, properties. data frames need follow fairly strict requirements regarding format consistency. Run check_iData() check_iMeta() validate data frames, generate helpful error messages things go wrong. worth reading little coins purses use COINr. See vignette(\"coins\") details.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/new_coin.html","id":"idata","dir":"Reference","previous_headings":"","what":"iData","title":"Create a new coin — new_coin","text":"iData data frame required column uCode gives code assigned unit (alphanumeric, starting number). columns defined corresponding entries iMeta, following special exceptions: Time optional column allows panel data input, consisting e.g. multiple rows uCode: one Time value. can used split set panel data multiple coins (-called \"purse\") can input COINr functions. uName optional column specifies longer name unit. column included, unit codes (uCode) used unit names required.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/new_coin.html","id":"imeta","dir":"Reference","previous_headings":"","what":"iMeta","title":"Create a new coin — new_coin","text":"Required columns iMeta : Level: Level aggregation, 1 indicator level, 2 level resulting aggregating indicators, 3 result aggregating level 2, . Set NA entries included index (groups, denominators, etc). iCode: Indicator code, alphanumeric. Must start number. Parent: Group (iCode) indicator/aggregate belongs level immediately . entry also found iCode. Set NA highest (Index) level (parent), entries included index (groups, denominators, etc). Direction: Numeric, either -1 1 Weight: Numeric weight, rescaled sum 1 within aggregation group. Set NA entries included index (groups, denominators, etc). Type: type, corresponding iCode. Can either Indicator, Aggregate, Group, Denominator, . Optional columns recognised certain functions : iName: Name indicator: longer name used plotting functions. Unit: unit indicator, e.g. USD, thousands, score, etc. Used plots available. Target: target indicator. Used normalisation type distance--target. iMeta data frame essentially gives details columns found iData, well details additional data columns eventually created aggregating indicators. means entries iMeta must include columns iData, except three special column names: uCode, uName, Time. words, column names iData appear iMeta$iCode, except three special cases mentioned. iName column optionally can used give longer names indicator can used display plots. iMeta also specifies structure index, specifying parent indicator aggregate. Parent column must refer entries can found iCode. Try View(ASEM_iMeta) example works. Level \"vertical\" level hierarchy, 1 bottom level (indicators), successive level created aggregating level according specified groups. Direction set 1 higher values indicator result higher values index, -1 opposite case. Type column specifies type entry: Indicator used indicators level 1. Aggregate aggregates created aggregating indicators aggregates. Otherwise set Group variable used building index instead defining groups units. Set Denominator variable used scaling (denominating) indicators. Finally, set variable ignored passed . entries cause error. Note: function requires columns specified, extra columns can also added without causing errors.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/new_coin.html","id":"other-arguments","dir":"Reference","previous_headings":"","what":"Other arguments","title":"Create a new coin — new_coin","text":"exclude argument can used exclude specified indicators. specified, .$Data$Raw built excluding indicators, subsequent build operations. However full data set still stored .$Log$new_coin. codes correspond entries iMeta$iCode. option useful e.g. generating alternative coins different indicator sets, can included variable sensitivity analysis. split_to argument allows panel data used. Panel data must Time column iData, consists numerical time variable, year. Panel data multiple observations uCode, one unique entry Time. Time column required numerical, needs possible order . split panel data, specify split_to = \"\" split single coin unique entries Time. Alternatively, can pass vector entries Time allows split subset entries Time. Splitting panel data results -called \"purse\" class, data frame COINs, indexed Time. See vignette(\"coins\") details. function replaces now-defunct assemble() COINr < v1.0.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/new_coin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new coin — new_coin","text":"","code":"# build a coin using example data frames ASEM_coin <- new_coin(iData = ASEM_iData,                       iMeta = ASEM_iMeta,                       level_names = c(\"Indicator\", \"Pillar\", \"Sub-index\", \"Index\")) #> iData checked and OK. #> iMeta checked and OK. #> Written data set to .$Data$Raw # view coin contents ASEM_coin #> -------------- #> A coin with... #> -------------- #> Input: #>   Units: 51 (AUS, AUT, BEL, ...) #>   Indicators: 49 (Goods, Services, FDI, ...) #>   Denominators: 4 (Area, Energy, GDP, ...) #>   Groups: 4 (GDP_group, GDPpc_group, Pop_group, ...) #>  #> Structure: #>   Level 1 Indicator: 49 indicators (FDI, ForPort, Goods, ...)  #>   Level 2 Pillar: 8 groups (ConEcFin, Instit, P2P, ...)  #>   Level 3 Sub-index: 2 groups (Conn, Sust)  #>   Level 4 Index: 1 groups (Index)  #>  #> Data sets: #>   Raw (51 units)  # build example purse class ASEM_purse <- new_coin(iData = ASEM_iData_p,                        iMeta = ASEM_iMeta,                        split_to = \"all\",                        quietly = TRUE) # view purse contents ASEM_purse #> ----------------------------- #> A purse with... 5 coins  #> ----------------------------- #>  #>  Time n_Units n_Inds n_dsets #>  2018      51     49       1 #>  2019      51     49       1 #>  2020      51     49       1 #>  2021      51     49       1 #>  2022      51     49       1 #>  #> ----------------------------------- #> Sample from first coin (2018): #> ----------------------------------- #>  #> Input: #>   Units: 51 (AUS, AUT, BEL, ...) #>   Indicators: 49 (Goods, Services, FDI, ...) #>   Denominators: 4 (Area, Energy, GDP, ...) #>   Groups: 4 (GDP_group, GDPpc_group, Pop_group, ...) #>  #> Structure: #>   Level 1 : 49 indicators (FDI, ForPort, Goods, ...)  #>   Level 2 : 8 groups (ConEcFin, Instit, P2P, ...)  #>   Level 3 : 2 groups (Conn, Sust)  #>   Level 4 : 1 groups (Index)  #>  #> Data sets: #>   Raw (51 units)  # see vignette(\"coins\") for further info"},{"path":"https://bluefoxr.github.io/COINr/reference/outrankMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Outranking matrix — outrankMatrix","title":"Outranking matrix — outrankMatrix","text":"Constructs outranking matrix based data frame indicator data corresponding weights.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/outrankMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Outranking matrix — outrankMatrix","text":"","code":"outrankMatrix(X, w = NULL)"},{"path":"https://bluefoxr.github.io/COINr/reference/outrankMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Outranking matrix — outrankMatrix","text":"X data frame matrix indicator data, observations rows indicators columns. columns present (e.g. label columns). w vector weights, length equal ncol(X). Weights relative re-scaled sum 1. w specified, defaults equal weights.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/outrankMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Outranking matrix — outrankMatrix","text":"list : .$OutRankMatrix outranking matrix nrow(X) rows columns (matrix class). .$nDominant number dominance/robust pairs .$fracDominant percentage dominance/robust pairs","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/outrankMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Outranking matrix — outrankMatrix","text":"","code":"# get a sample of a few indicators ind_data <- COINr::ASEM_iData[12:16] # calculate outranking matrix outlist <- outrankMatrix(ind_data) #> No weights specified for outranking matrix, using equal weights. # see fraction of dominant pairs (robustness) outlist$fracDominant #> [1] 0.2533333"},{"path":"https://bluefoxr.github.io/COINr/reference/plot_bar.html","id":null,"dir":"Reference","previous_headings":"","what":"Bar chart — plot_bar","title":"Bar chart — plot_bar","text":"Plot bar charts single indicators. Bar charts can coloured optional grouping variable by_group, iCode points aggregate, setting stack_children = TRUE plot iCode coloured underlying scores.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/plot_bar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bar chart — plot_bar","text":"","code":"plot_bar(   coin,   dset,   iCode,   ...,   uLabel = \"uCode\",   axes_label = \"iCode\",   by_group = NULL,   filter_to_ends = NULL,   dset_label = FALSE,   log_scale = FALSE,   stack_children = FALSE,   bar_colours = NULL )"},{"path":"https://bluefoxr.github.io/COINr/reference/plot_bar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bar chart — plot_bar","text":"coin coin object. dset Data set extract variable plot. Passed get_data(). iCode Code variable indicator plot. Passed get_data(). ... arguments pass get_data(), e.g. filtering units. uLabel label units: either \"uCode\", \"uName\". axes_label label y axis group legend: either \"iCode\" \"iName\". by_group Optional group variable use colour bars. used stack_children = TRUE. filter_to_ends Optional way filter bar chart display top/bottom N units. useful cases number units large. Specify e.g. list(top = 10) list(bottom = 10) return top bottom ten units respectively (value 10 can changed course). dset_label Logical: whether include data set y axis label. log_scale Logical: TRUE uses log scale y axis. stack_children Logical: TRUE iCode refers aggregate, plot iCode bar split underlying component values (underlying indicators/aggregates used create iCode). use , must aggregated data dset must point data set underlying (child) scores iCode available. bar_colours Optional vector colour codes colouring bars.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/plot_bar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bar chart — plot_bar","text":"ggplot2 plot object.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/plot_bar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bar chart — plot_bar","text":"function uses ggplot2 generate plots, plot can manipulated using ggplot2 commands. See vignette(\"visualisation) details plotting.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/plot_bar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bar chart — plot_bar","text":"","code":"# build example coin coin <- build_example_coin(up_to = \"new_coin\", quietly = TRUE)  # bar plot of CO2 by GDP per capita group plot_bar(coin, dset = \"Raw\", iCode = \"CO2\",          by_group = \"GDPpc_group\", axes_label = \"iName\")"},{"path":"https://bluefoxr.github.io/COINr/reference/plot_corr.html","id":null,"dir":"Reference","previous_headings":"","what":"Static heatmaps of correlation matrices — plot_corr","title":"Static heatmaps of correlation matrices — plot_corr","text":"Generates heatmaps correlation matrices using ggplot2, can tailored according grouping structure index. enables correlating set indicators , supports calling named aggregation groups indicators. withparent argument generates tables correlations parents indicator. Also supports discrete colour maps using flagcolours, different types correlation, groups plots higher aggregation levels.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/plot_corr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Static heatmaps of correlation matrices — plot_corr","text":"","code":"plot_corr(   coin,   dset,   iCodes = NULL,   Levels = 1,   ...,   cortype = \"pearson\",   withparent = FALSE,   grouplev = NULL,   box_level = NULL,   showvals = TRUE,   flagcolours = FALSE,   flagthresh = NULL,   pval = 0.05,   insig_colour = \"#F0F0F0\",   text_colour = NULL,   discrete_colours = NULL,   box_colour = NULL,   order_as = NULL,   use_directions = FALSE )"},{"path":"https://bluefoxr.github.io/COINr/reference/plot_corr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Static heatmaps of correlation matrices — plot_corr","text":"coin coin object dset target data set. iCodes optional list character vectors first entry specifies indicator/aggregate codes correlate second entry (also specification indicator/aggregate codes) Levels aggregation levels take two groups indicators . See get_data() details. ... Optional arguments pass get_data(). cortype type correlation calculate, either \"pearson\", \"spearman\", \"kendall\" (see stats::cor()). withparent aglev[1] != aglev[2], equal TRUE plot correlations row parent. \"family\", plots lowest aggregation level Levels parent levels. FALSE plots full correlation matrix (default). grouplev aggregation level group correlations aglev[1] == aglev[2]. default, groups correlations aggregation level . Set 0 disable grouping plot full matrix. box_level aggregation level draw boxes around aglev[1] == aglev[2]. showvals TRUE, shows correlation values. FALSE, values shown. flagcolours TRUE, uses discrete colour map thresholds defined flagthresh. FALSE uses continuous colour map. flagthresh 3-length vector thresholds highlighting correlations, flagcolours = TRUE. flagthresh[1] negative threshold (default -0.4). value, values flagged red. flagthresh[2] \"weak\" threshold (default 0.3). Values flagthresh[1] flagthresh[2] coloured grey. flagthresh[3] \"high\" threshold (default 0.9). Anything flagthresh[2] flagthresh[3] flagged \"OK\", anything flagthresh[3] flagged \"high\". pval significance level plotting correlations. Correlations \\(p < pval\\) shown, otherwise plotted colour specified insig_colour. Set 0 disable . insig_colour colour plot insignificant correlations. Defaults light grey. text_colour colour correlation value text (default white). discrete_colours optional 4-length character vector colour codes names define discrete colour map flagcolours = TRUE (high low correlation categories). Defaults green/blue/grey/purple. box_colour line colour grouping boxes, default black. order_as Optional list ordering plotting variables. specified, must list length 2, entry list character vector iCodes plotted x y axes plot. plot follow order character vectors. Note must used care grouplev boxlev arguments follow reordering. Hence argument probably best used plots grouping, simply re-ordering within groups. use_directions Logical: TRUE extracted data adjusted using directions found inside coin (.e. \"Direction\" column input iMeta: indicators negative direction values multiplied -1 reverse direction correlation). set TRUE data set yet normalised. example, can useful set TRUE analyse correlations raw data, make sense analyse correlations normalised data already direction adjusted! reverse direction twice. words, use discretion.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/plot_corr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Static heatmaps of correlation matrices — plot_corr","text":"plot object generated ggplot2, can edited ggplot2 commands.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/plot_corr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Static heatmaps of correlation matrices — plot_corr","text":"function calls get_corr(). Note function can call correlations within data set (.e. one data set .$Data). function uses ggplot2 generate plots, plot can manipulated using ggplot2 commands. See vignette(\"visualisation\") details plotting. function replaces now-defunct plotCorr() COINr < v1.0.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/plot_corr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Static heatmaps of correlation matrices — plot_corr","text":"","code":"# build example coin coin <- build_example_coin(up_to = \"Normalise\", quietly = TRUE)  # plot correlations between indicators in Sust group, using Normalised dset plot_corr(coin, dset = \"Normalised\", iCodes = list(\"Sust\"),           grouplev = 2, flagcolours = TRUE)"},{"path":"https://bluefoxr.github.io/COINr/reference/plot_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Static indicator distribution plots — plot_dist","title":"Static indicator distribution plots — plot_dist","text":"Plots indicator distributions using box plots, dot plots, violin plots, violin-dot plots, histograms. Supports plotting multiple indicators calling aggregation groups.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/plot_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Static indicator distribution plots — plot_dist","text":"","code":"plot_dist(   coin,   dset,   iCodes,   ...,   type = \"Box\",   normalise = FALSE,   global_specs = NULL )"},{"path":"https://bluefoxr.github.io/COINr/reference/plot_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Static indicator distribution plots — plot_dist","text":"coin coin object, data frame indicator data dset name data set apply function , accessible .$Data. iCodes Indicator code(s) plot. See details. ... arguments passed get_data() (coin, dset iCodes). type type plot. Currently supported \"Box\", \"Dot\", \"Violin\", \"Violindot\", \"Histogram\". normalise Logical: TRUE, normalises data first, using global_specs. FALSE (default), data normalised. global_specs Specifications normalising data normalise = TRUE. passed global_specs argument Normalise().","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/plot_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Static indicator distribution plots — plot_dist","text":"ggplot2 plot object.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/plot_dist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Static indicator distribution plots — plot_dist","text":"function uses ggplot2 generate plots, plot can manipulated using ggplot2 commands. See vignette(\"visualisation) details plotting. function replaces now-defunct plotIndDist() COINr < v1.0.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/plot_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Static indicator distribution plots — plot_dist","text":"","code":"# build example coin coin <- build_example_coin(up_to = \"new_coin\") #> iData checked and OK. #> iMeta checked and OK. #> Written data set to .$Data$Raw  # plot all indicators in P2P group plot_dist(coin, dset = \"Raw\", iCodes = \"P2P\", Level = 1, type = \"Violindot\") #> Bin width defaults to 1/30 of the range of the data. Pick better value with #> `binwidth`."},{"path":"https://bluefoxr.github.io/COINr/reference/plot_dot.html","id":null,"dir":"Reference","previous_headings":"","what":"Dot plots of single indicator with highlighting — plot_dot","title":"Dot plots of single indicator with highlighting — plot_dot","text":"Plots single indicator line dots, optionally highlights selected units statistics. intended showing relative position units units, rather statistical plot. latter, use plot_dist().","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/plot_dot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dot plots of single indicator with highlighting — plot_dot","text":"","code":"plot_dot(   coin,   dset,   iCode,   Level = NULL,   ...,   usel = NULL,   marker_type = \"circle\",   add_stat = NULL,   stat_label = NULL,   show_ticks = TRUE,   plabel = NULL,   usel_label = TRUE,   vert_adjust = 0.5 )"},{"path":"https://bluefoxr.github.io/COINr/reference/plot_dot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dot plots of single indicator with highlighting — plot_dot","text":"coin coin dset name data set apply function , accessible .$Data. iCode Code indicator aggregate found dset. Required length 1. Level level hierarchy extract data . See get_data(). ... arguments pass get_data(), explicitly specified . usel subset units highlight. marker_type type marker, either \"circle\" (default) \"cross\", marker number pass ggplot2 (0-25). add_stat statistic overlay, either \"mean\", \"median\" else specified value. stat_label optional string use label point specified add_stat. show_ticks Set FALSE remove axis ticks. plabel Controls labelling indicator. NULL (default), returns indicator code. Otherwise \"iName\", returns indicator name, \"iName+unit\", returns indicator name plus unit (found), \"unit\" returns unit (found), otherwise \"none\", displays text. Finally, string can passed, e.g. \"indicator\" display axis. usel_label TRUE (default) also labels selected units unit codes. FALSE disable. vert_adjust Adjusts vertical height text labels stat lines, matters depending plot size. Takes value 0 2 (higher probably remove label axis space).","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/plot_dot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dot plots of single indicator with highlighting — plot_dot","text":"ggplot2 plot object.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/plot_dot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dot plots of single indicator with highlighting — plot_dot","text":"function uses ggplot2 generate plots, plot can manipulated using ggplot2 commands. See vignette(\"visualisation) details plotting. function replaces now-defunct plotIndDot() COINr < v1.0.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/plot_dot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dot plots of single indicator with highlighting — plot_dot","text":"","code":"# build example coin coin <- build_example_coin(up_to = \"new_coin\") #> iData checked and OK. #> iMeta checked and OK. #> Written data set to .$Data$Raw  # dot plot of LPI, highlighting two countries and with median shown plot_dot(coin, dset = \"Raw\", iCode = \"LPI\", usel = c(\"JPN\", \"ESP\"),          add_stat = \"median\", stat_label = \"Median\", plabel = \"iName+unit\")"},{"path":"https://bluefoxr.github.io/COINr/reference/plot_framework.html","id":null,"dir":"Reference","previous_headings":"","what":"Framework plots — plot_framework","title":"Framework plots — plot_framework","text":"Plots hierarchical indicator framework. type = \"sunburst\" (default), framework plotted sunburst plot. type = \"stack\" plotted linear stack. cases, size component reflected weight weight parent, .e. \"effective weight\" framework.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/plot_framework.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framework plots — plot_framework","text":"","code":"plot_framework(   coin,   type = \"sunburst\",   colour_level = NULL,   text_colour = NULL,   text_size = NULL,   transparency = TRUE )"},{"path":"https://bluefoxr.github.io/COINr/reference/plot_framework.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framework plots — plot_framework","text":"coin coin class object type Either \"sunburst\" \"stack\". colour_level framework level, integer, colour . See details. text_colour Colour label text - default \"white\". text_size Text size labels, default 2.5 transparency TRUE, levels colour_level differentiated transparency.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/plot_framework.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Framework plots — plot_framework","text":"ggplot2 plot object","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/plot_framework.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Framework plots — plot_framework","text":"colouring plot defined extent colour_level argument. specified integer 1 highest level framework (.e. maximum iMeta$Level column). Levels higher including colour_level coloured individual colours standard colour palette. levels colour_level coloured colours parents, emphasise belong group, also avoid repeating colour palette. Levels colour_level can additionally differentiated setting transparency = TRUE apply increasing transparency lower levels. function returns ggplot2 class object. want control appearance plot, pass return output function variable, manipulate ggplot2 commands e.g. change colour palette, individual colours, add titles, etc. See vignette(\"visualisation) details plotting. function replaces now-defunct plotframework() COINr < v1.0.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/plot_framework.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framework plots — plot_framework","text":"","code":"# build example coin coin <- build_example_coin(up_to = \"new_coin\", quietly = TRUE)  # plot framework as sunburst, colouring at level 2 upwards plot_framework(coin, colour_level = 2, transparency = TRUE)"},{"path":"https://bluefoxr.github.io/COINr/reference/plot_scatter.html","id":null,"dir":"Reference","previous_headings":"","what":"Scatter plot of two variables — plot_scatter","title":"Scatter plot of two variables — plot_scatter","text":"convenient quick scatter plot function plotting two variables x y coin . minimum, must specify data set iCode x y using dsets iCodes arguments.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/plot_scatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scatter plot of two variables — plot_scatter","text":"","code":"plot_scatter(   coin,   dsets,   iCodes,   ...,   by_group = NULL,   alpha = 0.5,   axes_label = \"iCode\",   dset_label = TRUE,   point_label = NULL,   check_overlap = TRUE,   nudge_y = 5,   log_scale = c(FALSE, FALSE) )"},{"path":"https://bluefoxr.github.io/COINr/reference/plot_scatter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scatter plot of two variables — plot_scatter","text":"coin coin object dsets 2-length character vector specifying data sets extract v1 v2 , respectively (passed dset argument get_data(). Alternatively specify single string used x y. iCodes 2-length character vector specifying iCodes use v1 v2, respectively (passed iCodes argument get_data(). Alternatively specify single string used x y. ... Optional arguments passed get_data(), e.g. specify uCodes plot. by_group string specifying optional group variable. specified, plot coloured grouping variable. alpha Transparency value points 0 1, passed ggplot2. axes_label string specifying label axes legend. Either \"iCode\" use respective codes variable, else \"iName\" use names (specified iMeta). dset_label Logical: TRUE (default), also adds axis labels data set variable . point_label Specifies whether label points. \"uCode\", points labelled unit codes, else \"uName\", points labelled unit names. Set NULL remove labels (default). check_overlap Logical: TRUE (default), point labels overlap removed - results legible plot labels may missing. Else FALSE, labels plotted. nudge_y Parameter passed ggplot controls vertical adjustment text labels present. log_scale 2-length logical vector specifying whether use log axes x y respectively: TRUE, log axis used. Defaults -log.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/plot_scatter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scatter plot of two variables — plot_scatter","text":"ggplot2 object.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/plot_scatter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scatter plot of two variables — plot_scatter","text":"Optionally, scatter plot can coloured grouping variables specified coin (see by_group). Points axes can labelled using arguments. function powered ggplot2 outputs ggplot2 object. customise plot, assign output function variable use ggplot2 commands edit. See vignette(\"visualisation) details plotting.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/plot_scatter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scatter plot of two variables — plot_scatter","text":"","code":"# build example coin coin <- build_example_coin(up_to = \"new_coin\") #> iData checked and OK. #> iMeta checked and OK. #> Written data set to .$Data$Raw  # scatter plot of Flights against Population # coloured by GDP per capita # log scale applied to population plot_scatter(coin, dsets = c(\"uMeta\", \"Raw\"),              iCodes = c(\"Population\", \"Flights\"),              by_group = \"GDPpc_group\", log_scale = c(TRUE, FALSE))"},{"path":"https://bluefoxr.github.io/COINr/reference/plot_sensitivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot sensitivity indices — plot_sensitivity","title":"Plot sensitivity indices — plot_sensitivity","text":"Plots sensitivity indices bar pie charts.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/plot_sensitivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot sensitivity indices — plot_sensitivity","text":"","code":"plot_sensitivity(SAresults, ptype = \"bar\")"},{"path":"https://bluefoxr.github.io/COINr/reference/plot_sensitivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot sensitivity indices — plot_sensitivity","text":"SAresults list sensitivity/uncertainty analysis results plot_sensitivity(). ptype Type plot generate - either \"bar\", \"pie\" \"box\".","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/plot_sensitivity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot sensitivity indices — plot_sensitivity","text":"plot sensitivity indices generated ggplot2.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/plot_sensitivity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot sensitivity indices — plot_sensitivity","text":"use function first need run get_sensitivity(). enter resulting list SAresults argument . See vignette(\"sensitivity\"). function replaces now-defunct plotSA() COINr < v1.0.","code":""},{"path":[]},{"path":"https://bluefoxr.github.io/COINr/reference/plot_sensitivity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot sensitivity indices — plot_sensitivity","text":"","code":"# for examples, see `vignette(\"sensitivity\")` # (this is because package examples are run automatically and sensitivity analysis # can take a few minutes to run at realistic settings)"},{"path":"https://bluefoxr.github.io/COINr/reference/plot_uncertainty.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot ranks from an uncertainty/sensitivity analysis — plot_uncertainty","title":"Plot ranks from an uncertainty/sensitivity analysis — plot_uncertainty","text":"Plots ranks resulting uncertainty sensitivity analysis, particular plots median, 5th/95th percentiles ranks.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/plot_uncertainty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot ranks from an uncertainty/sensitivity analysis — plot_uncertainty","text":"","code":"plot_uncertainty(   SAresults,   plot_units = NULL,   order_by = \"nominal\",   dot_colour = NULL,   line_colour = NULL )"},{"path":"https://bluefoxr.github.io/COINr/reference/plot_uncertainty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot ranks from an uncertainty/sensitivity analysis — plot_uncertainty","text":"SAresults list sensitivity/uncertainty analysis results get_sensitivity(). plot_units character vector units plot. Defaults units. can also set \"top10\" plot top 10 units, \"bottom10\" bottom ten. order_by set \"nominal\", orders rank plot nominal ranks (.e. original ranks prior sensitivity analysis). Otherwise \"median\", orders median ranks. dot_colour Colour dots representing median ranks. line_colour Colour lines connecting 5th 95th percentiles.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/plot_uncertainty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot ranks from an uncertainty/sensitivity analysis — plot_uncertainty","text":"plot rank confidence intervals, generated 'ggplot2'.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/plot_uncertainty.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot ranks from an uncertainty/sensitivity analysis — plot_uncertainty","text":"use function first need run get_sensitivity(). enter resulting list SAresults argument . See vignette(\"sensitivity\"). function replaces now-defunct plotSARanks() COINr < v1.0.","code":""},{"path":[]},{"path":"https://bluefoxr.github.io/COINr/reference/plot_uncertainty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot ranks from an uncertainty/sensitivity analysis — plot_uncertainty","text":"","code":"# for examples, see `vignette(\"sensitivity\")` # (this is because package examples are run automatically and sensitivity analysis # can take a few minutes to run at realistic settings)"},{"path":"https://bluefoxr.github.io/COINr/reference/prc_change.html","id":null,"dir":"Reference","previous_headings":"","what":"Percentage change of time series — prc_change","title":"Percentage change of time series — prc_change","text":"Calculates percentage change time series initial value. time series defined y response variable, indexed x, time variable. per argument can optionally used scale result according period time. E.g. units x years, setting x = 10 measure percentage change per decade.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/prc_change.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Percentage change of time series — prc_change","text":"","code":"prc_change(y, x, per = 1)"},{"path":"https://bluefoxr.github.io/COINr/reference/prc_change.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Percentage change of time series — prc_change","text":"y numeric vector x numeric vector length y, indexing y time. NA values allowed x. per Numeric value scale change according period time. See description.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/prc_change.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Percentage change of time series — prc_change","text":"Percentage change scalar value.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/prc_change.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Percentage change of time series — prc_change","text":"function operates two ways, depending number data points. x y two non-NA observations, percentage change calculated using first last values. three points available, linear regression used estimate average percentage change. fewer two points available, percentage change estimated NA returned. y values equal, return change zero.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/prc_change.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Percentage change of time series — prc_change","text":"","code":"# a time vector x <- 2011:2020  # some random points y <- runif(10)  # find percentage change per decade prc_change(y, x, 10) #> [1] -23.75835"},{"path":"https://bluefoxr.github.io/COINr/reference/print.COIN.html","id":null,"dir":"Reference","previous_headings":"","what":"Print coin — print.coin","title":"Print coin — print.coin","text":"details coin","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/print.COIN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print coin — print.coin","text":"","code":"# S3 method for coin print(x, ...)"},{"path":"https://bluefoxr.github.io/COINr/reference/print.COIN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print coin — print.coin","text":"x coin ... Arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/print.COIN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print coin — print.coin","text":"Text output","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/print.purse.html","id":null,"dir":"Reference","previous_headings":"","what":"Print purse — print.purse","title":"Print purse — print.purse","text":"details purse","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/print.purse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print purse — print.purse","text":"","code":"# S3 method for purse print(x, ...)"},{"path":"https://bluefoxr.github.io/COINr/reference/print.purse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print purse — print.purse","text":"x purse ... Arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/print.purse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print purse — print.purse","text":"Text output","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/qNormalise.coin.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick normalisation of a coin — qNormalise.coin","title":"Quick normalisation of a coin — qNormalise.coin","text":"wrapper function Normalise(), offers simpler syntax less flexibility. normalises data set within coin using specified function f_n used normalise indicator, additional function arguments passed f_n_para. default, f_n = \"n_minmax\" f_n_para set indicators normalised using min-max method, 0 100.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/qNormalise.coin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick normalisation of a coin — qNormalise.coin","text":"","code":"# S3 method for coin qNormalise(   x,   dset,   f_n = \"n_minmax\",   f_n_para = list(l_u = c(0, 100)),   directions = NULL,   ... )"},{"path":"https://bluefoxr.github.io/COINr/reference/qNormalise.coin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick normalisation of a coin — qNormalise.coin","text":"x coin dset Name data set normalise f_n Name normalisation function (string) apply indicator. Default \"n_minmax\". f_n_para arguments pass f_n, named list. directions optional data frame containing following columns: iCode indicator code, corresponding column names data frame Direction numeric vector entries either -1 1 directions specified, directions taken iMeta table coin, available. ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/qNormalise.coin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quick normalisation of a coin — qNormalise.coin","text":"updated coin normalised data set.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/qNormalise.coin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quick normalisation of a coin — qNormalise.coin","text":"Essentially, function similar Normalise() brings parameters function arguments rather wrapped list. also allow individual normalisation. See Normalise() documentation details, vignette(\"normalise\").","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/qNormalise.coin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quick normalisation of a coin — qNormalise.coin","text":"","code":"# build example coin coin <- build_example_coin(up_to = \"new_coin\", quietly = TRUE)  # normalise raw data set using min max, but change to scale 1-10 coin <- qNormalise(coin, dset = \"Raw\", f_n = \"n_minmax\",                    f_n_para = list(l_u = c(1,10))) #> Written data set to .$Data$Normalised"},{"path":"https://bluefoxr.github.io/COINr/reference/qNormalise.data.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick normalisation of a data frame — qNormalise.data.frame","title":"Quick normalisation of a data frame — qNormalise.data.frame","text":"wrapper function Normalise(), offers simpler syntax less flexibility. normalises data frame using specified function f_n used normalise column, additional function arguments passed f_n_para. default, f_n = \"n_minmax\" f_n_para set columns x normalised using min-max method, 0 100.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/qNormalise.data.frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick normalisation of a data frame — qNormalise.data.frame","text":"","code":"# S3 method for data.frame qNormalise(x, f_n = \"n_minmax\", f_n_para = NULL, directions = NULL, ...)"},{"path":"https://bluefoxr.github.io/COINr/reference/qNormalise.data.frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick normalisation of a data frame — qNormalise.data.frame","text":"x numeric data frame f_n Name normalisation function (string) apply column x. Default \"n_minmax\". f_n_para arguments pass f_n, named list. f_n = \"n_minmax\", defaults list(l_u = c(0,100)) (scale 0 100). directions optional data frame containing following columns: iCode indicator code, corresponding column names data frame Direction numeric vector entries either -1 1 directions specified, directions assigned 1. Non-numeric columns need directions assigned. ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/qNormalise.data.frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quick normalisation of a data frame — qNormalise.data.frame","text":"normalised data frame","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/qNormalise.data.frame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quick normalisation of a data frame — qNormalise.data.frame","text":"Essentially, function similar Normalise() brings parameters function arguments rather wrapped list. also allow individual normalisation. See Normalise() documentation details, vignette(\"normalise\").","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/qNormalise.data.frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quick normalisation of a data frame — qNormalise.data.frame","text":"","code":"# some made up data X <- data.frame(uCode = letters[1:10],                 a = runif(10),                 b = runif(10)*100) # normalise (defaults to min-max) qNormalise(X) #>    uCode           a          b #> 1      a  71.4483732 100.000000 #> 2      b  15.8312959  57.102784 #> 3      c  52.0187848  83.098566 #> 4      d  84.9568118  60.421553 #> 5      e  96.5805544  74.485337 #> 6      f 100.0000000  81.152588 #> 7      g  84.9608737  91.792244 #> 8      h  55.1113640  25.776264 #> 9      i   0.8458408   5.554487 #> 10     j   0.0000000   0.000000"},{"path":"https://bluefoxr.github.io/COINr/reference/qNormalise.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick normalisation — qNormalise","title":"Quick normalisation — qNormalise","text":"generic wrapper function Normalise(), offers simpler syntax less flexibility.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/qNormalise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick normalisation — qNormalise","text":"","code":"qNormalise(x, ...)"},{"path":"https://bluefoxr.github.io/COINr/reference/qNormalise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick normalisation — qNormalise","text":"x Object normalised ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/qNormalise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quick normalisation — qNormalise","text":"normalised object","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/qNormalise.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quick normalisation — qNormalise","text":"See individual method documentation: qNormalise.data.frame() qNormalise.coin() qNormalise.purse()","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/qNormalise.purse.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick normalisation of a purse — qNormalise.purse","title":"Quick normalisation of a purse — qNormalise.purse","text":"wrapper function Normalise(), offers simpler syntax less flexibility. normalises data sets within purse using specified function f_n used normalise indicator, additional function arguments passed f_n_para. default, f_n = \"n_minmax\" f_n_para set indicators normalised using min-max method, 0 100.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/qNormalise.purse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick normalisation of a purse — qNormalise.purse","text":"","code":"# S3 method for purse qNormalise(   x,   dset,   f_n = \"n_minmax\",   f_n_para = list(l_u = c(0, 100)),   directions = NULL,   global = TRUE,   ... )"},{"path":"https://bluefoxr.github.io/COINr/reference/qNormalise.purse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick normalisation of a purse — qNormalise.purse","text":"x purse dset Name data set normalise f_n Name normalisation function (string) apply indicator. Default \"n_minmax\". f_n_para arguments pass f_n, named list. directions optional data frame containing following columns: iCode indicator code, corresponding column names data frame Direction numeric vector entries either -1 1 directions specified, directions taken iMeta table coin, available. global Logical: TRUE, normalisation performed \"globally\" across coins, using e.g. max min indicator coin. effectively makes normalised scores comparable coins scaled using parameters. Otherwise FALSE, coins normalised individually. ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/qNormalise.purse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quick normalisation of a purse — qNormalise.purse","text":"updated purse normalised data sets","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/qNormalise.purse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quick normalisation of a purse — qNormalise.purse","text":"Essentially, function similar Normalise() brings parameters function arguments rather wrapped list. also allow individual normalisation. Normalisation can either performed independently coin, entire panel data set simultaneously. See discussion Normalise.purse() vignette(\"normalise\").","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/qNormalise.purse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quick normalisation of a purse — qNormalise.purse","text":"","code":"# build example purse purse <- build_example_purse(up_to = \"new_coin\", quietly = TRUE)  # normalise using min-max, globally purse <- qNormalise(purse, dset = \"Raw\", global = TRUE) #> Written data set to .$Data$Normalised #> Written data set to .$Data$Normalised #> Written data set to .$Data$Normalised #> Written data set to .$Data$Normalised #> Written data set to .$Data$Normalised"},{"path":"https://bluefoxr.github.io/COINr/reference/qTreat.coin.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick outlier treatment of a coin — qTreat.coin","title":"Quick outlier treatment of a coin — qTreat.coin","text":"simplified version Treat() allows direct access default parameters. less flexibility, easier interface probably convenient objective use default treatment process minor adjustments.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/qTreat.coin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick outlier treatment of a coin — qTreat.coin","text":"","code":"# S3 method for coin qTreat(   x,   dset,   winmax = 5,   skew_thresh = 2,   kurt_thresh = 3.5,   f2 = \"log_CT\",   ... )"},{"path":"https://bluefoxr.github.io/COINr/reference/qTreat.coin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick outlier treatment of a coin — qTreat.coin","text":"x coin dset Name data set treat outliers winmax Maximum number points Winsorise indicator. Default 5. skew_thresh Absolute skew threshold - default 2. kurt_thresh Kurtosis threshold - default 3.5. f2 Function call Winsorisation bring skew kurtosis within limits. Default \"log_CT\". ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/qTreat.coin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quick outlier treatment of a coin — qTreat.coin","text":"updated coin treated data set .$Data$Treated.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/qTreat.coin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quick outlier treatment of a coin — qTreat.coin","text":"function treats indicator data set targeted dset using following process: First, checks whether skew kurtosis within specified limits skew_thresh kurt_thresh indicator within limits, applies winsorise() function, maximum number winsorised points specified winmax. winsorisation bring indicator within skew/kurtosis limits, instead passed f2, second outlier treatment function, default log_CT(). arguments qTreat() passed Treat(). See Treat() documentation details, vignette(\"treat\").","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/qTreat.coin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quick outlier treatment of a coin — qTreat.coin","text":"","code":"# build example coin coin <- build_example_coin(up_to = \"new_coin\", quietly = TRUE)  # treat with winmax = 3 coin <- qTreat(coin, dset = \"Raw\", winmax = 3) #> Written data set to .$Data$Treated"},{"path":"https://bluefoxr.github.io/COINr/reference/qTreat.data.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick outlier treatment of a data frame — qTreat.data.frame","title":"Quick outlier treatment of a data frame — qTreat.data.frame","text":"simplified version Treat() allows direct access default parameters. less flexibility, easier interface probably convenient objective use default treatment process minor adjustments.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/qTreat.data.frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick outlier treatment of a data frame — qTreat.data.frame","text":"","code":"# S3 method for data.frame qTreat(x, winmax = 5, skew_thresh = 2, kurt_thresh = 3.5, f2 = \"log_CT\", ...)"},{"path":"https://bluefoxr.github.io/COINr/reference/qTreat.data.frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick outlier treatment of a data frame — qTreat.data.frame","text":"x numeric data frame winmax Maximum number points Winsorise column. Default 5. skew_thresh Absolute skew threshold - default 2. kurt_thresh Kurtosis threshold - default 3.5. f2 Function call Winsorisation bring skew kurtosis within limits. Default \"log_CT\". ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/qTreat.data.frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quick outlier treatment of a data frame — qTreat.data.frame","text":"list","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/qTreat.data.frame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quick outlier treatment of a data frame — qTreat.data.frame","text":"function treats column x using following process: First, checks whether skew kurtosis within specified limits skew_thresh kurt_thresh column within limits, applies winsorise() function, maximum number winsorised points specified winmax. winsorisation bring column within skew/kurtosis limits, instead passed f2, second outlier treatment function, default log_CT(). arguments qTreat() passed Treat(). See Treat() documentation details, vignette(\"treat\").","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/qTreat.data.frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quick outlier treatment of a data frame — qTreat.data.frame","text":"","code":"# select three indicators df1 <- ASEM_iData[c(\"Flights\", \"Goods\", \"Services\")]  # treat data frame, changing winmax and skew/kurtosis limits l_treat <- qTreat(df1, winmax = 1, skew_thresh = 1.5, kurt_thresh = 3)  # Now we check what the results are: l_treat$Dets_Table #>      iCode check_SkewKurt0.Pass check_SkewKurt0.Skew check_SkewKurt0.Kurt #> 1  Flights                FALSE             2.103287             4.508879 #> 2    Goods                FALSE             2.649973             8.266610 #> 3 Services                 TRUE             1.701085             2.375656 #>   winsorise.nwin check_SkewKurt1.Pass check_SkewKurt1.Skew check_SkewKurt1.Kurt #> 1              1                FALSE             1.900658             3.336065 #> 2              1                FALSE             2.469910             7.087309 #> 3             NA                   NA                   NA                   NA #>   check_SkewKurt2.Pass check_SkewKurt2.Skew check_SkewKurt2.Kurt #> 1                 TRUE          -0.09502644           -0.8305217 #> 2                 TRUE           0.03104001           -0.8888965 #> 3                   NA                   NA                   NA"},{"path":"https://bluefoxr.github.io/COINr/reference/qTreat.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick outlier treatment — qTreat","title":"Quick outlier treatment — qTreat","text":"generic wrapper function Treat(). offers simpler syntax less flexibility.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/qTreat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick outlier treatment — qTreat","text":"","code":"qTreat(x, ...)"},{"path":"https://bluefoxr.github.io/COINr/reference/qTreat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick outlier treatment — qTreat","text":"x Object normalised. ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/qTreat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quick outlier treatment — qTreat","text":"treated object","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/qTreat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quick outlier treatment — qTreat","text":"See individual method documentation: qTreat.data.frame() qTreat.coin() qTreat.purse()","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/qTreat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quick outlier treatment — qTreat","text":"","code":"# See individual method examples"},{"path":"https://bluefoxr.github.io/COINr/reference/qTreat.purse.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick outlier treatment of a purse — qTreat.purse","title":"Quick outlier treatment of a purse — qTreat.purse","text":"simplified version Treat() allows direct access default parameters. less flexibility, easier interface probably convenient objective use default treatment process minor adjustments.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/qTreat.purse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick outlier treatment of a purse — qTreat.purse","text":"","code":"# S3 method for purse qTreat(   x,   dset,   winmax = 5,   skew_thresh = 2,   kurt_thresh = 3.5,   f2 = \"log_CT\",   ... )"},{"path":"https://bluefoxr.github.io/COINr/reference/qTreat.purse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick outlier treatment of a purse — qTreat.purse","text":"x purse dset Name data set treat outliers coin winmax Maximum number points Winsorise indicator. Default 5. skew_thresh Absolute skew threshold - default 2. kurt_thresh Kurtosis threshold - default 3.5. f2 Function call Winsorisation bring skew kurtosis within limits. Default \"log_CT\". ... arguments passed methods.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/qTreat.purse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quick outlier treatment of a purse — qTreat.purse","text":"updated purse","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/qTreat.purse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quick outlier treatment of a purse — qTreat.purse","text":"function simply applies data treatment coin. See documentation Treat.coin(), qTreat.coin() vignette(\"treat\").","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/qTreat.purse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quick outlier treatment of a purse — qTreat.purse","text":"","code":"#"},{"path":"https://bluefoxr.github.io/COINr/reference/rank_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a data frame to ranks — rank_df","title":"Convert a data frame to ranks — rank_df","text":"Replaces numerical columns data frame ranks. Uses sport ranking, .e. ties share highest rank place. Ignores non-numerical columns. See rank(). Optionally, returns -group ranks using specified grouping column.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/rank_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a data frame to ranks — rank_df","text":"","code":"rank_df(df, use_group = NULL)"},{"path":"https://bluefoxr.github.io/COINr/reference/rank_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a data frame to ranks — rank_df","text":"df data frame use_group optional column df (specified string) use grouping variable. specified, returns ranks inside group present column.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/rank_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a data frame to ranks — rank_df","text":"data frame equal data frame input, numerical columns replaced ranks.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/rank_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a data frame to ranks — rank_df","text":"function replaces now-defunct rankDF() COINr < v1.0.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/rank_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a data frame to ranks — rank_df","text":"","code":"# some random data, with a column of characters df <- data.frame(RName = c(\"A\", \"B\", \"C\"), Score1 = runif(3), Score2 = runif(3)) # convert to ranks rank_df(df) #>   RName Score1 Score2 #> 1     A      2      2 #> 2     B      1      1 #> 3     C      3      3 # grouped ranking - use some example data df1 <- ASEM_iData[c(\"uCode\", \"GDP_group\", \"Goods\", \"LPI\")] rank_df(df1, use_group = \"GDP_group\") #>    uCode GDP_group Goods LPI #> 1    AUT         L     7   5 #> 2    BEL         L     2   4 #> 3    BGR         S     2  10 #> 4    HRV         S     5   6 #> 5    CYP         S    11   8 #> 6    CZE         M     1   2 #> 7    DNK         L    10   7 #> 8    EST         S     7   3 #> 9    FIN         M     7   1 #> 10   FRA        XL     3   4 #> 11   DEU        XL     1   1 #> 12   GRC         M     8   7 #> 13   HUN         M     3   3 #> 14   IRL         L    12   8 #> 15   ITA        XL     6   6 #> 16   LVA         S     6   4 #> 17   LTU         S     3   2 #> 18   LUX         S     4   1 #> 19   MLT         S     9   7 #> 20   NLD         L     1   2 #> 21   NOR         L    11   9 #> 22   POL         L     5  11 #> 23   PRT         M     6   4 #> 24   ROU         M     5   8 #> 25   SVK         M     4   6 #> 26   SVN         S     1   5 #> 27   ESP        XL     8   7 #> 28   SWE         L     9   1 #> 29   CHE         L     4   6 #> 30   GBR        XL     4   2 #> 31   AUS        XL    11   5 #> 32   BGD         M     9  12 #> 33   BRN         S    13   9 #> 34   KHM         S     8  11 #> 35   CHN        XL     2   9 #> 36   IND        XL    10  10 #> 37   IDN        XL    12  11 #> 38   JPN        XL     5   3 #> 39   KAZ         M    10  11 #> 40   KOR        XL     7   8 #> 41   LAO         S    10  13 #> 42   MYS         L     8  10 #> 43   MNG         S    12  12 #> 44   MMR         M    13  13 #> 45   NZL         M    11   5 #> 46   PAK         M    12  10 #> 47   PHL         L    13  13 #> 48   RUS        XL     9  12 #> 49   SGP         L     3   3 #> 50   THA         L     6  12 #> 51   VNM         M     2   9"},{"path":"https://bluefoxr.github.io/COINr/reference/remove_elements.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the effect of removing indicators or aggregates — remove_elements","title":"Check the effect of removing indicators or aggregates — remove_elements","text":"analysis function seeing happens elements composite indicator removed. can help \"\" experiments acts different measure influence indicator aggregate.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/remove_elements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the effect of removing indicators or aggregates — remove_elements","text":"","code":"remove_elements(coin, Level, dset, iCode, quietly = FALSE)"},{"path":"https://bluefoxr.github.io/COINr/reference/remove_elements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the effect of removing indicators or aggregates — remove_elements","text":"coin coin class object, must constructed including aggregation step, .e. using Aggregate(). Level level remove elements. example, Level = 1 check effect removing indicator, one time. Level = 2 check effect removing aggregation groups indicator level, one time. dset name data set take iCode . likely name aggregated data set, typically \"Aggregated\". iCode character string indicating indicator aggregate code extract iteration. .e. normally set index code compare ranks index upon removing indicator aggregate. can code present .$Data[[dset]]. quietly Logical: FALSE (default) output console indication progress. Might useful iterating many indicators. Otherwise set TRUE shut .","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/remove_elements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the effect of removing indicators or aggregates — remove_elements","text":"list elements follows: .$Scores: data frame column scores unit, indicator/aggregate corresponding column name removed. E.g. .$Scores$Ind1 gives scores resulting removing \"Ind1\". .$Ranks: ranks .$RankDiffs: difference nominal rank rank removing indicator/aggregate .$RankAbsDiffs: absolute rank differences .$MeanAbsDiffs: , mean column. mean (units) absolute rank change resulting removing indicator aggregate.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/remove_elements.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check the effect of removing indicators or aggregates — remove_elements","text":"One way looking indicator \"importance\" composite indicator via correlations. different way see happens remove indicator completely framework. removing indicator whole aggregation indicators results little rank change, one indication perhaps necessary include . Emphasis one: may many things take account. function works successively setting weight indicator aggregate zero. analysis performed indicator level, creates copy coin, sets weight first indicator zero, regenerates results, compares nominal results (results weights set zero). repeats indicator turn, time one indicator set zero weights, others retain original weights. output series tables comparing scores ranks (see Value). Note \"removing indicator\" means precisely \"setting weight zero\". cases first implies second, check aggregation method using satisfies relationship. example, aggregation method use weights, setting weight zero effect. function replaces now-defunct removeElements() COINr < v1.0.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/remove_elements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the effect of removing indicators or aggregates — remove_elements","text":"","code":"# build example coin coin <- build_example_coin(quietly = TRUE)  # run function removing elements in level 2 l_res <- remove_elements(coin, Level = 3, dset = \"Aggregated\", iCode = \"Index\") #> Iteration 1 of 2 #> Iteration 2 of 2  # get summary of rank changes l_res$MeanAbsDiff #>  Nominal     Conn     Sust  #> 0.000000 5.254902 3.843137"},{"path":"https://bluefoxr.github.io/COINr/reference/replace_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace multiple values in a data frame — replace_df","title":"Replace multiple values in a data frame — replace_df","text":"Given data frame (vector), function replaces values according look table dictionary. COINr may useful exchanging categorical data numeric scores, prior assembly. changing codes.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/replace_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace multiple values in a data frame — replace_df","text":"","code":"replace_df(df, lookup)"},{"path":"https://bluefoxr.github.io/COINr/reference/replace_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace multiple values in a data frame — replace_df","text":"df data frame vector lookup data frame columns old (values replaced) new values replace . See details.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/replace_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace multiple values in a data frame — replace_df","text":"data frame replaced values","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/replace_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Replace multiple values in a data frame — replace_df","text":"lookup data frame must duplicated values old column. function looks exact matches elements old column replaces corresponding value new column. row lookup, class old value must match class new value. keep classes data frames columns consistent. wish replace different class, convert classes data frame using function. function replaces now-defunct replaceDF() COINr < v1.0.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/replace_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace multiple values in a data frame — replace_df","text":"","code":"# replace sub-pillar codes in ASEM indicator metadata codeswap <- data.frame(old = c(\"Conn\", \"Sust\"), new = c(\"SI1\", \"SI2\")) # swap codes in both iMeta replace_df(ASEM_iMeta, codeswap) #>    Level         iCode #> 1      1           LPI #> 2      1       Flights #> 3      1          Ship #> 4      1          Bord #> 5      1          Elec #> 6      1           Gas #> 7      1      ConSpeed #> 8      1         Cov4G #> 9      1         Goods #> 10     1      Services #> 11     1           FDI #> 12     1        PRemit #> 13     1       ForPort #> 14     1          Embs #> 15     1          IGOs #> 16     1        UNVote #> 17     1     CostImpEx #> 18     1        Tariff #> 19     1          TBTs #> 20     1        TIRcon #> 21     1          RTAs #> 22     1          Visa #> 23     1         StMob #> 24     1      Research #> 25     1           Pat #> 26     1      CultServ #> 27     1      CultGood #> 28     1       Tourist #> 29     1      MigStock #> 30     1          Lang #> 31     1         Renew #> 32     1      PrimEner #> 33     1           CO2 #> 34     1        MatCon #> 35     1        Forest #> 36     1       Poverty #> 37     1         Palma #> 38     1      TertGrad #> 39     1     FreePress #> 40     1        TolMin #> 41     1          NGOs #> 42     1           CPI #> 43     1        FemLab #> 44     1       WomParl #> 45     1       PubDebt #> 46     1      PrivDebt #> 47     1       GDPGrow #> 48     1         RDExp #> 49     1          NEET #> 50     2      Physical #> 51     2      ConEcFin #> 52     2     Political #> 53     2        Instit #> 54     2           P2P #> 55     2       Environ #> 56     2        Social #> 57     2      SusEcFin #> 58     3           SI1 #> 59     3           SI2 #> 60     4         Index #> 61    NA     GDP_group #> 62    NA   GDPpc_group #> 63    NA     Pop_group #> 64    NA EurAsia_group #> 65    NA          Area #> 66    NA        Energy #> 67    NA           GDP #> 68    NA    Population #>                                                             iName Direction #> 1                                     Logistics Performance Index         1 #> 2                        International flights passenger capacity         1 #> 3                               Liner Shipping Connectivity Index         1 #> 4                                                Border crossings         1 #> 5                                            Trade in electricity         1 #> 6                                                    Trade in gas         1 #> 7                                        Average connection speed         1 #> 8              Population covered by at least a 4G mobile network         1 #> 9                                                  Trade in goods         1 #> 10                                              Trade in services         1 #> 11                                      Foreign direct investment         1 #> 12                       Personal remittances (received and paid)         1 #> 13            Foreign portfolio investment liabilities and assets         1 #> 14                                              Embassies network         1 #> 15 Participation in international intergovernmental organisations         1 #> 16                                            UN voting alignment         1 #> 17                                          Cost to export/import        -1 #> 18                                               Mean tariff rate        -1 #> 19                                    Technical barriers to trade        -1 #> 20                                    Signatory of TIR Convention         1 #> 21                                      Regional trade agreements         1 #> 22                                   Visa-free or visa-on-arrival         1 #> 23           International student mobility in tertiary education         1 #> 24             Research outputs with international collaborations         1 #> 25                               Patents with foreign co-inventor         1 #> 26                                     Trade in cultural services         1 #> 27                                        Trade in cultural goods         1 #> 28                           Tourist arrivals at national borders         1 #> 29                                                  Migrant stock         1 #> 30                                         Common languages users         1 #> 31             Renewable energy in total final energy consumption         1 #> 32                                     Primary energy use per GDP        -1 #> 33                                       CO2 emissions per capita        -1 #> 34                       Domestic material consumption per capita        -1 #> 35                                                Net forest loss        -1 #> 36          Population living below the intenational poverty line        -1 #> 37                                                    Palma Index        -1 #> 38                                             Tertiary graduates         1 #> 39                                           Freedom of the press        -1 #> 40                                       Tolerance for minorities        -1 #> 41       Presence of international non-governmental organisations         1 #> 42                                   Corruption Perceptions Index         1 #> 43                              Female labour-force participation         1 #> 44                  Women's participation in national parliaments         1 #> 45                             Public debt as a percentage of GDP        -1 #> 46   Private debt, loans and debt securities as percentage of GDP        -1 #> 47                                          GDP per capita growth         1 #> 48                         R&D expenditure as a percentage of GDP         1 #> 49   Proportion of youth not in education, employment or training        -1 #> 50                                                       Physical         1 #> 51                                   Economic and Financial (Con)         1 #> 52                                                      Political         1 #> 53                                                  Institutional         1 #> 54                                               People to People         1 #> 55                                                  Environmental         1 #> 56                                                         Social         1 #> 57                                   Economic and Financial (Sus)         1 #> 58                                                   Connectivity         1 #> 59                                                 Sustainability         1 #> 60                                       Sustainable Connectivity         1 #> 61                                                      GDP group        NA #> 62                                           GDP per capita group        NA #> 63                                               Population group        NA #> 64                                                 Europe or Asia        NA #> 65                                                      Land area        NA #> 66                                             Energy consumption        NA #> 67                                                            GDP        NA #> 68                                                     Population        NA #>    Weight                                                   Unit       Target #> 1       1                                              Score 1-5 4.118031e+00 #> 2       1                                         Thousand seats 2.003327e+02 #> 3       1                                                  Score 2.011338e+01 #> 4       1                                    Number of crossings 1.159000e+02 #> 5       1                                                    TWh 1.046706e+02 #> 6       1                                         Billion tonnes 9.006042e+01 #> 7       1                                                   Mbps 2.744500e+01 #> 8       1                                                Percent 9.500000e+01 #> 9       1                                           Trillion USD 1.823596e+03 #> 10      1                                            Million USD 6.243225e+02 #> 11      1                                            Billion USD 7.182650e+01 #> 12      1                                            Million USD 2.870772e+01 #> 13      1                                            Million USD 1.007166e+04 #> 14      1                                                 Number 9.640000e+01 #> 15      1                                                 Number 3.166500e+02 #> 16      1                                                  Score 4.281453e+01 #> 17      1                                            Current USD 4.960000e+01 #> 18      1                                                Percent 5.265000e-01 #> 19      1               Number of measures (initiated, in force) 8.865000e+01 #> 20      1                                       (1 (yes)/0 (no)) 9.500000e-01 #> 21      1                        Number of bilateral connections 4.375000e+01 #> 22      1                                    Number of countries 8.745000e+01 #> 23      1                       Thousands international students 4.228385e+02 #> 24      1                                                 Number 9.152890e+04 #> 25      1                                                 Number 2.633130e+03 #> 26      1                                            Million USD 9.091595e+00 #> 27      1                                            Million USD 7.074690e+01 #> 28      1                                       Number of people 7.844775e+01 #> 29      1                                       Thousands people 1.038616e+01 #> 30      1                                                  Score 2.041194e+01 #> 31      1                                                Percent 6.167833e+01 #> 32      1 kg of oil equivalent per $1000 GDP (constant 2011 PPP) 6.042716e+01 #> 33      1                                      Tonnes per capita 1.388576e+00 #> 34      1                                      Tonnes per capita 4.367344e+00 #> 35      1                                                Percent 1.902348e+00 #> 36      1                                                Percent 1.135000e+00 #> 37      1                                                  Ratio 9.670000e-01 #> 38      1                                                Percent 3.582519e+01 #> 39      1                                                  Score 1.195000e+01 #> 40      1                                                  Score 1.535000e+00 #> 41      1           Number of secretariats per 1,000 inhabitants 1.732800e+03 #> 42      1                                                  Score 8.560000e+01 #> 43      1                                                  Ratio 9.909484e-01 #> 44      1                                                Percent 4.161826e+01 #> 45      1                                                Percent 1.506850e+01 #> 46      1                                                Percent 3.975949e+01 #> 47      1                                                Percent 7.166495e+00 #> 48      1                                                Percent 4.020985e+00 #> 49      1                                                Percent 2.675000e+00 #> 50      1                                                  Score           NA #> 51      1                                                  Score           NA #> 52      1                                                  Score           NA #> 53      1                                                  Score           NA #> 54      1                                                  Score           NA #> 55      1                                                  Score           NA #> 56      1                                                  Score           NA #> 57      1                                                  Score           NA #> 58      1                                                  Score           NA #> 59      1                                                  Score           NA #> 60      1                                                  Score           NA #> 61     NA                                                   <NA>           NA #> 62     NA                                                   <NA>           NA #> 63     NA                                                   <NA>           NA #> 64     NA                                                   <NA>           NA #> 65     NA                                     Thousand square km           NA #> 66     NA                                                   Unit           NA #> 67     NA                                                 USD Bn           NA #> 68     NA                                              Thousands           NA #>    Denominator    Parent        Type #> 1         <NA>  Physical   Indicator #> 2   Population  Physical   Indicator #> 3         <NA>  Physical   Indicator #> 4         Area  Physical   Indicator #> 5       Energy  Physical   Indicator #> 6       Energy  Physical   Indicator #> 7         <NA>  Physical   Indicator #> 8         <NA>  Physical   Indicator #> 9          GDP  ConEcFin   Indicator #> 10         GDP  ConEcFin   Indicator #> 11         GDP  ConEcFin   Indicator #> 12         GDP  ConEcFin   Indicator #> 13         GDP  ConEcFin   Indicator #> 14        <NA> Political   Indicator #> 15        <NA> Political   Indicator #> 16        <NA> Political   Indicator #> 17        <NA>    Instit   Indicator #> 18        <NA>    Instit   Indicator #> 19        <NA>    Instit   Indicator #> 20        <NA>    Instit   Indicator #> 21        <NA>    Instit   Indicator #> 22        <NA>    Instit   Indicator #> 23  Population       P2P   Indicator #> 24         GDP       P2P   Indicator #> 25         GDP       P2P   Indicator #> 26         GDP       P2P   Indicator #> 27         GDP       P2P   Indicator #> 28  Population       P2P   Indicator #> 29  Population       P2P   Indicator #> 30        <NA>       P2P   Indicator #> 31        <NA>   Environ   Indicator #> 32        <NA>   Environ   Indicator #> 33        <NA>   Environ   Indicator #> 34        <NA>   Environ   Indicator #> 35        <NA>   Environ   Indicator #> 36        <NA>    Social   Indicator #> 37        <NA>    Social   Indicator #> 38        <NA>    Social   Indicator #> 39        <NA>    Social   Indicator #> 40        <NA>    Social   Indicator #> 41  Population    Social   Indicator #> 42        <NA>    Social   Indicator #> 43        <NA>    Social   Indicator #> 44        <NA>    Social   Indicator #> 45        <NA>  SusEcFin   Indicator #> 46        <NA>  SusEcFin   Indicator #> 47        <NA>  SusEcFin   Indicator #> 48        <NA>  SusEcFin   Indicator #> 49        <NA>  SusEcFin   Indicator #> 50        <NA>       SI1   Aggregate #> 51        <NA>       SI1   Aggregate #> 52        <NA>       SI1   Aggregate #> 53        <NA>       SI1   Aggregate #> 54        <NA>       SI1   Aggregate #> 55        <NA>       SI2   Aggregate #> 56        <NA>       SI2   Aggregate #> 57        <NA>       SI2   Aggregate #> 58        <NA>     Index   Aggregate #> 59        <NA>     Index   Aggregate #> 60        <NA>      <NA>   Aggregate #> 61        <NA>      <NA>       Group #> 62        <NA>      <NA>       Group #> 63        <NA>      <NA>       Group #> 64        <NA>      <NA>       Group #> 65        <NA>      <NA> Denominator #> 66        <NA>      <NA> Denominator #> 67        <NA>      <NA> Denominator #> 68        <NA>      <NA> Denominator"},{"path":"https://bluefoxr.github.io/COINr/reference/round_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Round down a data frame — round_df","title":"Round down a data frame — round_df","text":"Tiny function just round data frame display table, ignoring non-numeric columns.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/round_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round down a data frame — round_df","text":"","code":"round_df(df, decimals = 2)"},{"path":"https://bluefoxr.github.io/COINr/reference/round_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round down a data frame — round_df","text":"df data frame input decimals number decimal places round (default 2)","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/round_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Round down a data frame — round_df","text":"data frame, numeric columns rounded specified amount.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/round_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Round down a data frame — round_df","text":"function replaces now-defunct roundDF() COINr < v1.0.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/round_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Round down a data frame — round_df","text":"","code":"round_df( as.data.frame(matrix(runif(20),10,2)), decimals = 3) #>       V1    V2 #> 1  0.562 0.627 #> 2  0.537 0.725 #> 3  0.304 0.867 #> 4  0.333 0.605 #> 5  0.603 0.992 #> 6  0.973 0.866 #> 7  0.885 0.770 #> 8  0.195 0.535 #> 9  0.668 0.184 #> 10 0.910 0.891"},{"path":"https://bluefoxr.github.io/COINr/reference/signif_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Round a data frame to specified significant figures — signif_df","title":"Round a data frame to specified significant figures — signif_df","text":"Tiny function just round data frame significant figures display table, ignoring non-numeric columns.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/signif_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round a data frame to specified significant figures — signif_df","text":"","code":"signif_df(df, digits = 3)"},{"path":"https://bluefoxr.github.io/COINr/reference/signif_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round a data frame to specified significant figures — signif_df","text":"df data frame input digits number decimal places round (default 3)","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/signif_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Round a data frame to specified significant figures — signif_df","text":"data frame, numeric columns rounded specified amount.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/signif_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Round a data frame to specified significant figures — signif_df","text":"","code":"signif_df( as.data.frame(matrix(runif(20),10,2)), digits = 3) #>        V1     V2 #> 1  0.7760 0.5020 #> 2  0.0668 0.6380 #> 3  0.9040 0.0779 #> 4  0.8380 0.3930 #> 5  0.6730 0.6900 #> 6  0.0295 0.5850 #> 7  0.1970 0.8330 #> 8  0.1390 0.3090 #> 9  0.1470 0.6970 #> 10 0.9290 0.7150"},{"path":"https://bluefoxr.github.io/COINr/reference/skew.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate skewness — skew","title":"Calculate skewness — skew","text":"Calculates skewness values numeric vector. uses definition skewness \"skewness()\" function \"e1071\" package type == 2, equivalent definition skewness used Excel.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/skew.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate skewness — skew","text":"","code":"skew(x, na.rm = FALSE)"},{"path":"https://bluefoxr.github.io/COINr/reference/skew.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate skewness — skew","text":"x numeric vector. na.rm Set TRUE remove NA values, otherwise returns NA.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/skew.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate skewness — skew","text":"skewness value (scalar).","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/skew.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate skewness — skew","text":"","code":"x <- runif(20) skew(x) #> [1] 0.0005131574"},{"path":"https://bluefoxr.github.io/COINr/reference/winsorise.html","id":null,"dir":"Reference","previous_headings":"","what":"Winsorise a vector — winsorise","title":"Winsorise a vector — winsorise","text":"Follows \"standard\" Winsorisation approach: points successively Winsorised order bring skew kurtosis thresholds within specified limits. Specifically, aims bring absolute skew threshold (default 2.25) kurtosis another threshold (default 3.5).","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/winsorise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Winsorise a vector — winsorise","text":"","code":"winsorise(   x,   na.rm = FALSE,   winmax = 5,   skew_thresh = 2,   kurt_thresh = 3.5,   force_win = FALSE )"},{"path":"https://bluefoxr.github.io/COINr/reference/winsorise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Winsorise a vector — winsorise","text":"x numeric vector. na.rm Set TRUE remove NA values, otherwise returns NA. winmax Maximum number points Winsorise. Default 5. Set NULL limit. skew_thresh threshold absolute skewness (positive). Default 2.25. kurt_thresh threshold kurtosis. Default 3.5. force_win Logical: TRUE, forces winsorisation winmax (regardless skew/kurt). Default FALSE. Note - option used care direction Winsorisation based direction skew. Successively Winsorising can switch direction skew hence direction Winsorisation, may produce expected behaviour.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/winsorise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Winsorise a vector — winsorise","text":"list containing winsorised data, number winsorised points, individual points treated.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/winsorise.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Winsorise a vector — winsorise","text":"Winsorisation defined reassigning point highest/lowest value value next highest/lowest point. Whether Winsorise high low end scale decided direction skewness x. function replaces now-defunct coin_win() COINr < v1.0.","code":""},{"path":"https://bluefoxr.github.io/COINr/reference/winsorise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Winsorise a vector — winsorise","text":"","code":"# numbers between 1 and 10 x <- 1:10  # two outliers x <- c(x, 30, 100)  # winsorise l_win <- winsorise(x, skew_thresh = 2, kurt_thresh = 3.5)  # see treated vector, number of winsorised points and details l_win #> $x #>  [1]  1  2  3  4  5  6  7  8  9 10 30 30 #>  #> $nwin #> [1] 1 #>  #> $treated #>  [1] \"\"      \"\"      \"\"      \"\"      \"\"      \"\"      \"\"      \"\"      \"\"      #> [10] \"\"      \"\"      \"winhi\" #>"},{"path":"https://bluefoxr.github.io/COINr/news/index.html","id":"coinr-1129000","dir":"Changelog","previous_headings":"","what":"COINr 1.1.2.9000","title":"COINr 1.1.2.9000","text":"Dev version COINr next CRAN submission. Treat() now catches errors - data frame/coin/purse methods","code":""},{"path":"https://bluefoxr.github.io/COINr/news/index.html","id":"coinr-112","dir":"Changelog","previous_headings":"","what":"COINr 1.1.2","title":"COINr 1.1.2","text":"CRAN release: 2023-02-10 Lots small fixes feature extensions, including robust write log, can deal COINr::func_Name type calls Catch spaces numbers iCodes Tweaks correlation tables Reordering correlation plots Better input checks Extra stats Bi-direction log transformation negative skewed outlier treatment Subgroups units bar charts","code":""},{"path":"https://bluefoxr.github.io/COINr/news/index.html","id":"coinr-11","dir":"Changelog","previous_headings":"","what":"COINr 1.1","title":"COINr 1.1","text":"new functions bug fixes: Removed defunct function messages startup message, defunct functions now removed namespace New get_trends() function analysing time trends Option export purse class Excel Expand unit test coverage 80% Quite lot small bug fixes Improved documentation many places Improved colouring plots Enabled distance target normalisation plus examples vignette COINr now citable JOSS paper","code":""},{"path":"https://bluefoxr.github.io/COINr/news/index.html","id":"coinr-100","dir":"Changelog","previous_headings":"","what":"COINr 1.0.0","title":"COINr 1.0.0","text":"CRAN release: 2022-07-05 Major update COINr. main changes follows: Syntax changed consistent New streamlined “coin” class replaces older “COIN” class New “purse” class deal panel data (time dependent data) Removed interactive functions based plotly shiny Much fewer package dependencies Underlying code rewritten robust Improved functionality flexibility many functions COINr 0.6.1.9000 archived separate package called “COINr6” - can installed ensure older code still run. full changes extensive write . See vignette(\"v1\") also available online complete description changes. Note changes disruptive greatly improve package make maintainable future. one-major overhaul, backwards compatibility ensured.","code":""},{"path":"https://bluefoxr.github.io/COINr/news/index.html","id":"coinr-062","dir":"Changelog","previous_headings":"","what":"COINr 0.6.2","title":"COINr 0.6.2","text":"Fixed bug aggregate() wrongly assigning weights circumstances (note fairly significant bug - worth re-running results may affected ) Added colour option plotframework() Fixed bug compareDF() (resulting tibbles vs data frames) Fixed bug sensitivity() causing trouble running SA weights uncertainty specified","code":""},{"path":"https://bluefoxr.github.io/COINr/news/index.html","id":"coinr-061","dir":"Changelog","previous_headings":"","what":"COINr 0.6.1","title":"COINr 0.6.1","text":"CRAN release: 2021-11-30 Removed dependency new native pipe now runs R > 4.0","code":""},{"path":"https://bluefoxr.github.io/COINr/news/index.html","id":"coinr-060","dir":"Changelog","previous_headings":"","what":"COINr 0.6.0","title":"COINr 0.6.0","text":"CRAN release: 2021-11-26 New plot function plotIndDot() plotting single indicators possibility label units Added print method COIN class. methods come. Extended support panel data assemble(). can now output multiple COINs structured tibble. idea working multiple COINs extended future versions. Improved bug trapping Winsorisation function Added data availability thresholds aggregation - see aggregate() function. Better NA colour plotCorr() plus fixed variable ordering colour options plotCorr() Variable/aggregate ordering plotCorr() now matches grouping higher levels Add option PCA groups getPCA() Colour options plotSARanks() Added dominance pairs calculation ourankMatrix() Stopped max tab length exceeding Excel export. Online book now pretty much date COINr 0.6.","code":""},{"path":"https://bluefoxr.github.io/COINr/news/index.html","id":"coinr-055","dir":"Changelog","previous_headings":"","what":"COINr 0.5.5","title":"COINr 0.5.5","text":"CRAN release: 2021-09-16 COINr now requires R version 4.0.0 - following issues distributions CRAN checks. Improved documentation bug catching aggregate() New function replaceDF() simple utility multiple values one go data frame. New function removeElements() successively removes indicators aggregates one time summarises effects.","code":""},{"path":"https://bluefoxr.github.io/COINr/news/index.html","id":"coinr-054","dir":"Changelog","previous_headings":"","what":"COINr 0.5.4","title":"COINr 0.5.4","text":"CRAN release: 2021-09-09 Fixed various small issues flagged CRAN New function extractYear allows panel data passed assemble() (optionally) imputed latest year. Fixed bug plorCorr() getCorr() Changed WorldDenoms data set slightly use ASCII coding - involved unfortunately removing accents country names necessary avoid warning notes submitting CRAN. Added goalpost normalisation method, European Skills Index Fixed small bug compareDF()","code":""},{"path":"https://bluefoxr.github.io/COINr/news/index.html","id":"coinr-053","dir":"Changelog","previous_headings":"","what":"COINr 0.5.3","title":"COINr 0.5.3","text":"CRAN release: 2021-09-06 Fixes following comments CRAN. Patched holes documentation Function examples now run possible Shiny apps run now interactive mode","code":""},{"path":"https://bluefoxr.github.io/COINr/news/index.html","id":"coinr-052","dir":"Changelog","previous_headings":"","what":"COINr 0.5.2","title":"COINr 0.5.2","text":"first release submitted CRAN. Changes include: Documentation thoroughly cleaned , including coherent examples function. Small bugs checked fixed. vignette now available","code":""}]
